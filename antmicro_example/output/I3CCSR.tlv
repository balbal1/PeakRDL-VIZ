\m5_TLV_version 1d: tl-x.org

\SV

// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

package I3CCSR_pkg;

    localparam I3CCSR_DATA_WIDTH = 32;
    localparam I3CCSR_MIN_ADDR_WIDTH = 10;

    typedef struct {
        logic [15:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_2__REC_PROT_VERSION__in_t;

    typedef struct {
        logic [15:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_2__AGENT_CAPS__in_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_2__REC_PROT_VERSION__in_t REC_PROT_VERSION;
        SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_2__AGENT_CAPS__in_t AGENT_CAPS;
    } SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_2__in_t;

    typedef struct {
        logic [7:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_3__NUM_OF_CMS_REGIONS__in_t;

    typedef struct {
        logic [7:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_3__MAX_RESP_TIME__in_t;

    typedef struct {
        logic [7:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_3__HEARTBEAT_PERIOD__in_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_3__NUM_OF_CMS_REGIONS__in_t NUM_OF_CMS_REGIONS;
        SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_3__MAX_RESP_TIME__in_t MAX_RESP_TIME;
        SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_3__HEARTBEAT_PERIOD__in_t HEARTBEAT_PERIOD;
    } SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_3__in_t;

    typedef struct {
        logic [7:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_0__DESC_TYPE__in_t;

    typedef struct {
        logic [7:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_0__VENDOR_SPECIFIC_STR_LENGTH__in_t;

    typedef struct {
        logic [15:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_0__DATA__in_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_0__DESC_TYPE__in_t DESC_TYPE;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_0__VENDOR_SPECIFIC_STR_LENGTH__in_t VENDOR_SPECIFIC_STR_LENGTH;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_0__DATA__in_t DATA;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_0__in_t;

    typedef struct {
        logic [31:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_1__DATA__in_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_1__DATA__in_t DATA;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_1__in_t;

    typedef struct {
        logic [31:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_2__DATA__in_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_2__DATA__in_t DATA;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_2__in_t;

    typedef struct {
        logic [31:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_3__DATA__in_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_3__DATA__in_t DATA;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_3__in_t;

    typedef struct {
        logic [31:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_4__DATA__in_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_4__DATA__in_t DATA;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_4__in_t;

    typedef struct {
        logic [31:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_5__DATA__in_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_5__DATA__in_t DATA;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_5__in_t;

    typedef struct {
        logic [7:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_0__DEV_STATUS__in_t;

    typedef struct {
        logic [7:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_0__PROT_ERROR__in_t;

    typedef struct {
        logic [15:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_0__REC_REASON_CODE__in_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_0__DEV_STATUS__in_t DEV_STATUS;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_0__PROT_ERROR__in_t PROT_ERROR;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_0__REC_REASON_CODE__in_t REC_REASON_CODE;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_0__in_t;

    typedef struct {
        logic [15:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_1__HEARTBEAT__in_t;

    typedef struct {
        logic [8:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_1__VENDOR_STATUS_LENGTH__in_t;

    typedef struct {
        logic [6:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_1__VENDOR_STATUS__in_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_1__HEARTBEAT__in_t HEARTBEAT;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_1__VENDOR_STATUS_LENGTH__in_t VENDOR_STATUS_LENGTH;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_1__VENDOR_STATUS__in_t VENDOR_STATUS;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_1__in_t;

    typedef struct {
        logic [7:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_RESET__RESET_CTRL__in_t;

    typedef struct {
        logic [7:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_RESET__FORCED_RECOVERY__in_t;

    typedef struct {
        logic [7:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_RESET__IF_CTRL__in_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_RESET__RESET_CTRL__in_t RESET_CTRL;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_RESET__FORCED_RECOVERY__in_t FORCED_RECOVERY;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_RESET__IF_CTRL__in_t IF_CTRL;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_RESET__in_t;

    typedef struct {
        logic [7:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_CTRL__CMS__in_t;

    typedef struct {
        logic [7:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_CTRL__REC_IMG_SEL__in_t;

    typedef struct {
        logic [7:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_CTRL__ACTIVATE_REC_IMG__in_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_CTRL__CMS__in_t CMS;
        SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_CTRL__REC_IMG_SEL__in_t REC_IMG_SEL;
        SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_CTRL__ACTIVATE_REC_IMG__in_t ACTIVATE_REC_IMG;
    } SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_CTRL__in_t;

    typedef struct {
        logic [3:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_STATUS__DEV_REC_STATUS__in_t;

    typedef struct {
        logic [3:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_STATUS__REC_IMG_INDEX__in_t;

    typedef struct {
        logic [7:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_STATUS__VENDOR_SPECIFIC_STATUS__in_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_STATUS__DEV_REC_STATUS__in_t DEV_REC_STATUS;
        SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_STATUS__REC_IMG_INDEX__in_t REC_IMG_INDEX;
        SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_STATUS__VENDOR_SPECIFIC_STATUS__in_t VENDOR_SPECIFIC_STATUS;
    } SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_STATUS__in_t;

    typedef struct {
        logic next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__TEMP_CRITICAL__in_t;

    typedef struct {
        logic next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__SOFT_ERR__in_t;

    typedef struct {
        logic next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__FATAL_ERR__in_t;

    typedef struct {
        logic [4:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__RESERVED_7_3__in_t;

    typedef struct {
        logic [7:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__VENDOR_HW_STATUS__in_t;

    typedef struct {
        logic [7:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__CTEMP__in_t;

    typedef struct {
        logic [7:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__VENDOR_HW_STATUS_LEN__in_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__TEMP_CRITICAL__in_t TEMP_CRITICAL;
        SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__SOFT_ERR__in_t SOFT_ERR;
        SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__FATAL_ERR__in_t FATAL_ERR;
        SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__RESERVED_7_3__in_t RESERVED_7_3;
        SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__VENDOR_HW_STATUS__in_t VENDOR_HW_STATUS;
        SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__CTEMP__in_t CTEMP;
        SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__VENDOR_HW_STATUS_LEN__in_t VENDOR_HW_STATUS_LEN;
    } SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__in_t;

    typedef struct {
        logic [7:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_CTRL_0__CMS__in_t;

    typedef struct {
        logic [7:0] next;
        logic we;
        logic hwclr;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_CTRL_0__RESET__in_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_CTRL_0__CMS__in_t CMS;
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_CTRL_0__RESET__in_t RESET;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_CTRL_0__in_t;

    typedef struct {
        logic [31:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_CTRL_1__IMAGE_SIZE__in_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_CTRL_1__IMAGE_SIZE__in_t IMAGE_SIZE;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_CTRL_1__in_t;

    typedef struct {
        logic next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_0__EMPTY__in_t;

    typedef struct {
        logic next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_0__FULL__in_t;

    typedef struct {
        logic [2:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_0__REGION_TYPE__in_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_0__EMPTY__in_t EMPTY;
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_0__FULL__in_t FULL;
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_0__REGION_TYPE__in_t REGION_TYPE;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_0__in_t;

    typedef struct {
        logic [31:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_1__WRITE_INDEX__in_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_1__WRITE_INDEX__in_t WRITE_INDEX;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_1__in_t;

    typedef struct {
        logic [31:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_2__READ_INDEX__in_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_2__READ_INDEX__in_t READ_INDEX;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_2__in_t;

    typedef struct {
        logic [31:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_3__FIFO_SIZE__in_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_3__FIFO_SIZE__in_t FIFO_SIZE;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_3__in_t;

    typedef struct {
        logic [31:0] next;
        logic we;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_RESERVED__DATA__in_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_RESERVED__DATA__in_t DATA;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_RESERVED__in_t;

    typedef struct packed {
        logic [31:0] DATA;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_DATA__external__fields__in_t;

    typedef struct {
        logic rd_ack;
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_DATA__external__fields__in_t rd_data;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_DATA__external__in_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_2__in_t PROT_CAP_2;
        SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_3__in_t PROT_CAP_3;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_0__in_t DEVICE_ID_0;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_1__in_t DEVICE_ID_1;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_2__in_t DEVICE_ID_2;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_3__in_t DEVICE_ID_3;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_4__in_t DEVICE_ID_4;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_5__in_t DEVICE_ID_5;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_0__in_t DEVICE_STATUS_0;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_1__in_t DEVICE_STATUS_1;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_RESET__in_t DEVICE_RESET;
        SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_CTRL__in_t RECOVERY_CTRL;
        SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_STATUS__in_t RECOVERY_STATUS;
        SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__in_t HW_STATUS;
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_CTRL_0__in_t INDIRECT_FIFO_CTRL_0;
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_CTRL_1__in_t INDIRECT_FIFO_CTRL_1;
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_0__in_t INDIRECT_FIFO_STATUS_0;
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_1__in_t INDIRECT_FIFO_STATUS_1;
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_2__in_t INDIRECT_FIFO_STATUS_2;
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_3__in_t INDIRECT_FIFO_STATUS_3;
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_RESERVED__in_t INDIRECT_FIFO_RESERVED;
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_DATA__external__in_t INDIRECT_FIFO_DATA;
    } SecureFirmwareRecoveryInterfaceRegisters__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__PENDING_RX_NACK__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__HANDOFF_DELAY_NACK__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__ACR_FSM_OP_SELECT__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__PRIME_ACCEPT_GETACCCR__in_t;

    typedef struct {
        logic next;
        logic we;
        logic hwclr;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__HANDOFF_DEEP_SLEEP__in_t;

    typedef struct {
        logic next;
        logic we;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__TARGET_XACT_ENABLE__in_t;

    typedef struct {
        logic next;
        logic we;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__DAA_SETAASA_ENABLE__in_t;

    typedef struct {
        logic next;
        logic we;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__DAA_SETDASA_ENABLE__in_t;

    typedef struct {
        logic next;
        logic we;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__DAA_ENTDAA_ENABLE__in_t;

    typedef struct {
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__PENDING_RX_NACK__in_t PENDING_RX_NACK;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__HANDOFF_DELAY_NACK__in_t HANDOFF_DELAY_NACK;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__ACR_FSM_OP_SELECT__in_t ACR_FSM_OP_SELECT;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__PRIME_ACCEPT_GETACCCR__in_t PRIME_ACCEPT_GETACCCR;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__HANDOFF_DEEP_SLEEP__in_t HANDOFF_DEEP_SLEEP;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__TARGET_XACT_ENABLE__in_t TARGET_XACT_ENABLE;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__DAA_SETAASA_ENABLE__in_t DAA_SETAASA_ENABLE;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__DAA_SETDASA_ENABLE__in_t DAA_SETDASA_ENABLE;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__DAA_ENTDAA_ENABLE__in_t DAA_ENTDAA_ENABLE;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__in_t;

    typedef struct {
        logic [6:0] next;
        logic we;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_ADDR__STATIC_ADDR__in_t;

    typedef struct {
        logic next;
        logic we;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_ADDR__STATIC_ADDR_VALID__in_t;

    typedef struct {
        logic [6:0] next;
        logic we;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_ADDR__DYNAMIC_ADDR__in_t;

    typedef struct {
        logic next;
        logic we;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_ADDR__DYNAMIC_ADDR_VALID__in_t;

    typedef struct {
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_ADDR__STATIC_ADDR__in_t STATIC_ADDR;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_ADDR__STATIC_ADDR_VALID__in_t STATIC_ADDR_VALID;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_ADDR__DYNAMIC_ADDR__in_t DYNAMIC_ADDR;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_ADDR__DYNAMIC_ADDR_VALID__in_t DYNAMIC_ADDR_VALID;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_ADDR__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_STATUS__AC_CURRENT_OWN__in_t;

    typedef struct {
        logic [2:0] next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_STATUS__SIMPLE_CRR_STATUS__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_STATUS__HJ_REQ_STATUS__in_t;

    typedef struct {
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_STATUS__AC_CURRENT_OWN__in_t AC_CURRENT_OWN;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_STATUS__SIMPLE_CRR_STATUS__in_t SIMPLE_CRR_STATUS;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_STATUS__HJ_REQ_STATUS__in_t HJ_REQ_STATUS;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_STATUS__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__ACR_HANDOFF_OK_REMAIN_STAT__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__ACR_HANDOFF_OK_PRIMED_STAT__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__ACR_HANDOFF_ERR_FAIL_STAT__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__ACR_HANDOFF_ERR_M3_STAT__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__CRR_RESPONSE_STAT__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__STBY_CR_DYN_ADDR_STAT__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__STBY_CR_ACCEPT_NACKED_STAT__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__STBY_CR_ACCEPT_OK_STAT__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__STBY_CR_ACCEPT_ERR_STAT__in_t;

    typedef struct {
        logic next;
        logic we;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__STBY_CR_OP_RSTACT_STAT__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__CCC_PARAM_MODIFIED_STAT__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__CCC_UNHANDLED_NACK_STAT__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__CCC_FATAL_RSTDAA_ERR_STAT__in_t;

    typedef struct {
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__ACR_HANDOFF_OK_REMAIN_STAT__in_t ACR_HANDOFF_OK_REMAIN_STAT;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__ACR_HANDOFF_OK_PRIMED_STAT__in_t ACR_HANDOFF_OK_PRIMED_STAT;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__ACR_HANDOFF_ERR_FAIL_STAT__in_t ACR_HANDOFF_ERR_FAIL_STAT;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__ACR_HANDOFF_ERR_M3_STAT__in_t ACR_HANDOFF_ERR_M3_STAT;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__CRR_RESPONSE_STAT__in_t CRR_RESPONSE_STAT;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__STBY_CR_DYN_ADDR_STAT__in_t STBY_CR_DYN_ADDR_STAT;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__STBY_CR_ACCEPT_NACKED_STAT__in_t STBY_CR_ACCEPT_NACKED_STAT;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__STBY_CR_ACCEPT_OK_STAT__in_t STBY_CR_ACCEPT_OK_STAT;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__STBY_CR_ACCEPT_ERR_STAT__in_t STBY_CR_ACCEPT_ERR_STAT;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__STBY_CR_OP_RSTACT_STAT__in_t STBY_CR_OP_RSTACT_STAT;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__CCC_PARAM_MODIFIED_STAT__in_t CCC_PARAM_MODIFIED_STAT;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__CCC_UNHANDLED_NACK_STAT__in_t CCC_UNHANDLED_NACK_STAT;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__CCC_FATAL_RSTDAA_ERR_STAT__in_t CCC_FATAL_RSTDAA_ERR_STAT;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__ACR_HANDOFF_OK_REMAIN_SIGNAL_EN__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__ACR_HANDOFF_OK_PRIMED_SIGNAL_EN__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__ACR_HANDOFF_ERR_FAIL_SIGNAL_EN__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__ACR_HANDOFF_ERR_M3_SIGNAL_EN__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__CRR_RESPONSE_SIGNAL_EN__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__STBY_CR_DYN_ADDR_SIGNAL_EN__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__STBY_CR_ACCEPT_NACKED_SIGNAL_EN__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__STBY_CR_ACCEPT_OK_SIGNAL_EN__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__STBY_CR_ACCEPT_ERR_SIGNAL_EN__in_t;

    typedef struct {
        logic next;
        logic we;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__STBY_CR_OP_RSTACT_SIGNAL_EN__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__CCC_PARAM_MODIFIED_SIGNAL_EN__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__CCC_UNHANDLED_NACK_SIGNAL_EN__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__CCC_FATAL_RSTDAA_ERR_SIGNAL_EN__in_t;

    typedef struct {
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__ACR_HANDOFF_OK_REMAIN_SIGNAL_EN__in_t ACR_HANDOFF_OK_REMAIN_SIGNAL_EN;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__ACR_HANDOFF_OK_PRIMED_SIGNAL_EN__in_t ACR_HANDOFF_OK_PRIMED_SIGNAL_EN;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__ACR_HANDOFF_ERR_FAIL_SIGNAL_EN__in_t ACR_HANDOFF_ERR_FAIL_SIGNAL_EN;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__ACR_HANDOFF_ERR_M3_SIGNAL_EN__in_t ACR_HANDOFF_ERR_M3_SIGNAL_EN;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__CRR_RESPONSE_SIGNAL_EN__in_t CRR_RESPONSE_SIGNAL_EN;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__STBY_CR_DYN_ADDR_SIGNAL_EN__in_t STBY_CR_DYN_ADDR_SIGNAL_EN;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__STBY_CR_ACCEPT_NACKED_SIGNAL_EN__in_t STBY_CR_ACCEPT_NACKED_SIGNAL_EN;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__STBY_CR_ACCEPT_OK_SIGNAL_EN__in_t STBY_CR_ACCEPT_OK_SIGNAL_EN;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__STBY_CR_ACCEPT_ERR_SIGNAL_EN__in_t STBY_CR_ACCEPT_ERR_SIGNAL_EN;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__STBY_CR_OP_RSTACT_SIGNAL_EN__in_t STBY_CR_OP_RSTACT_SIGNAL_EN;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__CCC_PARAM_MODIFIED_SIGNAL_EN__in_t CCC_PARAM_MODIFIED_SIGNAL_EN;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__CCC_UNHANDLED_NACK_SIGNAL_EN__in_t CCC_UNHANDLED_NACK_SIGNAL_EN;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__CCC_FATAL_RSTDAA_ERR_SIGNAL_EN__in_t CCC_FATAL_RSTDAA_ERR_SIGNAL_EN;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__CRR_RESPONSE_FORCE__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__STBY_CR_DYN_ADDR_FORCE__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__STBY_CR_ACCEPT_NACKED_FORCE__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__STBY_CR_ACCEPT_OK_FORCE__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__STBY_CR_ACCEPT_ERR_FORCE__in_t;

    typedef struct {
        logic next;
        logic we;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__STBY_CR_OP_RSTACT_FORCE__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__CCC_PARAM_MODIFIED_FORCE__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__CCC_UNHANDLED_NACK_FORCE__in_t;

    typedef struct {
        logic next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__CCC_FATAL_RSTDAA_ERR_FORCE__in_t;

    typedef struct {
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__CRR_RESPONSE_FORCE__in_t CRR_RESPONSE_FORCE;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__STBY_CR_DYN_ADDR_FORCE__in_t STBY_CR_DYN_ADDR_FORCE;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__STBY_CR_ACCEPT_NACKED_FORCE__in_t STBY_CR_ACCEPT_NACKED_FORCE;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__STBY_CR_ACCEPT_OK_FORCE__in_t STBY_CR_ACCEPT_OK_FORCE;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__STBY_CR_ACCEPT_ERR_FORCE__in_t STBY_CR_ACCEPT_ERR_FORCE;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__STBY_CR_OP_RSTACT_FORCE__in_t STBY_CR_OP_RSTACT_FORCE;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__CCC_PARAM_MODIFIED_FORCE__in_t CCC_PARAM_MODIFIED_FORCE;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__CCC_UNHANDLED_NACK_FORCE__in_t CCC_UNHANDLED_NACK_FORCE;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__CCC_FATAL_RSTDAA_ERR_FORCE__in_t CCC_FATAL_RSTDAA_ERR_FORCE;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__in_t;

    typedef struct {
        logic [2:0] next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_GETCAPS__F2_CRCAP1_BUS_CONFIG__in_t;

    typedef struct {
        logic [3:0] next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_GETCAPS__F2_CRCAP2_DEV_INTERACT__in_t;

    typedef struct {
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_GETCAPS__F2_CRCAP1_BUS_CONFIG__in_t F2_CRCAP1_BUS_CONFIG;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_GETCAPS__F2_CRCAP2_DEV_INTERACT__in_t F2_CRCAP2_DEV_INTERACT;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_GETCAPS__in_t;

    typedef struct {
        logic [7:0] next;
        logic we;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_RSTACT_PARAMS__RST_ACTION__in_t;

    typedef struct {
        logic [7:0] next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_RSTACT_PARAMS__RESET_TIME_PERIPHERAL__in_t;

    typedef struct {
        logic [7:0] next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_RSTACT_PARAMS__RESET_TIME_TARGET__in_t;

    typedef struct {
        logic next;
        logic we;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_RSTACT_PARAMS__RESET_DYNAMIC_ADDR__in_t;

    typedef struct {
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_RSTACT_PARAMS__RST_ACTION__in_t RST_ACTION;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_RSTACT_PARAMS__RESET_TIME_PERIPHERAL__in_t RESET_TIME_PERIPHERAL;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_RSTACT_PARAMS__RESET_TIME_TARGET__in_t RESET_TIME_TARGET;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_RSTACT_PARAMS__RESET_DYNAMIC_ADDR__in_t RESET_DYNAMIC_ADDR;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_RSTACT_PARAMS__in_t;

    typedef struct {
        logic [6:0] next;
        logic we;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRT_DEVICE_ADDR__VIRT_STATIC_ADDR__in_t;

    typedef struct {
        logic next;
        logic we;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRT_DEVICE_ADDR__VIRT_STATIC_ADDR_VALID__in_t;

    typedef struct {
        logic [6:0] next;
        logic we;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRT_DEVICE_ADDR__VIRT_DYNAMIC_ADDR__in_t;

    typedef struct {
        logic next;
        logic we;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRT_DEVICE_ADDR__VIRT_DYNAMIC_ADDR_VALID__in_t;

    typedef struct {
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRT_DEVICE_ADDR__VIRT_STATIC_ADDR__in_t VIRT_STATIC_ADDR;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRT_DEVICE_ADDR__VIRT_STATIC_ADDR_VALID__in_t VIRT_STATIC_ADDR_VALID;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRT_DEVICE_ADDR__VIRT_DYNAMIC_ADDR__in_t VIRT_DYNAMIC_ADDR;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRT_DEVICE_ADDR__VIRT_DYNAMIC_ADDR_VALID__in_t VIRT_DYNAMIC_ADDR_VALID;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRT_DEVICE_ADDR__in_t;

    typedef struct {
        logic [31:0] next;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5____rsvd_3____rsvd__in_t;

    typedef struct {
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5____rsvd_3____rsvd__in_t __rsvd;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5____rsvd_3__in_t;

    typedef struct {
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__in_t STBY_CR_CONTROL;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_ADDR__in_t STBY_CR_DEVICE_ADDR;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_STATUS__in_t STBY_CR_STATUS;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__in_t STBY_CR_INTR_STATUS;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__in_t STBY_CR_INTR_SIGNAL_ENABLE;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__in_t STBY_CR_INTR_FORCE;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_GETCAPS__in_t STBY_CR_CCC_CONFIG_GETCAPS;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_RSTACT_PARAMS__in_t STBY_CR_CCC_CONFIG_RSTACT_PARAMS;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRT_DEVICE_ADDR__in_t STBY_CR_VIRT_DEVICE_ADDR;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5____rsvd_3__in_t __rsvd_3;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__in_t;

    typedef struct {
        logic next;
        logic we;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__CONTROL__HJ_EN__in_t;

    typedef struct {
        logic next;
        logic we;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__CONTROL__CRR_EN__in_t;

    typedef struct {
        logic next;
        logic we;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__CONTROL__IBI_EN__in_t;

    typedef struct {
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__CONTROL__HJ_EN__in_t HJ_EN;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__CONTROL__CRR_EN__in_t CRR_EN;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__CONTROL__IBI_EN__in_t IBI_EN;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__CONTROL__in_t;

    typedef struct {
        logic next;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__STATUS__PROTOCOL_ERROR__in_t;

    typedef struct {
        logic [1:0] next;
        logic we;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__STATUS__LAST_IBI_STATUS__in_t;

    typedef struct {
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__STATUS__PROTOCOL_ERROR__in_t PROTOCOL_ERROR;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__STATUS__LAST_IBI_STATUS__in_t LAST_IBI_STATUS;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__STATUS__in_t;

    typedef struct {
        logic hwclr;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RESET_CONTROL__SOFT_RST__in_t;

    typedef struct {
        logic hwclr;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RESET_CONTROL__TX_DESC_RST__in_t;

    typedef struct {
        logic hwclr;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RESET_CONTROL__RX_DESC_RST__in_t;

    typedef struct {
        logic hwclr;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RESET_CONTROL__TX_DATA_RST__in_t;

    typedef struct {
        logic hwclr;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RESET_CONTROL__RX_DATA_RST__in_t;

    typedef struct {
        logic hwclr;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RESET_CONTROL__IBI_QUEUE_RST__in_t;

    typedef struct {
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RESET_CONTROL__SOFT_RST__in_t SOFT_RST;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RESET_CONTROL__TX_DESC_RST__in_t TX_DESC_RST;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RESET_CONTROL__RX_DESC_RST__in_t RX_DESC_RST;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RESET_CONTROL__TX_DATA_RST__in_t TX_DATA_RST;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RESET_CONTROL__RX_DATA_RST__in_t RX_DATA_RST;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RESET_CONTROL__IBI_QUEUE_RST__in_t IBI_QUEUE_RST;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RESET_CONTROL__in_t;

    typedef struct {
        logic next;
        logic we;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__RX_DESC_STAT__in_t;

    typedef struct {
        logic next;
        logic we;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__TX_DESC_STAT__in_t;

    typedef struct {
        logic next;
        logic we;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__RX_DESC_TIMEOUT__in_t;

    typedef struct {
        logic next;
        logic we;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__TX_DESC_TIMEOUT__in_t;

    typedef struct {
        logic next;
        logic we;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__TX_DATA_THLD_STAT__in_t;

    typedef struct {
        logic next;
        logic we;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__RX_DATA_THLD_STAT__in_t;

    typedef struct {
        logic next;
        logic we;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__TX_DESC_THLD_STAT__in_t;

    typedef struct {
        logic next;
        logic we;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__RX_DESC_THLD_STAT__in_t;

    typedef struct {
        logic next;
        logic we;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__IBI_THLD_STAT__in_t;

    typedef struct {
        logic next;
        logic we;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__IBI_DONE__in_t;

    typedef struct {
        logic [3:0] next;
        logic we;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__PENDING_INTERRUPT__in_t;

    typedef struct {
        logic next;
        logic we;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__TRANSFER_ABORT_STAT__in_t;

    typedef struct {
        logic next;
        logic we;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__TX_DESC_COMPLETE__in_t;

    typedef struct {
        logic next;
        logic we;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__TRANSFER_ERR_STAT__in_t;

    typedef struct {
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__RX_DESC_STAT__in_t RX_DESC_STAT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__TX_DESC_STAT__in_t TX_DESC_STAT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__RX_DESC_TIMEOUT__in_t RX_DESC_TIMEOUT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__TX_DESC_TIMEOUT__in_t TX_DESC_TIMEOUT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__TX_DATA_THLD_STAT__in_t TX_DATA_THLD_STAT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__RX_DATA_THLD_STAT__in_t RX_DATA_THLD_STAT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__TX_DESC_THLD_STAT__in_t TX_DESC_THLD_STAT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__RX_DESC_THLD_STAT__in_t RX_DESC_THLD_STAT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__IBI_THLD_STAT__in_t IBI_THLD_STAT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__IBI_DONE__in_t IBI_DONE;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__PENDING_INTERRUPT__in_t PENDING_INTERRUPT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__TRANSFER_ABORT_STAT__in_t TRANSFER_ABORT_STAT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__TX_DESC_COMPLETE__in_t TX_DESC_COMPLETE;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__TRANSFER_ERR_STAT__in_t TRANSFER_ERR_STAT;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__in_t;

    typedef struct packed {
        logic [31:0] RX_DESC;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RX_DESC_QUEUE_PORT__external__fields__in_t;

    typedef struct {
        logic rd_ack;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RX_DESC_QUEUE_PORT__external__fields__in_t rd_data;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RX_DESC_QUEUE_PORT__external__in_t;

    typedef struct packed {
        logic [31:0] RX_DATA;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RX_DATA_PORT__external__fields__in_t;

    typedef struct {
        logic rd_ack;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RX_DATA_PORT__external__fields__in_t rd_data;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RX_DATA_PORT__external__in_t;

    typedef struct {
        logic wr_ack;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__TX_DESC_QUEUE_PORT__external__in_t;

    typedef struct {
        logic wr_ack;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__TX_DATA_PORT__external__in_t;

    typedef struct {
        logic wr_ack;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__IBI_PORT__external__in_t;

    typedef struct {
        logic [7:0] next;
        logic we;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__QUEUE_THLD_CTRL__TX_DESC_THLD__in_t;

    typedef struct {
        logic [7:0] next;
        logic we;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__QUEUE_THLD_CTRL__RX_DESC_THLD__in_t;

    typedef struct {
        logic [7:0] next;
        logic we;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__QUEUE_THLD_CTRL__IBI_THLD__in_t;

    typedef struct {
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__QUEUE_THLD_CTRL__TX_DESC_THLD__in_t TX_DESC_THLD;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__QUEUE_THLD_CTRL__RX_DESC_THLD__in_t RX_DESC_THLD;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__QUEUE_THLD_CTRL__IBI_THLD__in_t IBI_THLD;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__QUEUE_THLD_CTRL__in_t;

    typedef struct {
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__CONTROL__in_t CONTROL;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__STATUS__in_t STATUS;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RESET_CONTROL__in_t RESET_CONTROL;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__in_t INTERRUPT_STATUS;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RX_DESC_QUEUE_PORT__external__in_t RX_DESC_QUEUE_PORT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RX_DATA_PORT__external__in_t RX_DATA_PORT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__TX_DESC_QUEUE_PORT__external__in_t TX_DESC_QUEUE_PORT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__TX_DATA_PORT__external__in_t TX_DATA_PORT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__IBI_PORT__external__in_t IBI_PORT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__QUEUE_THLD_CTRL__in_t QUEUE_THLD_CTRL;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__in_t;

    typedef struct {
        logic next;
        logic we;
    } SoCManagementInterfaceRegisters__REC_INTF_CFG__REC_PAYLOAD_DONE__in_t;

    typedef struct {
        SoCManagementInterfaceRegisters__REC_INTF_CFG__REC_PAYLOAD_DONE__in_t REC_PAYLOAD_DONE;
    } SoCManagementInterfaceRegisters__REC_INTF_CFG__in_t;

    typedef struct {
        logic [7:0] next;
        logic we;
    } SoCManagementInterfaceRegisters__REC_INTF_REG_W1C_ACCESS__DEVICE_RESET_CTRL__in_t;

    typedef struct {
        logic [7:0] next;
        logic we;
    } SoCManagementInterfaceRegisters__REC_INTF_REG_W1C_ACCESS__RECOVERY_CTRL_ACTIVATE_REC_IMG__in_t;

    typedef struct {
        logic [7:0] next;
        logic we;
    } SoCManagementInterfaceRegisters__REC_INTF_REG_W1C_ACCESS__INDIRECT_FIFO_CTRL_RESET__in_t;

    typedef struct {
        SoCManagementInterfaceRegisters__REC_INTF_REG_W1C_ACCESS__DEVICE_RESET_CTRL__in_t DEVICE_RESET_CTRL;
        SoCManagementInterfaceRegisters__REC_INTF_REG_W1C_ACCESS__RECOVERY_CTRL_ACTIVATE_REC_IMG__in_t RECOVERY_CTRL_ACTIVATE_REC_IMG;
        SoCManagementInterfaceRegisters__REC_INTF_REG_W1C_ACCESS__INDIRECT_FIFO_CTRL_RESET__in_t INDIRECT_FIFO_CTRL_RESET;
    } SoCManagementInterfaceRegisters__REC_INTF_REG_W1C_ACCESS__in_t;

    typedef struct {
        SoCManagementInterfaceRegisters__REC_INTF_CFG__in_t REC_INTF_CFG;
        SoCManagementInterfaceRegisters__REC_INTF_REG_W1C_ACCESS__in_t REC_INTF_REG_W1C_ACCESS;
    } SoCManagementInterfaceRegisters__in_t;

    typedef struct {
        logic [1:0] next;
        logic we;
    } ControllerConfigRegisters__CONTROLLER_CONFIG__OPERATION_MODE__in_t;

    typedef struct {
        ControllerConfigRegisters__CONTROLLER_CONFIG__OPERATION_MODE__in_t OPERATION_MODE;
    } ControllerConfigRegisters__CONTROLLER_CONFIG__in_t;

    typedef struct {
        ControllerConfigRegisters__CONTROLLER_CONFIG__in_t CONTROLLER_CONFIG;
    } ControllerConfigRegisters__in_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__in_t SecFwRecoveryIf;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__in_t StdbyCtrlMode;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__in_t TTI;
        SoCManagementInterfaceRegisters__in_t SoCMgmtIf;
        ControllerConfigRegisters__in_t CtrlCfg;
    } ECRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__in_t;

    typedef struct {
        logic rst_ni;
        ECRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__in_t I3C_EC;
    } I3CCSR__in_t;

    typedef struct {
        logic [7:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__EXTCAP_HEADER__CAP_ID__out_t;

    typedef struct {
        logic [15:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__EXTCAP_HEADER__CAP_LENGTH__out_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__EXTCAP_HEADER__CAP_ID__out_t CAP_ID;
        SecureFirmwareRecoveryInterfaceRegisters__EXTCAP_HEADER__CAP_LENGTH__out_t CAP_LENGTH;
    } SecureFirmwareRecoveryInterfaceRegisters__EXTCAP_HEADER__out_t;

    typedef struct {
        logic [31:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_0__REC_MAGIC_STRING_0__out_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_0__REC_MAGIC_STRING_0__out_t REC_MAGIC_STRING_0;
    } SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_0__out_t;

    typedef struct {
        logic [31:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_1__REC_MAGIC_STRING_1__out_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_1__REC_MAGIC_STRING_1__out_t REC_MAGIC_STRING_1;
    } SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_1__out_t;

    typedef struct {
        logic [15:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_2__REC_PROT_VERSION__out_t;

    typedef struct {
        logic [15:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_2__AGENT_CAPS__out_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_2__REC_PROT_VERSION__out_t REC_PROT_VERSION;
        SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_2__AGENT_CAPS__out_t AGENT_CAPS;
    } SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_2__out_t;

    typedef struct {
        logic [7:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_3__NUM_OF_CMS_REGIONS__out_t;

    typedef struct {
        logic [7:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_3__MAX_RESP_TIME__out_t;

    typedef struct {
        logic [7:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_3__HEARTBEAT_PERIOD__out_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_3__NUM_OF_CMS_REGIONS__out_t NUM_OF_CMS_REGIONS;
        SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_3__MAX_RESP_TIME__out_t MAX_RESP_TIME;
        SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_3__HEARTBEAT_PERIOD__out_t HEARTBEAT_PERIOD;
    } SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_3__out_t;

    typedef struct {
        logic [7:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_0__DESC_TYPE__out_t;

    typedef struct {
        logic [7:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_0__VENDOR_SPECIFIC_STR_LENGTH__out_t;

    typedef struct {
        logic [15:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_0__DATA__out_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_0__DESC_TYPE__out_t DESC_TYPE;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_0__VENDOR_SPECIFIC_STR_LENGTH__out_t VENDOR_SPECIFIC_STR_LENGTH;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_0__DATA__out_t DATA;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_0__out_t;

    typedef struct {
        logic [31:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_1__DATA__out_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_1__DATA__out_t DATA;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_1__out_t;

    typedef struct {
        logic [31:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_2__DATA__out_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_2__DATA__out_t DATA;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_2__out_t;

    typedef struct {
        logic [31:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_3__DATA__out_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_3__DATA__out_t DATA;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_3__out_t;

    typedef struct {
        logic [31:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_4__DATA__out_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_4__DATA__out_t DATA;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_4__out_t;

    typedef struct {
        logic [31:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_5__DATA__out_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_5__DATA__out_t DATA;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_5__out_t;

    typedef struct {
        logic [31:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_RESERVED__DATA__out_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_RESERVED__DATA__out_t DATA;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_RESERVED__out_t;

    typedef struct {
        logic [7:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_0__DEV_STATUS__out_t;

    typedef struct {
        logic [7:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_0__PROT_ERROR__out_t;

    typedef struct {
        logic [15:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_0__REC_REASON_CODE__out_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_0__DEV_STATUS__out_t DEV_STATUS;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_0__PROT_ERROR__out_t PROT_ERROR;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_0__REC_REASON_CODE__out_t REC_REASON_CODE;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_0__out_t;

    typedef struct {
        logic [15:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_1__HEARTBEAT__out_t;

    typedef struct {
        logic [8:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_1__VENDOR_STATUS_LENGTH__out_t;

    typedef struct {
        logic [6:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_1__VENDOR_STATUS__out_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_1__HEARTBEAT__out_t HEARTBEAT;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_1__VENDOR_STATUS_LENGTH__out_t VENDOR_STATUS_LENGTH;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_1__VENDOR_STATUS__out_t VENDOR_STATUS;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_1__out_t;

    typedef struct {
        logic [7:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_RESET__RESET_CTRL__out_t;

    typedef struct {
        logic [7:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_RESET__FORCED_RECOVERY__out_t;

    typedef struct {
        logic [7:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_RESET__IF_CTRL__out_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_RESET__RESET_CTRL__out_t RESET_CTRL;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_RESET__FORCED_RECOVERY__out_t FORCED_RECOVERY;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_RESET__IF_CTRL__out_t IF_CTRL;
    } SecureFirmwareRecoveryInterfaceRegisters__DEVICE_RESET__out_t;

    typedef struct {
        logic [7:0] value;
        logic swmod;
    } SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_CTRL__CMS__out_t;

    typedef struct {
        logic [7:0] value;
        logic swmod;
    } SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_CTRL__REC_IMG_SEL__out_t;

    typedef struct {
        logic [7:0] value;
        logic swmod;
    } SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_CTRL__ACTIVATE_REC_IMG__out_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_CTRL__CMS__out_t CMS;
        SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_CTRL__REC_IMG_SEL__out_t REC_IMG_SEL;
        SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_CTRL__ACTIVATE_REC_IMG__out_t ACTIVATE_REC_IMG;
    } SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_CTRL__out_t;

    typedef struct {
        logic [3:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_STATUS__DEV_REC_STATUS__out_t;

    typedef struct {
        logic [3:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_STATUS__REC_IMG_INDEX__out_t;

    typedef struct {
        logic [7:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_STATUS__VENDOR_SPECIFIC_STATUS__out_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_STATUS__DEV_REC_STATUS__out_t DEV_REC_STATUS;
        SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_STATUS__REC_IMG_INDEX__out_t REC_IMG_INDEX;
        SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_STATUS__VENDOR_SPECIFIC_STATUS__out_t VENDOR_SPECIFIC_STATUS;
    } SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_STATUS__out_t;

    typedef struct {
        logic value;
    } SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__TEMP_CRITICAL__out_t;

    typedef struct {
        logic value;
    } SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__SOFT_ERR__out_t;

    typedef struct {
        logic value;
    } SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__FATAL_ERR__out_t;

    typedef struct {
        logic [4:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__RESERVED_7_3__out_t;

    typedef struct {
        logic [7:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__VENDOR_HW_STATUS__out_t;

    typedef struct {
        logic [7:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__CTEMP__out_t;

    typedef struct {
        logic [7:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__VENDOR_HW_STATUS_LEN__out_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__TEMP_CRITICAL__out_t TEMP_CRITICAL;
        SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__SOFT_ERR__out_t SOFT_ERR;
        SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__FATAL_ERR__out_t FATAL_ERR;
        SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__RESERVED_7_3__out_t RESERVED_7_3;
        SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__VENDOR_HW_STATUS__out_t VENDOR_HW_STATUS;
        SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__CTEMP__out_t CTEMP;
        SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__VENDOR_HW_STATUS_LEN__out_t VENDOR_HW_STATUS_LEN;
    } SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__out_t;

    typedef struct {
        logic [7:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_CTRL_0__CMS__out_t;

    typedef struct {
        logic [7:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_CTRL_0__RESET__out_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_CTRL_0__CMS__out_t CMS;
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_CTRL_0__RESET__out_t RESET;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_CTRL_0__out_t;

    typedef struct {
        logic [31:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_CTRL_1__IMAGE_SIZE__out_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_CTRL_1__IMAGE_SIZE__out_t IMAGE_SIZE;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_CTRL_1__out_t;

    typedef struct {
        logic value;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_0__EMPTY__out_t;

    typedef struct {
        logic value;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_0__FULL__out_t;

    typedef struct {
        logic [2:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_0__REGION_TYPE__out_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_0__EMPTY__out_t EMPTY;
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_0__FULL__out_t FULL;
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_0__REGION_TYPE__out_t REGION_TYPE;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_0__out_t;

    typedef struct {
        logic [31:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_1__WRITE_INDEX__out_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_1__WRITE_INDEX__out_t WRITE_INDEX;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_1__out_t;

    typedef struct {
        logic [31:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_2__READ_INDEX__out_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_2__READ_INDEX__out_t READ_INDEX;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_2__out_t;

    typedef struct {
        logic [31:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_3__FIFO_SIZE__out_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_3__FIFO_SIZE__out_t FIFO_SIZE;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_3__out_t;

    typedef struct {
        logic [31:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_4__MAX_TRANSFER_SIZE__out_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_4__MAX_TRANSFER_SIZE__out_t MAX_TRANSFER_SIZE;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_4__out_t;

    typedef struct {
        logic [31:0] value;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_RESERVED__DATA__out_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_RESERVED__DATA__out_t DATA;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_RESERVED__out_t;

    typedef struct {
        logic req;
        logic req_is_wr;
    } SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_DATA__external__out_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__EXTCAP_HEADER__out_t EXTCAP_HEADER;
        SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_0__out_t PROT_CAP_0;
        SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_1__out_t PROT_CAP_1;
        SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_2__out_t PROT_CAP_2;
        SecureFirmwareRecoveryInterfaceRegisters__PROT_CAP_3__out_t PROT_CAP_3;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_0__out_t DEVICE_ID_0;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_1__out_t DEVICE_ID_1;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_2__out_t DEVICE_ID_2;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_3__out_t DEVICE_ID_3;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_4__out_t DEVICE_ID_4;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_5__out_t DEVICE_ID_5;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_ID_RESERVED__out_t DEVICE_ID_RESERVED;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_0__out_t DEVICE_STATUS_0;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_STATUS_1__out_t DEVICE_STATUS_1;
        SecureFirmwareRecoveryInterfaceRegisters__DEVICE_RESET__out_t DEVICE_RESET;
        SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_CTRL__out_t RECOVERY_CTRL;
        SecureFirmwareRecoveryInterfaceRegisters__RECOVERY_STATUS__out_t RECOVERY_STATUS;
        SecureFirmwareRecoveryInterfaceRegisters__HW_STATUS__out_t HW_STATUS;
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_CTRL_0__out_t INDIRECT_FIFO_CTRL_0;
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_CTRL_1__out_t INDIRECT_FIFO_CTRL_1;
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_0__out_t INDIRECT_FIFO_STATUS_0;
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_1__out_t INDIRECT_FIFO_STATUS_1;
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_2__out_t INDIRECT_FIFO_STATUS_2;
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_3__out_t INDIRECT_FIFO_STATUS_3;
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_STATUS_4__out_t INDIRECT_FIFO_STATUS_4;
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_RESERVED__out_t INDIRECT_FIFO_RESERVED;
        SecureFirmwareRecoveryInterfaceRegisters__INDIRECT_FIFO_DATA__external__out_t INDIRECT_FIFO_DATA;
    } SecureFirmwareRecoveryInterfaceRegisters__out_t;

    typedef struct {
        logic [7:0] value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__EXTCAP_HEADER__CAP_ID__out_t;

    typedef struct {
        logic [15:0] value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__EXTCAP_HEADER__CAP_LENGTH__out_t;

    typedef struct {
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__EXTCAP_HEADER__CAP_ID__out_t CAP_ID;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__EXTCAP_HEADER__CAP_LENGTH__out_t CAP_LENGTH;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__EXTCAP_HEADER__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__PENDING_RX_NACK__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__HANDOFF_DELAY_NACK__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__ACR_FSM_OP_SELECT__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__PRIME_ACCEPT_GETACCCR__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__HANDOFF_DEEP_SLEEP__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__CR_REQUEST_SEND__out_t;

    typedef struct {
        logic [2:0] value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__BAST_CCC_IBI_RING__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__TARGET_XACT_ENABLE__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__DAA_SETAASA_ENABLE__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__DAA_SETDASA_ENABLE__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__DAA_ENTDAA_ENABLE__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__RSTACT_DEFBYTE_02__out_t;

    typedef struct {
        logic [1:0] value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__STBY_CR_ENABLE_INIT__out_t;

    typedef struct {
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__PENDING_RX_NACK__out_t PENDING_RX_NACK;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__HANDOFF_DELAY_NACK__out_t HANDOFF_DELAY_NACK;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__ACR_FSM_OP_SELECT__out_t ACR_FSM_OP_SELECT;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__PRIME_ACCEPT_GETACCCR__out_t PRIME_ACCEPT_GETACCCR;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__HANDOFF_DEEP_SLEEP__out_t HANDOFF_DEEP_SLEEP;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__CR_REQUEST_SEND__out_t CR_REQUEST_SEND;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__BAST_CCC_IBI_RING__out_t BAST_CCC_IBI_RING;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__TARGET_XACT_ENABLE__out_t TARGET_XACT_ENABLE;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__DAA_SETAASA_ENABLE__out_t DAA_SETAASA_ENABLE;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__DAA_SETDASA_ENABLE__out_t DAA_SETDASA_ENABLE;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__DAA_ENTDAA_ENABLE__out_t DAA_ENTDAA_ENABLE;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__RSTACT_DEFBYTE_02__out_t RSTACT_DEFBYTE_02;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__STBY_CR_ENABLE_INIT__out_t STBY_CR_ENABLE_INIT;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__out_t;

    typedef struct {
        logic [6:0] value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_ADDR__STATIC_ADDR__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_ADDR__STATIC_ADDR_VALID__out_t;

    typedef struct {
        logic [6:0] value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_ADDR__DYNAMIC_ADDR__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_ADDR__DYNAMIC_ADDR_VALID__out_t;

    typedef struct {
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_ADDR__STATIC_ADDR__out_t STATIC_ADDR;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_ADDR__STATIC_ADDR_VALID__out_t STATIC_ADDR_VALID;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_ADDR__DYNAMIC_ADDR__out_t DYNAMIC_ADDR;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_ADDR__DYNAMIC_ADDR_VALID__out_t DYNAMIC_ADDR_VALID;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_ADDR__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CAPABILITIES__SIMPLE_CRR_SUPPORT__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CAPABILITIES__TARGET_XACT_SUPPORT__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CAPABILITIES__DAA_SETAASA_SUPPORT__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CAPABILITIES__DAA_SETDASA_SUPPORT__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CAPABILITIES__DAA_ENTDAA_SUPPORT__out_t;

    typedef struct {
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CAPABILITIES__SIMPLE_CRR_SUPPORT__out_t SIMPLE_CRR_SUPPORT;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CAPABILITIES__TARGET_XACT_SUPPORT__out_t TARGET_XACT_SUPPORT;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CAPABILITIES__DAA_SETAASA_SUPPORT__out_t DAA_SETAASA_SUPPORT;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CAPABILITIES__DAA_SETDASA_SUPPORT__out_t DAA_SETDASA_SUPPORT;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CAPABILITIES__DAA_ENTDAA_SUPPORT__out_t DAA_ENTDAA_SUPPORT;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CAPABILITIES__out_t;

    typedef struct {
        logic [14:0] value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRTUAL_DEVICE_CHAR__PID_HI__out_t;

    typedef struct {
        logic [7:0] value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRTUAL_DEVICE_CHAR__DCR__out_t;

    typedef struct {
        logic [4:0] value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRTUAL_DEVICE_CHAR__BCR_VAR__out_t;

    typedef struct {
        logic [2:0] value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRTUAL_DEVICE_CHAR__BCR_FIXED__out_t;

    typedef struct {
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRTUAL_DEVICE_CHAR__PID_HI__out_t PID_HI;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRTUAL_DEVICE_CHAR__DCR__out_t DCR;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRTUAL_DEVICE_CHAR__BCR_VAR__out_t BCR_VAR;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRTUAL_DEVICE_CHAR__BCR_FIXED__out_t BCR_FIXED;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRTUAL_DEVICE_CHAR__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_STATUS__AC_CURRENT_OWN__out_t;

    typedef struct {
        logic [2:0] value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_STATUS__SIMPLE_CRR_STATUS__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_STATUS__HJ_REQ_STATUS__out_t;

    typedef struct {
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_STATUS__AC_CURRENT_OWN__out_t AC_CURRENT_OWN;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_STATUS__SIMPLE_CRR_STATUS__out_t SIMPLE_CRR_STATUS;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_STATUS__HJ_REQ_STATUS__out_t HJ_REQ_STATUS;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_STATUS__out_t;

    typedef struct {
        logic [14:0] value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_CHAR__PID_HI__out_t;

    typedef struct {
        logic [7:0] value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_CHAR__DCR__out_t;

    typedef struct {
        logic [4:0] value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_CHAR__BCR_VAR__out_t;

    typedef struct {
        logic [2:0] value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_CHAR__BCR_FIXED__out_t;

    typedef struct {
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_CHAR__PID_HI__out_t PID_HI;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_CHAR__DCR__out_t DCR;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_CHAR__BCR_VAR__out_t BCR_VAR;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_CHAR__BCR_FIXED__out_t BCR_FIXED;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_CHAR__out_t;

    typedef struct {
        logic [31:0] value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_PID_LO__PID_LO__out_t;

    typedef struct {
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_PID_LO__PID_LO__out_t PID_LO;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_PID_LO__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__ACR_HANDOFF_OK_REMAIN_STAT__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__ACR_HANDOFF_OK_PRIMED_STAT__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__ACR_HANDOFF_ERR_FAIL_STAT__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__ACR_HANDOFF_ERR_M3_STAT__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__CRR_RESPONSE_STAT__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__STBY_CR_DYN_ADDR_STAT__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__STBY_CR_ACCEPT_NACKED_STAT__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__STBY_CR_ACCEPT_OK_STAT__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__STBY_CR_ACCEPT_ERR_STAT__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__STBY_CR_OP_RSTACT_STAT__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__CCC_PARAM_MODIFIED_STAT__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__CCC_UNHANDLED_NACK_STAT__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__CCC_FATAL_RSTDAA_ERR_STAT__out_t;

    typedef struct {
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__ACR_HANDOFF_OK_REMAIN_STAT__out_t ACR_HANDOFF_OK_REMAIN_STAT;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__ACR_HANDOFF_OK_PRIMED_STAT__out_t ACR_HANDOFF_OK_PRIMED_STAT;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__ACR_HANDOFF_ERR_FAIL_STAT__out_t ACR_HANDOFF_ERR_FAIL_STAT;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__ACR_HANDOFF_ERR_M3_STAT__out_t ACR_HANDOFF_ERR_M3_STAT;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__CRR_RESPONSE_STAT__out_t CRR_RESPONSE_STAT;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__STBY_CR_DYN_ADDR_STAT__out_t STBY_CR_DYN_ADDR_STAT;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__STBY_CR_ACCEPT_NACKED_STAT__out_t STBY_CR_ACCEPT_NACKED_STAT;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__STBY_CR_ACCEPT_OK_STAT__out_t STBY_CR_ACCEPT_OK_STAT;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__STBY_CR_ACCEPT_ERR_STAT__out_t STBY_CR_ACCEPT_ERR_STAT;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__STBY_CR_OP_RSTACT_STAT__out_t STBY_CR_OP_RSTACT_STAT;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__CCC_PARAM_MODIFIED_STAT__out_t CCC_PARAM_MODIFIED_STAT;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__CCC_UNHANDLED_NACK_STAT__out_t CCC_UNHANDLED_NACK_STAT;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__CCC_FATAL_RSTDAA_ERR_STAT__out_t CCC_FATAL_RSTDAA_ERR_STAT;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__out_t;

    typedef struct {
        logic [31:0] value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRTUAL_DEVICE_PID_LO__PID_LO__out_t;

    typedef struct {
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRTUAL_DEVICE_PID_LO__PID_LO__out_t PID_LO;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRTUAL_DEVICE_PID_LO__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__ACR_HANDOFF_OK_REMAIN_SIGNAL_EN__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__ACR_HANDOFF_OK_PRIMED_SIGNAL_EN__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__ACR_HANDOFF_ERR_FAIL_SIGNAL_EN__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__ACR_HANDOFF_ERR_M3_SIGNAL_EN__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__CRR_RESPONSE_SIGNAL_EN__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__STBY_CR_DYN_ADDR_SIGNAL_EN__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__STBY_CR_ACCEPT_NACKED_SIGNAL_EN__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__STBY_CR_ACCEPT_OK_SIGNAL_EN__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__STBY_CR_ACCEPT_ERR_SIGNAL_EN__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__STBY_CR_OP_RSTACT_SIGNAL_EN__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__CCC_PARAM_MODIFIED_SIGNAL_EN__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__CCC_UNHANDLED_NACK_SIGNAL_EN__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__CCC_FATAL_RSTDAA_ERR_SIGNAL_EN__out_t;

    typedef struct {
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__ACR_HANDOFF_OK_REMAIN_SIGNAL_EN__out_t ACR_HANDOFF_OK_REMAIN_SIGNAL_EN;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__ACR_HANDOFF_OK_PRIMED_SIGNAL_EN__out_t ACR_HANDOFF_OK_PRIMED_SIGNAL_EN;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__ACR_HANDOFF_ERR_FAIL_SIGNAL_EN__out_t ACR_HANDOFF_ERR_FAIL_SIGNAL_EN;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__ACR_HANDOFF_ERR_M3_SIGNAL_EN__out_t ACR_HANDOFF_ERR_M3_SIGNAL_EN;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__CRR_RESPONSE_SIGNAL_EN__out_t CRR_RESPONSE_SIGNAL_EN;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__STBY_CR_DYN_ADDR_SIGNAL_EN__out_t STBY_CR_DYN_ADDR_SIGNAL_EN;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__STBY_CR_ACCEPT_NACKED_SIGNAL_EN__out_t STBY_CR_ACCEPT_NACKED_SIGNAL_EN;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__STBY_CR_ACCEPT_OK_SIGNAL_EN__out_t STBY_CR_ACCEPT_OK_SIGNAL_EN;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__STBY_CR_ACCEPT_ERR_SIGNAL_EN__out_t STBY_CR_ACCEPT_ERR_SIGNAL_EN;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__STBY_CR_OP_RSTACT_SIGNAL_EN__out_t STBY_CR_OP_RSTACT_SIGNAL_EN;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__CCC_PARAM_MODIFIED_SIGNAL_EN__out_t CCC_PARAM_MODIFIED_SIGNAL_EN;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__CCC_UNHANDLED_NACK_SIGNAL_EN__out_t CCC_UNHANDLED_NACK_SIGNAL_EN;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__CCC_FATAL_RSTDAA_ERR_SIGNAL_EN__out_t CCC_FATAL_RSTDAA_ERR_SIGNAL_EN;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__CRR_RESPONSE_FORCE__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__STBY_CR_DYN_ADDR_FORCE__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__STBY_CR_ACCEPT_NACKED_FORCE__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__STBY_CR_ACCEPT_OK_FORCE__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__STBY_CR_ACCEPT_ERR_FORCE__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__STBY_CR_OP_RSTACT_FORCE__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__CCC_PARAM_MODIFIED_FORCE__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__CCC_UNHANDLED_NACK_FORCE__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__CCC_FATAL_RSTDAA_ERR_FORCE__out_t;

    typedef struct {
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__CRR_RESPONSE_FORCE__out_t CRR_RESPONSE_FORCE;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__STBY_CR_DYN_ADDR_FORCE__out_t STBY_CR_DYN_ADDR_FORCE;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__STBY_CR_ACCEPT_NACKED_FORCE__out_t STBY_CR_ACCEPT_NACKED_FORCE;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__STBY_CR_ACCEPT_OK_FORCE__out_t STBY_CR_ACCEPT_OK_FORCE;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__STBY_CR_ACCEPT_ERR_FORCE__out_t STBY_CR_ACCEPT_ERR_FORCE;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__STBY_CR_OP_RSTACT_FORCE__out_t STBY_CR_OP_RSTACT_FORCE;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__CCC_PARAM_MODIFIED_FORCE__out_t CCC_PARAM_MODIFIED_FORCE;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__CCC_UNHANDLED_NACK_FORCE__out_t CCC_UNHANDLED_NACK_FORCE;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__CCC_FATAL_RSTDAA_ERR_FORCE__out_t CCC_FATAL_RSTDAA_ERR_FORCE;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__out_t;

    typedef struct {
        logic [2:0] value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_GETCAPS__F2_CRCAP1_BUS_CONFIG__out_t;

    typedef struct {
        logic [3:0] value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_GETCAPS__F2_CRCAP2_DEV_INTERACT__out_t;

    typedef struct {
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_GETCAPS__F2_CRCAP1_BUS_CONFIG__out_t F2_CRCAP1_BUS_CONFIG;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_GETCAPS__F2_CRCAP2_DEV_INTERACT__out_t F2_CRCAP2_DEV_INTERACT;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_GETCAPS__out_t;

    typedef struct {
        logic [7:0] value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_RSTACT_PARAMS__RST_ACTION__out_t;

    typedef struct {
        logic [7:0] value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_RSTACT_PARAMS__RESET_TIME_PERIPHERAL__out_t;

    typedef struct {
        logic [7:0] value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_RSTACT_PARAMS__RESET_TIME_TARGET__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_RSTACT_PARAMS__RESET_DYNAMIC_ADDR__out_t;

    typedef struct {
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_RSTACT_PARAMS__RST_ACTION__out_t RST_ACTION;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_RSTACT_PARAMS__RESET_TIME_PERIPHERAL__out_t RESET_TIME_PERIPHERAL;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_RSTACT_PARAMS__RESET_TIME_TARGET__out_t RESET_TIME_TARGET;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_RSTACT_PARAMS__RESET_DYNAMIC_ADDR__out_t RESET_DYNAMIC_ADDR;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_RSTACT_PARAMS__out_t;

    typedef struct {
        logic [6:0] value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRT_DEVICE_ADDR__VIRT_STATIC_ADDR__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRT_DEVICE_ADDR__VIRT_STATIC_ADDR_VALID__out_t;

    typedef struct {
        logic [6:0] value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRT_DEVICE_ADDR__VIRT_DYNAMIC_ADDR__out_t;

    typedef struct {
        logic value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRT_DEVICE_ADDR__VIRT_DYNAMIC_ADDR_VALID__out_t;

    typedef struct {
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRT_DEVICE_ADDR__VIRT_STATIC_ADDR__out_t VIRT_STATIC_ADDR;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRT_DEVICE_ADDR__VIRT_STATIC_ADDR_VALID__out_t VIRT_STATIC_ADDR_VALID;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRT_DEVICE_ADDR__VIRT_DYNAMIC_ADDR__out_t VIRT_DYNAMIC_ADDR;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRT_DEVICE_ADDR__VIRT_DYNAMIC_ADDR_VALID__out_t VIRT_DYNAMIC_ADDR_VALID;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRT_DEVICE_ADDR__out_t;

    typedef struct {
        logic [31:0] value;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5____rsvd_3____rsvd__out_t;

    typedef struct {
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5____rsvd_3____rsvd__out_t __rsvd;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5____rsvd_3__out_t;

    typedef struct {
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__EXTCAP_HEADER__out_t EXTCAP_HEADER;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CONTROL__out_t STBY_CR_CONTROL;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_ADDR__out_t STBY_CR_DEVICE_ADDR;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CAPABILITIES__out_t STBY_CR_CAPABILITIES;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRTUAL_DEVICE_CHAR__out_t STBY_CR_VIRTUAL_DEVICE_CHAR;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_STATUS__out_t STBY_CR_STATUS;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_CHAR__out_t STBY_CR_DEVICE_CHAR;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_DEVICE_PID_LO__out_t STBY_CR_DEVICE_PID_LO;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_STATUS__out_t STBY_CR_INTR_STATUS;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRTUAL_DEVICE_PID_LO__out_t STBY_CR_VIRTUAL_DEVICE_PID_LO;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_SIGNAL_ENABLE__out_t STBY_CR_INTR_SIGNAL_ENABLE;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_INTR_FORCE__out_t STBY_CR_INTR_FORCE;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_GETCAPS__out_t STBY_CR_CCC_CONFIG_GETCAPS;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_CCC_CONFIG_RSTACT_PARAMS__out_t STBY_CR_CCC_CONFIG_RSTACT_PARAMS;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__STBY_CR_VIRT_DEVICE_ADDR__out_t STBY_CR_VIRT_DEVICE_ADDR;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5____rsvd_3__out_t __rsvd_3;
    } StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__out_t;

    typedef struct {
        logic [7:0] value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__EXTCAP_HEADER__CAP_ID__out_t;

    typedef struct {
        logic [15:0] value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__EXTCAP_HEADER__CAP_LENGTH__out_t;

    typedef struct {
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__EXTCAP_HEADER__CAP_ID__out_t CAP_ID;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__EXTCAP_HEADER__CAP_LENGTH__out_t CAP_LENGTH;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__EXTCAP_HEADER__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__CONTROL__HJ_EN__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__CONTROL__CRR_EN__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__CONTROL__IBI_EN__out_t;

    typedef struct {
        logic [2:0] value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__CONTROL__IBI_RETRY_NUM__out_t;

    typedef struct {
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__CONTROL__HJ_EN__out_t HJ_EN;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__CONTROL__CRR_EN__out_t CRR_EN;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__CONTROL__IBI_EN__out_t IBI_EN;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__CONTROL__IBI_RETRY_NUM__out_t IBI_RETRY_NUM;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__CONTROL__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__STATUS__PROTOCOL_ERROR__out_t;

    typedef struct {
        logic [1:0] value;
        logic swacc;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__STATUS__LAST_IBI_STATUS__out_t;

    typedef struct {
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__STATUS__PROTOCOL_ERROR__out_t PROTOCOL_ERROR;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__STATUS__LAST_IBI_STATUS__out_t LAST_IBI_STATUS;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__STATUS__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RESET_CONTROL__SOFT_RST__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RESET_CONTROL__TX_DESC_RST__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RESET_CONTROL__RX_DESC_RST__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RESET_CONTROL__TX_DATA_RST__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RESET_CONTROL__RX_DATA_RST__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RESET_CONTROL__IBI_QUEUE_RST__out_t;

    typedef struct {
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RESET_CONTROL__SOFT_RST__out_t SOFT_RST;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RESET_CONTROL__TX_DESC_RST__out_t TX_DESC_RST;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RESET_CONTROL__RX_DESC_RST__out_t RX_DESC_RST;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RESET_CONTROL__TX_DATA_RST__out_t TX_DATA_RST;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RESET_CONTROL__RX_DATA_RST__out_t RX_DATA_RST;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RESET_CONTROL__IBI_QUEUE_RST__out_t IBI_QUEUE_RST;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RESET_CONTROL__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__RX_DESC_STAT__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__TX_DESC_STAT__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__RX_DESC_TIMEOUT__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__TX_DESC_TIMEOUT__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__TX_DATA_THLD_STAT__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__RX_DATA_THLD_STAT__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__TX_DESC_THLD_STAT__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__RX_DESC_THLD_STAT__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__IBI_THLD_STAT__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__IBI_DONE__out_t;

    typedef struct {
        logic [3:0] value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__PENDING_INTERRUPT__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__TRANSFER_ABORT_STAT__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__TX_DESC_COMPLETE__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__TRANSFER_ERR_STAT__out_t;

    typedef struct {
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__RX_DESC_STAT__out_t RX_DESC_STAT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__TX_DESC_STAT__out_t TX_DESC_STAT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__RX_DESC_TIMEOUT__out_t RX_DESC_TIMEOUT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__TX_DESC_TIMEOUT__out_t TX_DESC_TIMEOUT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__TX_DATA_THLD_STAT__out_t TX_DATA_THLD_STAT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__RX_DATA_THLD_STAT__out_t RX_DATA_THLD_STAT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__TX_DESC_THLD_STAT__out_t TX_DESC_THLD_STAT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__RX_DESC_THLD_STAT__out_t RX_DESC_THLD_STAT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__IBI_THLD_STAT__out_t IBI_THLD_STAT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__IBI_DONE__out_t IBI_DONE;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__PENDING_INTERRUPT__out_t PENDING_INTERRUPT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__TRANSFER_ABORT_STAT__out_t TRANSFER_ABORT_STAT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__TX_DESC_COMPLETE__out_t TX_DESC_COMPLETE;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__TRANSFER_ERR_STAT__out_t TRANSFER_ERR_STAT;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_ENABLE__RX_DESC_STAT_EN__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_ENABLE__TX_DESC_STAT_EN__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_ENABLE__RX_DESC_TIMEOUT_EN__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_ENABLE__TX_DESC_TIMEOUT_EN__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_ENABLE__TX_DATA_THLD_STAT_EN__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_ENABLE__RX_DATA_THLD_STAT_EN__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_ENABLE__TX_DESC_THLD_STAT_EN__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_ENABLE__RX_DESC_THLD_STAT_EN__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_ENABLE__IBI_THLD_STAT_EN__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_ENABLE__IBI_DONE_EN__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_ENABLE__TRANSFER_ABORT_STAT_EN__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_ENABLE__TX_DESC_COMPLETE_EN__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_ENABLE__TRANSFER_ERR_STAT_EN__out_t;

    typedef struct {
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_ENABLE__RX_DESC_STAT_EN__out_t RX_DESC_STAT_EN;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_ENABLE__TX_DESC_STAT_EN__out_t TX_DESC_STAT_EN;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_ENABLE__RX_DESC_TIMEOUT_EN__out_t RX_DESC_TIMEOUT_EN;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_ENABLE__TX_DESC_TIMEOUT_EN__out_t TX_DESC_TIMEOUT_EN;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_ENABLE__TX_DATA_THLD_STAT_EN__out_t TX_DATA_THLD_STAT_EN;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_ENABLE__RX_DATA_THLD_STAT_EN__out_t RX_DATA_THLD_STAT_EN;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_ENABLE__TX_DESC_THLD_STAT_EN__out_t TX_DESC_THLD_STAT_EN;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_ENABLE__RX_DESC_THLD_STAT_EN__out_t RX_DESC_THLD_STAT_EN;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_ENABLE__IBI_THLD_STAT_EN__out_t IBI_THLD_STAT_EN;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_ENABLE__IBI_DONE_EN__out_t IBI_DONE_EN;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_ENABLE__TRANSFER_ABORT_STAT_EN__out_t TRANSFER_ABORT_STAT_EN;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_ENABLE__TX_DESC_COMPLETE_EN__out_t TX_DESC_COMPLETE_EN;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_ENABLE__TRANSFER_ERR_STAT_EN__out_t TRANSFER_ERR_STAT_EN;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_ENABLE__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_FORCE__RX_DESC_STAT_FORCE__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_FORCE__TX_DESC_STAT_FORCE__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_FORCE__RX_DESC_TIMEOUT_FORCE__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_FORCE__TX_DESC_TIMEOUT_FORCE__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_FORCE__TX_DATA_THLD_FORCE__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_FORCE__RX_DATA_THLD_FORCE__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_FORCE__TX_DESC_THLD_FORCE__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_FORCE__RX_DESC_THLD_FORCE__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_FORCE__IBI_THLD_FORCE__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_FORCE__IBI_DONE_FORCE__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_FORCE__TRANSFER_ABORT_STAT_FORCE__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_FORCE__TX_DESC_COMPLETE_FORCE__out_t;

    typedef struct {
        logic value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_FORCE__TRANSFER_ERR_STAT_FORCE__out_t;

    typedef struct {
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_FORCE__RX_DESC_STAT_FORCE__out_t RX_DESC_STAT_FORCE;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_FORCE__TX_DESC_STAT_FORCE__out_t TX_DESC_STAT_FORCE;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_FORCE__RX_DESC_TIMEOUT_FORCE__out_t RX_DESC_TIMEOUT_FORCE;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_FORCE__TX_DESC_TIMEOUT_FORCE__out_t TX_DESC_TIMEOUT_FORCE;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_FORCE__TX_DATA_THLD_FORCE__out_t TX_DATA_THLD_FORCE;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_FORCE__RX_DATA_THLD_FORCE__out_t RX_DATA_THLD_FORCE;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_FORCE__TX_DESC_THLD_FORCE__out_t TX_DESC_THLD_FORCE;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_FORCE__RX_DESC_THLD_FORCE__out_t RX_DESC_THLD_FORCE;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_FORCE__IBI_THLD_FORCE__out_t IBI_THLD_FORCE;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_FORCE__IBI_DONE_FORCE__out_t IBI_DONE_FORCE;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_FORCE__TRANSFER_ABORT_STAT_FORCE__out_t TRANSFER_ABORT_STAT_FORCE;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_FORCE__TX_DESC_COMPLETE_FORCE__out_t TX_DESC_COMPLETE_FORCE;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_FORCE__TRANSFER_ERR_STAT_FORCE__out_t TRANSFER_ERR_STAT_FORCE;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_FORCE__out_t;

    typedef struct {
        logic req;
        logic req_is_wr;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RX_DESC_QUEUE_PORT__external__out_t;

    typedef struct {
        logic req;
        logic req_is_wr;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RX_DATA_PORT__external__out_t;

    typedef struct packed {
        logic [31:0] TX_DESC;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__TX_DESC_QUEUE_PORT__external__fields__out_t;

    typedef struct {
        logic req;
        logic req_is_wr;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__TX_DESC_QUEUE_PORT__external__fields__out_t wr_data;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__TX_DESC_QUEUE_PORT__external__fields__out_t wr_biten;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__TX_DESC_QUEUE_PORT__external__out_t;

    typedef struct packed {
        logic [31:0] TX_DATA;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__TX_DATA_PORT__external__fields__out_t;

    typedef struct {
        logic req;
        logic req_is_wr;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__TX_DATA_PORT__external__fields__out_t wr_data;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__TX_DATA_PORT__external__fields__out_t wr_biten;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__TX_DATA_PORT__external__out_t;

    typedef struct packed {
        logic [31:0] IBI_DATA;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__IBI_PORT__external__fields__out_t;

    typedef struct {
        logic req;
        logic req_is_wr;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__IBI_PORT__external__fields__out_t wr_data;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__IBI_PORT__external__fields__out_t wr_biten;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__IBI_PORT__external__out_t;

    typedef struct {
        logic [7:0] value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__QUEUE_SIZE__RX_DESC_BUFFER_SIZE__out_t;

    typedef struct {
        logic [7:0] value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__QUEUE_SIZE__TX_DESC_BUFFER_SIZE__out_t;

    typedef struct {
        logic [7:0] value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__QUEUE_SIZE__RX_DATA_BUFFER_SIZE__out_t;

    typedef struct {
        logic [7:0] value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__QUEUE_SIZE__TX_DATA_BUFFER_SIZE__out_t;

    typedef struct {
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__QUEUE_SIZE__RX_DESC_BUFFER_SIZE__out_t RX_DESC_BUFFER_SIZE;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__QUEUE_SIZE__TX_DESC_BUFFER_SIZE__out_t TX_DESC_BUFFER_SIZE;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__QUEUE_SIZE__RX_DATA_BUFFER_SIZE__out_t RX_DATA_BUFFER_SIZE;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__QUEUE_SIZE__TX_DATA_BUFFER_SIZE__out_t TX_DATA_BUFFER_SIZE;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__QUEUE_SIZE__out_t;

    typedef struct {
        logic [7:0] value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__IBI_QUEUE_SIZE__IBI_QUEUE_SIZE__out_t;

    typedef struct {
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__IBI_QUEUE_SIZE__IBI_QUEUE_SIZE__out_t IBI_QUEUE_SIZE;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__IBI_QUEUE_SIZE__out_t;

    typedef struct {
        logic [7:0] value;
        logic swmod;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__QUEUE_THLD_CTRL__TX_DESC_THLD__out_t;

    typedef struct {
        logic [7:0] value;
        logic swmod;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__QUEUE_THLD_CTRL__RX_DESC_THLD__out_t;

    typedef struct {
        logic [7:0] value;
        logic swmod;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__QUEUE_THLD_CTRL__IBI_THLD__out_t;

    typedef struct {
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__QUEUE_THLD_CTRL__TX_DESC_THLD__out_t TX_DESC_THLD;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__QUEUE_THLD_CTRL__RX_DESC_THLD__out_t RX_DESC_THLD;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__QUEUE_THLD_CTRL__IBI_THLD__out_t IBI_THLD;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__QUEUE_THLD_CTRL__out_t;

    typedef struct {
        logic [2:0] value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__DATA_BUFFER_THLD_CTRL__TX_DATA_THLD__out_t;

    typedef struct {
        logic [2:0] value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__DATA_BUFFER_THLD_CTRL__RX_DATA_THLD__out_t;

    typedef struct {
        logic [2:0] value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__DATA_BUFFER_THLD_CTRL__TX_START_THLD__out_t;

    typedef struct {
        logic [2:0] value;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__DATA_BUFFER_THLD_CTRL__RX_START_THLD__out_t;

    typedef struct {
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__DATA_BUFFER_THLD_CTRL__TX_DATA_THLD__out_t TX_DATA_THLD;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__DATA_BUFFER_THLD_CTRL__RX_DATA_THLD__out_t RX_DATA_THLD;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__DATA_BUFFER_THLD_CTRL__TX_START_THLD__out_t TX_START_THLD;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__DATA_BUFFER_THLD_CTRL__RX_START_THLD__out_t RX_START_THLD;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__DATA_BUFFER_THLD_CTRL__out_t;

    typedef struct {
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__EXTCAP_HEADER__out_t EXTCAP_HEADER;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__CONTROL__out_t CONTROL;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__STATUS__out_t STATUS;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RESET_CONTROL__out_t RESET_CONTROL;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_STATUS__out_t INTERRUPT_STATUS;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_ENABLE__out_t INTERRUPT_ENABLE;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__INTERRUPT_FORCE__out_t INTERRUPT_FORCE;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RX_DESC_QUEUE_PORT__external__out_t RX_DESC_QUEUE_PORT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__RX_DATA_PORT__external__out_t RX_DATA_PORT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__TX_DESC_QUEUE_PORT__external__out_t TX_DESC_QUEUE_PORT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__TX_DATA_PORT__external__out_t TX_DATA_PORT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__IBI_PORT__external__out_t IBI_PORT;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__QUEUE_SIZE__out_t QUEUE_SIZE;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__IBI_QUEUE_SIZE__out_t IBI_QUEUE_SIZE;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__QUEUE_THLD_CTRL__out_t QUEUE_THLD_CTRL;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__DATA_BUFFER_THLD_CTRL__out_t DATA_BUFFER_THLD_CTRL;
    } TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__out_t;

    typedef struct {
        logic [7:0] value;
    } SoCManagementInterfaceRegisters__EXTCAP_HEADER__CAP_ID__out_t;

    typedef struct {
        logic [15:0] value;
    } SoCManagementInterfaceRegisters__EXTCAP_HEADER__CAP_LENGTH__out_t;

    typedef struct {
        SoCManagementInterfaceRegisters__EXTCAP_HEADER__CAP_ID__out_t CAP_ID;
        SoCManagementInterfaceRegisters__EXTCAP_HEADER__CAP_LENGTH__out_t CAP_LENGTH;
    } SoCManagementInterfaceRegisters__EXTCAP_HEADER__out_t;

    typedef struct {
        logic [31:0] value;
    } SoCManagementInterfaceRegisters__SOC_MGMT_CONTROL__PLACEHOLDER__out_t;

    typedef struct {
        SoCManagementInterfaceRegisters__SOC_MGMT_CONTROL__PLACEHOLDER__out_t PLACEHOLDER;
    } SoCManagementInterfaceRegisters__SOC_MGMT_CONTROL__out_t;

    typedef struct {
        logic [31:0] value;
    } SoCManagementInterfaceRegisters__SOC_MGMT_STATUS__PLACEHOLDER__out_t;

    typedef struct {
        SoCManagementInterfaceRegisters__SOC_MGMT_STATUS__PLACEHOLDER__out_t PLACEHOLDER;
    } SoCManagementInterfaceRegisters__SOC_MGMT_STATUS__out_t;

    typedef struct {
        logic value;
    } SoCManagementInterfaceRegisters__REC_INTF_CFG__REC_INTF_BYPASS__out_t;

    typedef struct {
        logic value;
    } SoCManagementInterfaceRegisters__REC_INTF_CFG__REC_PAYLOAD_DONE__out_t;

    typedef struct {
        SoCManagementInterfaceRegisters__REC_INTF_CFG__REC_INTF_BYPASS__out_t REC_INTF_BYPASS;
        SoCManagementInterfaceRegisters__REC_INTF_CFG__REC_PAYLOAD_DONE__out_t REC_PAYLOAD_DONE;
    } SoCManagementInterfaceRegisters__REC_INTF_CFG__out_t;

    typedef struct {
        logic [7:0] value;
        logic swmod;
    } SoCManagementInterfaceRegisters__REC_INTF_REG_W1C_ACCESS__DEVICE_RESET_CTRL__out_t;

    typedef struct {
        logic [7:0] value;
        logic swmod;
    } SoCManagementInterfaceRegisters__REC_INTF_REG_W1C_ACCESS__RECOVERY_CTRL_ACTIVATE_REC_IMG__out_t;

    typedef struct {
        logic [7:0] value;
        logic swmod;
    } SoCManagementInterfaceRegisters__REC_INTF_REG_W1C_ACCESS__INDIRECT_FIFO_CTRL_RESET__out_t;

    typedef struct {
        SoCManagementInterfaceRegisters__REC_INTF_REG_W1C_ACCESS__DEVICE_RESET_CTRL__out_t DEVICE_RESET_CTRL;
        SoCManagementInterfaceRegisters__REC_INTF_REG_W1C_ACCESS__RECOVERY_CTRL_ACTIVATE_REC_IMG__out_t RECOVERY_CTRL_ACTIVATE_REC_IMG;
        SoCManagementInterfaceRegisters__REC_INTF_REG_W1C_ACCESS__INDIRECT_FIFO_CTRL_RESET__out_t INDIRECT_FIFO_CTRL_RESET;
    } SoCManagementInterfaceRegisters__REC_INTF_REG_W1C_ACCESS__out_t;

    typedef struct {
        logic [31:0] value;
    } SoCManagementInterfaceRegisters__SOC_MGMT_RSVD_2__PLACEHOLDER__out_t;

    typedef struct {
        SoCManagementInterfaceRegisters__SOC_MGMT_RSVD_2__PLACEHOLDER__out_t PLACEHOLDER;
    } SoCManagementInterfaceRegisters__SOC_MGMT_RSVD_2__out_t;

    typedef struct {
        logic [31:0] value;
    } SoCManagementInterfaceRegisters__SOC_MGMT_RSVD_3__PLACEHOLDER__out_t;

    typedef struct {
        SoCManagementInterfaceRegisters__SOC_MGMT_RSVD_3__PLACEHOLDER__out_t PLACEHOLDER;
    } SoCManagementInterfaceRegisters__SOC_MGMT_RSVD_3__out_t;

    typedef struct {
        logic value;
    } SoCManagementInterfaceRegisters__SOC_PAD_CONF__INPUT_ENABLE__out_t;

    typedef struct {
        logic value;
    } SoCManagementInterfaceRegisters__SOC_PAD_CONF__SCHMITT_EN__out_t;

    typedef struct {
        logic value;
    } SoCManagementInterfaceRegisters__SOC_PAD_CONF__KEEPER_EN__out_t;

    typedef struct {
        logic value;
    } SoCManagementInterfaceRegisters__SOC_PAD_CONF__PULL_DIR__out_t;

    typedef struct {
        logic value;
    } SoCManagementInterfaceRegisters__SOC_PAD_CONF__PULL_EN__out_t;

    typedef struct {
        logic value;
    } SoCManagementInterfaceRegisters__SOC_PAD_CONF__IO_INVERSION__out_t;

    typedef struct {
        logic value;
    } SoCManagementInterfaceRegisters__SOC_PAD_CONF__OD_EN__out_t;

    typedef struct {
        logic value;
    } SoCManagementInterfaceRegisters__SOC_PAD_CONF__VIRTUAL_OD_EN__out_t;

    typedef struct {
        logic [7:0] value;
    } SoCManagementInterfaceRegisters__SOC_PAD_CONF__PAD_TYPE__out_t;

    typedef struct {
        SoCManagementInterfaceRegisters__SOC_PAD_CONF__INPUT_ENABLE__out_t INPUT_ENABLE;
        SoCManagementInterfaceRegisters__SOC_PAD_CONF__SCHMITT_EN__out_t SCHMITT_EN;
        SoCManagementInterfaceRegisters__SOC_PAD_CONF__KEEPER_EN__out_t KEEPER_EN;
        SoCManagementInterfaceRegisters__SOC_PAD_CONF__PULL_DIR__out_t PULL_DIR;
        SoCManagementInterfaceRegisters__SOC_PAD_CONF__PULL_EN__out_t PULL_EN;
        SoCManagementInterfaceRegisters__SOC_PAD_CONF__IO_INVERSION__out_t IO_INVERSION;
        SoCManagementInterfaceRegisters__SOC_PAD_CONF__OD_EN__out_t OD_EN;
        SoCManagementInterfaceRegisters__SOC_PAD_CONF__VIRTUAL_OD_EN__out_t VIRTUAL_OD_EN;
        SoCManagementInterfaceRegisters__SOC_PAD_CONF__PAD_TYPE__out_t PAD_TYPE;
    } SoCManagementInterfaceRegisters__SOC_PAD_CONF__out_t;

    typedef struct {
        logic [7:0] value;
    } SoCManagementInterfaceRegisters__SOC_PAD_ATTR__DRIVE_SLEW_RATE__out_t;

    typedef struct {
        logic [7:0] value;
    } SoCManagementInterfaceRegisters__SOC_PAD_ATTR__DRIVE_STRENGTH__out_t;

    typedef struct {
        SoCManagementInterfaceRegisters__SOC_PAD_ATTR__DRIVE_SLEW_RATE__out_t DRIVE_SLEW_RATE;
        SoCManagementInterfaceRegisters__SOC_PAD_ATTR__DRIVE_STRENGTH__out_t DRIVE_STRENGTH;
    } SoCManagementInterfaceRegisters__SOC_PAD_ATTR__out_t;

    typedef struct {
        logic [31:0] value;
    } SoCManagementInterfaceRegisters__SOC_MGMT_FEATURE_2__PLACEHOLDER__out_t;

    typedef struct {
        SoCManagementInterfaceRegisters__SOC_MGMT_FEATURE_2__PLACEHOLDER__out_t PLACEHOLDER;
    } SoCManagementInterfaceRegisters__SOC_MGMT_FEATURE_2__out_t;

    typedef struct {
        logic [31:0] value;
    } SoCManagementInterfaceRegisters__SOC_MGMT_FEATURE_3__PLACEHOLDER__out_t;

    typedef struct {
        SoCManagementInterfaceRegisters__SOC_MGMT_FEATURE_3__PLACEHOLDER__out_t PLACEHOLDER;
    } SoCManagementInterfaceRegisters__SOC_MGMT_FEATURE_3__out_t;

    typedef struct {
        logic [19:0] value;
    } SoCManagementInterfaceRegisters__T_R_REG__T_R__out_t;

    typedef struct {
        SoCManagementInterfaceRegisters__T_R_REG__T_R__out_t T_R;
    } SoCManagementInterfaceRegisters__T_R_REG__out_t;

    typedef struct {
        logic [19:0] value;
    } SoCManagementInterfaceRegisters__T_F_REG__T_F__out_t;

    typedef struct {
        SoCManagementInterfaceRegisters__T_F_REG__T_F__out_t T_F;
    } SoCManagementInterfaceRegisters__T_F_REG__out_t;

    typedef struct {
        logic [19:0] value;
    } SoCManagementInterfaceRegisters__T_SU_DAT_REG__T_SU_DAT__out_t;

    typedef struct {
        SoCManagementInterfaceRegisters__T_SU_DAT_REG__T_SU_DAT__out_t T_SU_DAT;
    } SoCManagementInterfaceRegisters__T_SU_DAT_REG__out_t;

    typedef struct {
        logic [19:0] value;
    } SoCManagementInterfaceRegisters__T_HD_DAT_REG__T_HD_DAT__out_t;

    typedef struct {
        SoCManagementInterfaceRegisters__T_HD_DAT_REG__T_HD_DAT__out_t T_HD_DAT;
    } SoCManagementInterfaceRegisters__T_HD_DAT_REG__out_t;

    typedef struct {
        logic [19:0] value;
    } SoCManagementInterfaceRegisters__T_HIGH_REG__T_HIGH__out_t;

    typedef struct {
        SoCManagementInterfaceRegisters__T_HIGH_REG__T_HIGH__out_t T_HIGH;
    } SoCManagementInterfaceRegisters__T_HIGH_REG__out_t;

    typedef struct {
        logic [19:0] value;
    } SoCManagementInterfaceRegisters__T_LOW_REG__T_LOW__out_t;

    typedef struct {
        SoCManagementInterfaceRegisters__T_LOW_REG__T_LOW__out_t T_LOW;
    } SoCManagementInterfaceRegisters__T_LOW_REG__out_t;

    typedef struct {
        logic [19:0] value;
    } SoCManagementInterfaceRegisters__T_HD_STA_REG__T_HD_STA__out_t;

    typedef struct {
        SoCManagementInterfaceRegisters__T_HD_STA_REG__T_HD_STA__out_t T_HD_STA;
    } SoCManagementInterfaceRegisters__T_HD_STA_REG__out_t;

    typedef struct {
        logic [19:0] value;
    } SoCManagementInterfaceRegisters__T_SU_STA_REG__T_SU_STA__out_t;

    typedef struct {
        SoCManagementInterfaceRegisters__T_SU_STA_REG__T_SU_STA__out_t T_SU_STA;
    } SoCManagementInterfaceRegisters__T_SU_STA_REG__out_t;

    typedef struct {
        logic [19:0] value;
    } SoCManagementInterfaceRegisters__T_SU_STO_REG__T_SU_STO__out_t;

    typedef struct {
        SoCManagementInterfaceRegisters__T_SU_STO_REG__T_SU_STO__out_t T_SU_STO;
    } SoCManagementInterfaceRegisters__T_SU_STO_REG__out_t;

    typedef struct {
        logic [31:0] value;
    } SoCManagementInterfaceRegisters__T_FREE_REG__T_FREE__out_t;

    typedef struct {
        SoCManagementInterfaceRegisters__T_FREE_REG__T_FREE__out_t T_FREE;
    } SoCManagementInterfaceRegisters__T_FREE_REG__out_t;

    typedef struct {
        logic [31:0] value;
    } SoCManagementInterfaceRegisters__T_AVAL_REG__T_AVAL__out_t;

    typedef struct {
        SoCManagementInterfaceRegisters__T_AVAL_REG__T_AVAL__out_t T_AVAL;
    } SoCManagementInterfaceRegisters__T_AVAL_REG__out_t;

    typedef struct {
        logic [31:0] value;
    } SoCManagementInterfaceRegisters__T_IDLE_REG__T_IDLE__out_t;

    typedef struct {
        SoCManagementInterfaceRegisters__T_IDLE_REG__T_IDLE__out_t T_IDLE;
    } SoCManagementInterfaceRegisters__T_IDLE_REG__out_t;

    typedef struct {
        SoCManagementInterfaceRegisters__EXTCAP_HEADER__out_t EXTCAP_HEADER;
        SoCManagementInterfaceRegisters__SOC_MGMT_CONTROL__out_t SOC_MGMT_CONTROL;
        SoCManagementInterfaceRegisters__SOC_MGMT_STATUS__out_t SOC_MGMT_STATUS;
        SoCManagementInterfaceRegisters__REC_INTF_CFG__out_t REC_INTF_CFG;
        SoCManagementInterfaceRegisters__REC_INTF_REG_W1C_ACCESS__out_t REC_INTF_REG_W1C_ACCESS;
        SoCManagementInterfaceRegisters__SOC_MGMT_RSVD_2__out_t SOC_MGMT_RSVD_2;
        SoCManagementInterfaceRegisters__SOC_MGMT_RSVD_3__out_t SOC_MGMT_RSVD_3;
        SoCManagementInterfaceRegisters__SOC_PAD_CONF__out_t SOC_PAD_CONF;
        SoCManagementInterfaceRegisters__SOC_PAD_ATTR__out_t SOC_PAD_ATTR;
        SoCManagementInterfaceRegisters__SOC_MGMT_FEATURE_2__out_t SOC_MGMT_FEATURE_2;
        SoCManagementInterfaceRegisters__SOC_MGMT_FEATURE_3__out_t SOC_MGMT_FEATURE_3;
        SoCManagementInterfaceRegisters__T_R_REG__out_t T_R_REG;
        SoCManagementInterfaceRegisters__T_F_REG__out_t T_F_REG;
        SoCManagementInterfaceRegisters__T_SU_DAT_REG__out_t T_SU_DAT_REG;
        SoCManagementInterfaceRegisters__T_HD_DAT_REG__out_t T_HD_DAT_REG;
        SoCManagementInterfaceRegisters__T_HIGH_REG__out_t T_HIGH_REG;
        SoCManagementInterfaceRegisters__T_LOW_REG__out_t T_LOW_REG;
        SoCManagementInterfaceRegisters__T_HD_STA_REG__out_t T_HD_STA_REG;
        SoCManagementInterfaceRegisters__T_SU_STA_REG__out_t T_SU_STA_REG;
        SoCManagementInterfaceRegisters__T_SU_STO_REG__out_t T_SU_STO_REG;
        SoCManagementInterfaceRegisters__T_FREE_REG__out_t T_FREE_REG;
        SoCManagementInterfaceRegisters__T_AVAL_REG__out_t T_AVAL_REG;
        SoCManagementInterfaceRegisters__T_IDLE_REG__out_t T_IDLE_REG;
    } SoCManagementInterfaceRegisters__out_t;

    typedef struct {
        logic [7:0] value;
    } ControllerConfigRegisters__EXTCAP_HEADER__CAP_ID__out_t;

    typedef struct {
        logic [15:0] value;
    } ControllerConfigRegisters__EXTCAP_HEADER__CAP_LENGTH__out_t;

    typedef struct {
        ControllerConfigRegisters__EXTCAP_HEADER__CAP_ID__out_t CAP_ID;
        ControllerConfigRegisters__EXTCAP_HEADER__CAP_LENGTH__out_t CAP_LENGTH;
    } ControllerConfigRegisters__EXTCAP_HEADER__out_t;

    typedef struct {
        logic [1:0] value;
    } ControllerConfigRegisters__CONTROLLER_CONFIG__OPERATION_MODE__out_t;

    typedef struct {
        ControllerConfigRegisters__CONTROLLER_CONFIG__OPERATION_MODE__out_t OPERATION_MODE;
    } ControllerConfigRegisters__CONTROLLER_CONFIG__out_t;

    typedef struct {
        ControllerConfigRegisters__EXTCAP_HEADER__out_t EXTCAP_HEADER;
        ControllerConfigRegisters__CONTROLLER_CONFIG__out_t CONTROLLER_CONFIG;
    } ControllerConfigRegisters__out_t;

    typedef struct {
        logic [7:0] value;
    } ECRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__TERMINATION_EXTCAP_HEADER__CAP_ID__out_t;

    typedef struct {
        logic [15:0] value;
    } ECRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__TERMINATION_EXTCAP_HEADER__CAP_LENGTH__out_t;

    typedef struct {
        ECRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__TERMINATION_EXTCAP_HEADER__CAP_ID__out_t CAP_ID;
        ECRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__TERMINATION_EXTCAP_HEADER__CAP_LENGTH__out_t CAP_LENGTH;
    } ECRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__TERMINATION_EXTCAP_HEADER__out_t;

    typedef struct {
        SecureFirmwareRecoveryInterfaceRegisters__out_t SecFwRecoveryIf;
        StandbyControllerModeRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__out_t StdbyCtrlMode;
        TargetTransactionInterfaceRegisters_rx_desc_fifo_size_5_tx_desc_fifo_size_5_rx_fifo_size_5_tx_fifo_size_5_ibi_fifo_size_5__out_t TTI;
        SoCManagementInterfaceRegisters__out_t SoCMgmtIf;
        ControllerConfigRegisters__out_t CtrlCfg;
        ECRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__TERMINATION_EXTCAP_HEADER__out_t TERMINATION_EXTCAP_HEADER;
    } ECRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__out_t;

    typedef struct {
        ECRegisters_pid_hi_7fff_pid_lo_5a00a5_virtual_pid_hi_7fff_virtual_pid_lo_5a10a5__out_t I3C_EC;
    } I3CCSR__out_t;
endpackage


// ---
// Top
// ---
\SV
   m5_makerchip_module
   I3CCSR_pkg::I3CCSR__in_t hwif_in;
   I3CCSR_pkg::I3CCSR__out_t hwif_out;

\TLV
   
   $reset = *reset;
   $s_apb_pwrite = 1;

   *hwif_in.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.REC_PROT_VERSION.next = $rand8[15:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.REC_PROT_VERSION.we = $rand9;
   *hwif_in.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.AGENT_CAPS.next = $rand10[15:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.AGENT_CAPS.we = $rand11;
   *hwif_in.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.NUM_OF_CMS_REGIONS.next = $rand12[7:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.NUM_OF_CMS_REGIONS.we = $rand13;
   *hwif_in.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.MAX_RESP_TIME.next = $rand14[7:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.MAX_RESP_TIME.we = $rand15;
   *hwif_in.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.HEARTBEAT_PERIOD.next = $rand16[7:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.HEARTBEAT_PERIOD.we = $rand17;
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DESC_TYPE.next = $rand18[7:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DESC_TYPE.we = $rand19;
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.VENDOR_SPECIFIC_STR_LENGTH.next = $rand20[7:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.VENDOR_SPECIFIC_STR_LENGTH.we = $rand21;
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DATA.next = $rand22[15:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DATA.we = $rand23;
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.DATA.next = $rand24[31:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.DATA.we = $rand25;
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.DATA.next = $rand26[31:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.DATA.we = $rand27;
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.DATA.next = $rand28[31:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.DATA.we = $rand29;
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.DATA.next = $rand30[31:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.DATA.we = $rand31;
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.DATA.next = $rand32[31:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.DATA.we = $rand33;
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.DEV_STATUS.next = $rand36[7:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.DEV_STATUS.we = $rand37;
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PROT_ERROR.next = $rand38[7:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PROT_ERROR.we = $rand39;
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.REC_REASON_CODE.next = $rand40[15:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.REC_REASON_CODE.we = $rand41;
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.HEARTBEAT.next = $rand42[15:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.HEARTBEAT.we = $rand43;
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS_LENGTH.next = $rand44[8:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS_LENGTH.we = $rand45;
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS.next = $rand46[6:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS.we = $rand47;
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.RESET_CTRL.next = $rand48[7:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.RESET_CTRL.we = $rand49;
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.FORCED_RECOVERY.next = $rand50[7:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.FORCED_RECOVERY.we = $rand51;
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.IF_CTRL.next = $rand52[7:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.IF_CTRL.we = $rand53;
   *hwif_in.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.CMS.next = $rand54[7:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.CMS.we = $rand55;
   *hwif_in.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.REC_IMG_SEL.next = $rand56[7:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.REC_IMG_SEL.we = $rand57;
   *hwif_in.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.ACTIVATE_REC_IMG.next = $rand58[7:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.ACTIVATE_REC_IMG.we = $rand59;
   *hwif_in.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.DEV_REC_STATUS.next = $rand60[3:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.DEV_REC_STATUS.we = $rand61;
   *hwif_in.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.REC_IMG_INDEX.next = $rand62[3:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.REC_IMG_INDEX.we = $rand63;
   *hwif_in.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.VENDOR_SPECIFIC_STATUS.next = $rand64[7:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.VENDOR_SPECIFIC_STATUS.we = $rand65;
   *hwif_in.I3C_EC.SecFwRecoveryIf.HW_STATUS.TEMP_CRITICAL.next = $rand66;
   *hwif_in.I3C_EC.SecFwRecoveryIf.HW_STATUS.TEMP_CRITICAL.we = $rand67;
   *hwif_in.I3C_EC.SecFwRecoveryIf.HW_STATUS.SOFT_ERR.next = $rand68;
   *hwif_in.I3C_EC.SecFwRecoveryIf.HW_STATUS.SOFT_ERR.we = $rand69;
   *hwif_in.I3C_EC.SecFwRecoveryIf.HW_STATUS.FATAL_ERR.next = $rand70;
   *hwif_in.I3C_EC.SecFwRecoveryIf.HW_STATUS.FATAL_ERR.we = $rand71;
   *hwif_in.I3C_EC.SecFwRecoveryIf.HW_STATUS.RESERVED_7_3.next = $rand72[4:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.HW_STATUS.RESERVED_7_3.we = $rand73;
   *hwif_in.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS.next = $rand74[7:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS.we = $rand75;
   *hwif_in.I3C_EC.SecFwRecoveryIf.HW_STATUS.CTEMP.next = $rand76[7:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.HW_STATUS.CTEMP.we = $rand77;
   *hwif_in.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS_LEN.next = $rand78[7:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS_LEN.we = $rand79;
   *hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.CMS.next = $rand80[7:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.CMS.we = $rand81;
   *hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.RESET.next = $rand82[7:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.RESET.we = $rand83;
   *hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.IMAGE_SIZE.next = $rand84[31:0];
   *hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.IMAGE_SIZE.we = $rand85;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PENDING_RX_NACK.next = $rand108;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PENDING_RX_NACK.we = $rand109;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DELAY_NACK.next = $rand110;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DELAY_NACK.we = $rand111;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.ACR_FSM_OP_SELECT.next = $rand112;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.ACR_FSM_OP_SELECT.we = $rand113;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PRIME_ACCEPT_GETACCCR.next = $rand114;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PRIME_ACCEPT_GETACCCR.we = $rand115;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP.next = $rand116;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP.we = $rand117;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE.next = $rand122;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE.we = $rand123;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE.next = $rand124;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE.we = $rand125;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE.next = $rand126;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE.we = $rand127;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE.next = $rand128;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE.we = $rand129;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR.next = $rand134[6:0];
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR.we = $rand135;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR_VALID.next = $rand136;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR_VALID.we = $rand137;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR.next = $rand138[6:0];
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR.we = $rand139;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR_VALID.next = $rand140;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR_VALID.we = $rand141;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.AC_CURRENT_OWN.next = $rand160;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.AC_CURRENT_OWN.we = $rand161;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.SIMPLE_CRR_STATUS.next = $rand162[2:0];
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.SIMPLE_CRR_STATUS.we = $rand163;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.HJ_REQ_STATUS.next = $rand164;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.HJ_REQ_STATUS.we = $rand165;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_REMAIN_STAT.next = $rand176;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_REMAIN_STAT.we = $rand177;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_PRIMED_STAT.next = $rand178;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_PRIMED_STAT.we = $rand179;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_FAIL_STAT.next = $rand180;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_FAIL_STAT.we = $rand181;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_M3_STAT.next = $rand182;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_M3_STAT.we = $rand183;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CRR_RESPONSE_STAT.next = $rand184;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CRR_RESPONSE_STAT.we = $rand185;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_DYN_ADDR_STAT.next = $rand186;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_DYN_ADDR_STAT.we = $rand187;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_NACKED_STAT.next = $rand188;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_NACKED_STAT.we = $rand189;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_OK_STAT.next = $rand190;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_OK_STAT.we = $rand191;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_ERR_STAT.next = $rand192;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_ERR_STAT.we = $rand193;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_OP_RSTACT_STAT.next = $rand194;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_OP_RSTACT_STAT.we = $rand195;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_PARAM_MODIFIED_STAT.next = $rand196;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_PARAM_MODIFIED_STAT.we = $rand197;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_UNHANDLED_NACK_STAT.next = $rand198;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_UNHANDLED_NACK_STAT.we = $rand199;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_FATAL_RSTDAA_ERR_STAT.next = $rand200;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_FATAL_RSTDAA_ERR_STAT.we = $rand201;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_REMAIN_SIGNAL_EN.next = $rand204;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_REMAIN_SIGNAL_EN.we = $rand205;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_PRIMED_SIGNAL_EN.next = $rand206;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_PRIMED_SIGNAL_EN.we = $rand207;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_FAIL_SIGNAL_EN.next = $rand208;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_FAIL_SIGNAL_EN.we = $rand209;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_M3_SIGNAL_EN.next = $rand210;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_M3_SIGNAL_EN.we = $rand211;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CRR_RESPONSE_SIGNAL_EN.next = $rand212;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CRR_RESPONSE_SIGNAL_EN.we = $rand213;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_DYN_ADDR_SIGNAL_EN.next = $rand214;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_DYN_ADDR_SIGNAL_EN.we = $rand215;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_NACKED_SIGNAL_EN.next = $rand216;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_NACKED_SIGNAL_EN.we = $rand217;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_OK_SIGNAL_EN.next = $rand218;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_OK_SIGNAL_EN.we = $rand219;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_ERR_SIGNAL_EN.next = $rand220;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_ERR_SIGNAL_EN.we = $rand221;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_OP_RSTACT_SIGNAL_EN.next = $rand222;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_OP_RSTACT_SIGNAL_EN.we = $rand223;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_PARAM_MODIFIED_SIGNAL_EN.next = $rand224;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_PARAM_MODIFIED_SIGNAL_EN.we = $rand225;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_UNHANDLED_NACK_SIGNAL_EN.next = $rand226;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_UNHANDLED_NACK_SIGNAL_EN.we = $rand227;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_FATAL_RSTDAA_ERR_SIGNAL_EN.next = $rand228;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_FATAL_RSTDAA_ERR_SIGNAL_EN.we = $rand229;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CRR_RESPONSE_FORCE.next = $rand230;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CRR_RESPONSE_FORCE.we = $rand231;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_DYN_ADDR_FORCE.next = $rand232;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_DYN_ADDR_FORCE.we = $rand233;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_NACKED_FORCE.next = $rand234;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_NACKED_FORCE.we = $rand235;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_OK_FORCE.next = $rand236;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_OK_FORCE.we = $rand237;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_ERR_FORCE.next = $rand238;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_ERR_FORCE.we = $rand239;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_PARAM_MODIFIED_FORCE.next = $rand242;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_PARAM_MODIFIED_FORCE.we = $rand243;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_UNHANDLED_NACK_FORCE.next = $rand244;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_UNHANDLED_NACK_FORCE.we = $rand245;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_FATAL_RSTDAA_ERR_FORCE.next = $rand246;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_FATAL_RSTDAA_ERR_FORCE.we = $rand247;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP1_BUS_CONFIG.next = $rand248[2:0];
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP1_BUS_CONFIG.we = $rand249;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP2_DEV_INTERACT.next = $rand250[3:0];
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP2_DEV_INTERACT.we = $rand251;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_PERIPHERAL.next = $rand254[7:0];
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_PERIPHERAL.we = $rand255;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_TARGET.next = $rand256[7:0];
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_TARGET.we = $rand257;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_DYNAMIC_ADDR.next = $rand258;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_DYNAMIC_ADDR.we = $rand259;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR.next = $rand260[6:0];
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR.we = $rand261;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR_VALID.next = $rand262;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR_VALID.we = $rand263;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR.next = $rand264[6:0];
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR.we = $rand265;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR_VALID.next = $rand266;
   *hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR_VALID.we = $rand267;
   *hwif_in.I3C_EC.StdbyCtrlMode.__rsvd_3.__rsvd.next = $rand268[31:0];
   *hwif_in.I3C_EC.StdbyCtrlMode.__rsvd_3.__rsvd.we = $rand269;
   *hwif_in.I3C_EC.TTI.CONTROL.HJ_EN.next = $rand274;
   *hwif_in.I3C_EC.TTI.CONTROL.HJ_EN.we = $rand275;
   *hwif_in.I3C_EC.TTI.CONTROL.CRR_EN.next = $rand276;
   *hwif_in.I3C_EC.TTI.CONTROL.CRR_EN.we = $rand277;
   *hwif_in.I3C_EC.TTI.CONTROL.IBI_EN.next = $rand278;
   *hwif_in.I3C_EC.TTI.CONTROL.IBI_EN.we = $rand279;
   *hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT.next = $rand298;
   *hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT.we = $rand299;
   *hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT.next = $rand300;
   *hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT.we = $rand301;
   *hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT.next = $rand302;
   *hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT.we = $rand303;
   *hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT.next = $rand304;
   *hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT.we = $rand305;
   *hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TX_DATA_THLD_STAT.next = $rand306;
   *hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TX_DATA_THLD_STAT.we = $rand307;
   *hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.RX_DATA_THLD_STAT.next = $rand308;
   *hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.RX_DATA_THLD_STAT.we = $rand309;
   *hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_THLD_STAT.next = $rand310;
   *hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_THLD_STAT.we = $rand311;
   *hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_THLD_STAT.next = $rand312;
   *hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_THLD_STAT.we = $rand313;
   *hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.IBI_THLD_STAT.next = $rand314;
   *hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.IBI_THLD_STAT.we = $rand315;
   *hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.IBI_DONE.next = $rand316;
   *hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.IBI_DONE.we = $rand317;
   *hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.PENDING_INTERRUPT.next = $rand318[3:0];
   *hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.PENDING_INTERRUPT.we = $rand319;
   *hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT.next = $rand320;
   *hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT.we = $rand321;
   *hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_COMPLETE.next = $rand322;
   *hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_COMPLETE.we = $rand323;
   *hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT.next = $rand324;
   *hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT.we = $rand325;
   *hwif_in.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.next = $rand398[7:0];
   *hwif_in.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.we = $rand399;
   *hwif_in.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.next = $rand400[7:0];
   *hwif_in.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.we = $rand401;
   *hwif_in.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.next = $rand402[7:0];
   *hwif_in.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.we = $rand403;
   *hwif_in.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_PAYLOAD_DONE.next = $rand422;
   *hwif_in.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_PAYLOAD_DONE.we = $rand423;
   *hwif_in.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.DEVICE_RESET_CTRL.next = $rand424[7:0];
   *hwif_in.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.DEVICE_RESET_CTRL.we = $rand425;
   *hwif_in.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.RECOVERY_CTRL_ACTIVATE_REC_IMG.next = $rand426[7:0];
   *hwif_in.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.RECOVERY_CTRL_ACTIVATE_REC_IMG.we = $rand427;
   *hwif_in.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.INDIRECT_FIFO_CTRL_RESET.next = $rand428[7:0];
   *hwif_in.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.INDIRECT_FIFO_CTRL_RESET.we = $rand429;

   I3CCSR I3CCSR(*clk, $reset, $s_apb_psel, $s_apb_penable, $s_apb_pwrite, $s_apb_paddr[8:0], $s_apb_pwdata[31:0], $s_apb_pready, $s_apb_prdata[31:0], $s_apb_pslverr, *hwif_in, *hwif_out);

   *passed = *cyc_cnt > 100;
   *failed = 1'b0;


   /top_viz
      /table
         \viz_js
            box: {width: 26480, height:40, rx:15, ry:15, fill:"#aaaaaa"},
            where: {left: 2750, top: -80}
         /number[50:0]
            \viz_js
               box: {strokeWidth: 0},
               init() {
                  let ret = {}
                  let n = this.getIndex("number") + ""
                  ret.num = new fabric.Text(n, {
                     fontSize: 22,
                     originX: "center",
                     originY: "center",
                     fontFamily: "monospace",
                  })
                  return ret
               },
               where: {left: 229.0, top: 9.0},
               layout: {left: 520}
      \viz_js
         box: {strokeWidth: 0},
         lib: {
            init_field: (label, value, action) => {
               let ret = {}
               ret.label = new fabric.Text("", {
                  ...label,
                  originX: "center",
                  originY: "center",
                  fontFamily: "monospace",
               })
               ret.value = new fabric.Text("", {
                  ...value,
                  originX: "center",
                  originY: "center",
                  fontFamily: "monospace",
               })
               ret.action = new fabric.Text("", {
                  ...action,
                  originX: "center",
                  originY: "center",
                  fontFamily: "monospace",
               })
               return ret
            },
            render_field: (obj, field_value, name, load_next, sw_write) => {
               obj.value.set({text: field_value})
               obj.label.set({fill: "black", text: name})
               if (load_next) {
                  obj.value.set({fill: "blue"})
                  if (sw_write) {
                     obj.action.set({fill: "black", text: "sw wr"})
                  } else {
                     obj.action.set({fill: "black", text: "hw wr"})
                  }
                  return `#77DD77`
               } else {
                  obj.value.set({fill: "black"})
                  obj.action.set({fill: "black", text: ""})
                  return `#F3F5A9`
               }
            },
            init_register: (words, box, label, value) => {
               ret = {}
               words.forEach((border, index) => {
                  ret["border" + index] = new fabric.Rect({
                     ...border,
                     stroke: "#AAAAAA",
                     fill: null,
                  })
               })
               ret.box = new fabric.Rect({
                  ...box,
                  strokeWidth: 1,
                  fill: "#F5A7A6",
                  stroke: "black",
                  rx: 8,
                  ry: 8,
               })
               ret.label = new fabric.Text("", {
                  ...label,
                  originX: "center",
                  originY: "center",
                  fontFamily: "monospace",
               })
               ret.value = new fabric.Text("", {
                  ...value,
                  originX: "center",
                  originY: "center",
                  fontFamily: "monospace",
               })
               return ret
            },
            render_register: (obj, name, register_size, register_value, number_of_words, load_nexts, fields, action_signals) => {
               let create_slot = (slot_top, slot_left, word) => {
                  let sw_write = action_signals[0].step(1).asInt() & action_signals[1].step(1).asInt()
                  let action = ""
                  if (sw_write) {
                     action = "sw wr"
                  } else {
                     action = "hw wr"
                  }
                  objects = []
                  objects.push(new fabric.Rect({
                     width: 480,
                     height: 110,
                     left: slot_left,
                     top: slot_top,
                     strokeWidth: 1,
                     fill: "#F3F5A9",
                     stroke: "#A9AB61",
                  }))
                  objects.push(new fabric.Rect({
                     width: 480,
                     height: 50,
                     left: slot_left,
                     top: slot_top + 60,
                     strokeWidth: 1,
                     fill: "#F3F5A9",
                     stroke: "#A9AB61",
                  }))
                  objects.push(new fabric.Text(action, {
                     fontSize: 10,
                     left: slot_left + 240.0,
                     top: slot_top + 85.0,
                     originX: "center",
                     originY: "center",
                     fontFamily: "monospace",
                  }))
                  fields[word].forEach((field, index) => {
                     let value = ""
                     if (field.width > 3) {
                        value = `${field.width}h''${field.value.step(1).asHexStr()}`
                     } else if (field.width > 1) {
                        value = `${field.width}b''${field.value.step(1).asBinaryStr()}`
                     } else {
                        value = field.value.step(1).asBinaryStr()
                     }
                     objects.push(new fabric.Rect({
                        width: field.width * 15,
                        height: 60,
                        left: slot_left + field.left * 15,
                        top: slot_top,
                        strokeWidth: 1,
                        fill: "#F3F5A9",
                        stroke: "#A9AB61",
                     }))
                     objects.push(new fabric.Text(value, {
                        fontSize: 8,
                        left: slot_left + (field.left + field.width/2) * 15,
                        top: slot_top + 30.0,
                        originX: "center",
                        originY: "center",
                        fontFamily: "monospace",
                     }))
                  });
                  objects.push(new fabric.Rect({
                     width: 480,
                     height: 110,
                     left: slot_left,
                     top: slot_top,
                     strokeWidth: 1,
                     fill: "transparent",
                     stroke: "black",
                  }))
                  return objects
               }
               obj.label.set({fill: "black", text: name})
               obj.value.set({fill: "black", text: `${register_size}''h` + register_value})
               let ret = []
               for (let word = 0; word < number_of_words; word++) {
                  for (let i = 0; i < 51; i++) {
                     if (load_nexts[word].step(1).asBool()) {
                        ret.push(...create_slot(word * 130, 520 * i + 2110, word))
                     }
                  }
               }
               return ret
            },
            init_node: (box, label) => {
               ret = {}
               ret.box = new fabric.Rect({
                  ...box,
                  strokeWidth: 1,
                  stroke: "black",
                  rx: 8,
                  ry: 8,
               })
               ret.label = new fabric.Text("", {
                  ...label,
                  originX: "center",
                  originY: "center",
                  fontFamily: "monospace",
               })
               ret.label.rotate(-90)
               return ret
            }
         }
      /idccsr_a
         \viz_js
            box: {strokeWidth: 0},
            init() {
               return '/top_viz'.init_node({
                  width: 100,
                  height: 12710,
                  fill: "#D0E4EE",
               }, {
                  top: 6355.0,
                  left: 50.0,
                  fontSize: 30,
               })
            },
            render() {
               let obj = this.getObjects()
               obj.label.set({fill: "black", text: "I3CCSR"})
            },
            where: {left: 160, top: -20}
         /rst_ni_s
         /idc_ec_r
            \viz_js
               box: {strokeWidth: 0},
               init() {
                  return '/top_viz'.init_node({
                     width: 100,
                     height: 12710,
                     fill: "#F5CF9F",
                  }, {
                     top: 6355.0,
                     left: 50.0,
                     fontSize: 30,
                  })
               },
               render() {
                  let obj = this.getObjects()
                  obj.label.set({fill: "black", text: "I3C_EC"})
               },
               where: {left: 160, top: -20}
            /secfwrecoveryif_r
               \viz_js
                  box: {strokeWidth: 0},
                  init() {
                     return '/top_viz'.init_node({
                        width: 100,
                        height: 3750,
                        fill: "#F5CF9F",
                     }, {
                        top: 1875.0,
                        left: 50.0,
                        fontSize: 30,
                     })
                  },
                  render() {
                     let obj = this.getObjects()
                     obj.label.set({fill: "black", text: "SecFwRecoveryIf"})
                  },
                  where: {left: 160, top: -20}
               /extcap_header_r
                  $register_value[31:0] = {8'b00000000, /cap_length_f$field_value, /cap_id_f$field_value};
                  $register_load_next0 = /cap_length_f$load_next||/cap_id_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/cap_length_f$field_value', left: 8, width: 16}, {value: '/cap_id_f$field_value', left: 24, width: 8}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "EXTCAP_HEADER", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: -20}
                  /cap_id_f
                     $field_value[7:0] = 0;
                     $load_next = 0;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "CAP_ID", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1620, top: -10}
                  /cap_length_f
                     $field_value[15:0] = 0;
                     $load_next = 0;
                     \viz_js
                        box: {width: 800, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 400.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 400.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 400.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "16''h" + '$field_value'.asHexStr(), "CAP_LENGTH", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 820, top: -10}
               /prot_cap_d0_r
                  $register_value[31:0] = {/rec_magic_string_d0_f$field_value};
                  $register_load_next0 = /rec_magic_string_d0_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/rec_magic_string_d0_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "PROT_CAP_0", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 120}
                  /rec_magic_string_d0_f
                     $field_value[31:0] = 0;
                     $load_next = 0;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "REC_MAGIC_STRING_0", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /prot_cap_d1_r
                  $register_value[31:0] = {/rec_magic_string_d1_f$field_value};
                  $register_load_next0 = /rec_magic_string_d1_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/rec_magic_string_d1_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "PROT_CAP_1", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 260}
                  /rec_magic_string_d1_f
                     $field_value[31:0] = 0;
                     $load_next = 0;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "REC_MAGIC_STRING_1", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /prot_cap_d2_r
                  $register_value[31:0] = {/agent_caps_f$field_value, /rec_prot_version_f$field_value};
                  $register_load_next0 = /agent_caps_f$load_next||/rec_prot_version_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/agent_caps_f$field_value', left: 0, width: 16}, {value: '/rec_prot_version_f$field_value', left: 16, width: 16}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "PROT_CAP_2", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 400}
                  /rec_prot_version_f
                     $field_value[15:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.REC_PROT_VERSION.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.REC_PROT_VERSION.load_next;
                     \viz_js
                        box: {width: 800, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 400.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 400.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 400.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "16''h" + '$field_value'.asHexStr(), "REC_PROT_VERSION", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1220, top: -10}
                  /agent_caps_f
                     $field_value[15:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.AGENT_CAPS.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.AGENT_CAPS.load_next;
                     \viz_js
                        box: {width: 800, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 400.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 400.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 400.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "16''h" + '$field_value'.asHexStr(), "AGENT_CAPS", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /prot_cap_d3_r
                  $register_value[31:0] = {8'b00000000, /heartbeat_period_f$field_value, /max_resp_time_f$field_value, /num_of_cms_regions_f$field_value};
                  $register_load_next0 = /heartbeat_period_f$load_next||/max_resp_time_f$load_next||/num_of_cms_regions_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/heartbeat_period_f$field_value', left: 8, width: 8}, {value: '/max_resp_time_f$field_value', left: 16, width: 8}, {value: '/num_of_cms_regions_f$field_value', left: 24, width: 8}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "PROT_CAP_3", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 540}
                  /num_of_cms_regions_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.NUM_OF_CMS_REGIONS.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.NUM_OF_CMS_REGIONS.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "NUM_OF_CMS_REGIONS", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1620, top: -10}
                  /max_resp_time_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.MAX_RESP_TIME.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.MAX_RESP_TIME.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "MAX_RESP_TIME", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1220, top: -10}
                  /heartbeat_period_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.HEARTBEAT_PERIOD.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.HEARTBEAT_PERIOD.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "HEARTBEAT_PERIOD", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 820, top: -10}
               /device_id_d0_r
                  $register_value[31:0] = {/data_f$field_value, /vendor_specific_str_length_f$field_value, /desc_type_f$field_value};
                  $register_load_next0 = /data_f$load_next||/vendor_specific_str_length_f$load_next||/desc_type_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/data_f$field_value', left: 0, width: 16}, {value: '/vendor_specific_str_length_f$field_value', left: 16, width: 8}, {value: '/desc_type_f$field_value', left: 24, width: 8}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "DEVICE_ID_0", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 680}
                  /desc_type_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DESC_TYPE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DESC_TYPE.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "DESC_TYPE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1620, top: -10}
                  /vendor_specific_str_length_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.VENDOR_SPECIFIC_STR_LENGTH.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.VENDOR_SPECIFIC_STR_LENGTH.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "VENDOR_SPECIFIC_STR_LENGTH", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1220, top: -10}
                  /data_f
                     $field_value[15:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DATA.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DATA.load_next;
                     \viz_js
                        box: {width: 800, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 400.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 400.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 400.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "16''h" + '$field_value'.asHexStr(), "DATA", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /device_id_d1_r
                  $register_value[31:0] = {/data_f$field_value};
                  $register_load_next0 = /data_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/data_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "DEVICE_ID_1", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 820}
                  /data_f
                     $field_value[31:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.DATA.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.DATA.load_next;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "DATA", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /device_id_d2_r
                  $register_value[31:0] = {/data_f$field_value};
                  $register_load_next0 = /data_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/data_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "DEVICE_ID_2", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 960}
                  /data_f
                     $field_value[31:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.DATA.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.DATA.load_next;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "DATA", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /device_id_d3_r
                  $register_value[31:0] = {/data_f$field_value};
                  $register_load_next0 = /data_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/data_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "DEVICE_ID_3", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 1100}
                  /data_f
                     $field_value[31:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.DATA.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.DATA.load_next;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "DATA", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /device_id_d4_r
                  $register_value[31:0] = {/data_f$field_value};
                  $register_load_next0 = /data_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/data_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "DEVICE_ID_4", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 1240}
                  /data_f
                     $field_value[31:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.DATA.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.DATA.load_next;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "DATA", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /device_id_d5_r
                  $register_value[31:0] = {/data_f$field_value};
                  $register_load_next0 = /data_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/data_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "DEVICE_ID_5", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 1380}
                  /data_f
                     $field_value[31:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.DATA.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.DATA.load_next;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "DATA", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /device_id_reserved_r
                  $register_value[31:0] = {/data_f$field_value};
                  $register_load_next0 = /data_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/data_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "DEVICE_ID_RESERVED", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 1520}
                  /data_f
                     $field_value[31:0] = 0;
                     $load_next = 0;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "DATA", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /device_status_d0_r
                  $register_value[31:0] = {/rec_reason_code_f$field_value, /prot_error_f$field_value, /dev_status_f$field_value};
                  $register_load_next0 = /rec_reason_code_f$load_next||/prot_error_f$load_next||/dev_status_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/rec_reason_code_f$field_value', left: 0, width: 16}, {value: '/prot_error_f$field_value', left: 16, width: 8}, {value: '/dev_status_f$field_value', left: 24, width: 8}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "DEVICE_STATUS_0", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 1660}
                  /dev_status_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.DEV_STATUS.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.DEV_STATUS.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "DEV_STATUS", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1620, top: -10}
                  /prot_error_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PROT_ERROR.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PROT_ERROR.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "PROT_ERROR", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1220, top: -10}
                  /rec_reason_code_f
                     $field_value[15:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.REC_REASON_CODE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.REC_REASON_CODE.load_next;
                     \viz_js
                        box: {width: 800, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 400.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 400.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 400.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "16''h" + '$field_value'.asHexStr(), "REC_REASON_CODE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /device_status_d1_r
                  $register_value[31:0] = {/vendor_status_f$field_value, /vendor_status_length_f$field_value, /heartbeat_f$field_value};
                  $register_load_next0 = /vendor_status_f$load_next||/vendor_status_length_f$load_next||/heartbeat_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/vendor_status_f$field_value', left: 0, width: 7}, {value: '/vendor_status_length_f$field_value', left: 7, width: 9}, {value: '/heartbeat_f$field_value', left: 16, width: 16}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "DEVICE_STATUS_1", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 1800}
                  /heartbeat_f
                     $field_value[15:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.HEARTBEAT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.HEARTBEAT.load_next;
                     \viz_js
                        box: {width: 800, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 400.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 400.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 400.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "16''h" + '$field_value'.asHexStr(), "HEARTBEAT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1220, top: -10}
                  /vendor_status_length_f
                     $field_value[8:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS_LENGTH.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS_LENGTH.load_next;
                     \viz_js
                        box: {width: 450, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 225.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 225.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 225.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "9''h" + '$field_value'.asHexStr(), "VENDOR_STATUS_LENGTH", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 770, top: -10}
                  /vendor_status_f
                     $field_value[6:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS.load_next;
                     \viz_js
                        box: {width: 350, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 175.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 175.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 175.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "7''h" + '$field_value'.asHexStr(), "VENDOR_STATUS", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /device_reset_r
                  $register_value[31:0] = {8'b00000000, /if_ctrl_f$field_value, /forced_recovery_f$field_value, /reset_ctrl_f$field_value};
                  $register_load_next0 = /if_ctrl_f$load_next||/forced_recovery_f$load_next||/reset_ctrl_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/if_ctrl_f$field_value', left: 8, width: 8}, {value: '/forced_recovery_f$field_value', left: 16, width: 8}, {value: '/reset_ctrl_f$field_value', left: 24, width: 8}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "DEVICE_RESET", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 1940}
                  /reset_ctrl_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.RESET_CTRL.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.RESET_CTRL.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "RESET_CTRL", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1620, top: -10}
                  /forced_recovery_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.FORCED_RECOVERY.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.FORCED_RECOVERY.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "FORCED_RECOVERY", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1220, top: -10}
                  /if_ctrl_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.IF_CTRL.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.IF_CTRL.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "IF_CTRL", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 820, top: -10}
               /recovery_ctrl_r
                  $register_value[31:0] = {8'b00000000, /activate_rec_img_f$field_value, /rec_img_sel_f$field_value, /cms_f$field_value};
                  $register_load_next0 = /activate_rec_img_f$load_next||/rec_img_sel_f$load_next||/cms_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/activate_rec_img_f$field_value', left: 8, width: 8}, {value: '/rec_img_sel_f$field_value', left: 16, width: 8}, {value: '/cms_f$field_value', left: 24, width: 8}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "RECOVERY_CTRL", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 2080}
                  /cms_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.CMS.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.CMS.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "CMS", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1620, top: -10}
                  /rec_img_sel_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.REC_IMG_SEL.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.REC_IMG_SEL.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "REC_IMG_SEL", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1220, top: -10}
                  /activate_rec_img_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.ACTIVATE_REC_IMG.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.ACTIVATE_REC_IMG.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "ACTIVATE_REC_IMG", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 820, top: -10}
               /recovery_status_r
                  $register_value[31:0] = {16'b0000000000000000, /vendor_specific_status_f$field_value, /rec_img_index_f$field_value, /dev_rec_status_f$field_value};
                  $register_load_next0 = /vendor_specific_status_f$load_next||/rec_img_index_f$load_next||/dev_rec_status_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/vendor_specific_status_f$field_value', left: 16, width: 8}, {value: '/rec_img_index_f$field_value', left: 24, width: 4}, {value: '/dev_rec_status_f$field_value', left: 28, width: 4}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "RECOVERY_STATUS", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 2220}
                  /dev_rec_status_f
                     $field_value[3:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.DEV_REC_STATUS.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.DEV_REC_STATUS.load_next;
                     \viz_js
                        box: {width: 200, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 100.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 100.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 100.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "4''h" + '$field_value'.asHexStr(), "DEV_REC_STATUS", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1820, top: -10}
                  /rec_img_index_f
                     $field_value[3:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.REC_IMG_INDEX.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.REC_IMG_INDEX.load_next;
                     \viz_js
                        box: {width: 200, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 100.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 100.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 100.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "4''h" + '$field_value'.asHexStr(), "REC_IMG_INDEX", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1620, top: -10}
                  /vendor_specific_status_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.VENDOR_SPECIFIC_STATUS.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.VENDOR_SPECIFIC_STATUS.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "VENDOR_SPECIFIC_STATUS", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1220, top: -10}
               /hw_status_r
                  $register_value[31:0] = {/vendor_hw_status_len_f$field_value, /ctemp_f$field_value, /vendor_hw_status_f$field_value, /reserved_d7_d3_f$field_value, /fatal_err_f$field_value, /soft_err_f$field_value, /temp_critical_f$field_value};
                  $register_load_next0 = /vendor_hw_status_len_f$load_next||/ctemp_f$load_next||/vendor_hw_status_f$load_next||/reserved_d7_d3_f$load_next||/fatal_err_f$load_next||/soft_err_f$load_next||/temp_critical_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/vendor_hw_status_len_f$field_value', left: 0, width: 8}, {value: '/ctemp_f$field_value', left: 8, width: 8}, {value: '/vendor_hw_status_f$field_value', left: 16, width: 8}, {value: '/reserved_d7_d3_f$field_value', left: 24, width: 5}, {value: '/fatal_err_f$field_value', left: 29, width: 1}, {value: '/soft_err_f$field_value', left: 30, width: 1}, {value: '/temp_critical_f$field_value', left: 31, width: 1}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "HW_STATUS", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 2360}
                  /temp_critical_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.TEMP_CRITICAL.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.TEMP_CRITICAL.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "TEMP_CRITICAL", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1970, top: -10}
                  /soft_err_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.SOFT_ERR.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.SOFT_ERR.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "SOFT_ERR", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1920, top: -10}
                  /fatal_err_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.FATAL_ERR.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.FATAL_ERR.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "FATAL_ERR", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1870, top: -10}
                  /reserved_d7_d3_f
                     $field_value[4:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.RESERVED_7_3.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.RESERVED_7_3.load_next;
                     \viz_js
                        box: {width: 250, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 125.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 125.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 125.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "5''h" + '$field_value'.asHexStr(), "RESERVED_7_3", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1620, top: -10}
                  /vendor_hw_status_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "VENDOR_HW_STATUS", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1220, top: -10}
                  /ctemp_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.CTEMP.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.CTEMP.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "CTEMP", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 820, top: -10}
                  /vendor_hw_status_len_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS_LEN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS_LEN.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "VENDOR_HW_STATUS_LEN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /indirect_fifo_ctrl_d0_r
                  $register_value[31:0] = {16'b0000000000000000, /reset_f$field_value, /cms_f$field_value};
                  $register_load_next0 = /reset_f$load_next||/cms_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/reset_f$field_value', left: 16, width: 8}, {value: '/cms_f$field_value', left: 24, width: 8}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "INDIRECT_FIFO_CTRL_0", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 2500}
                  /cms_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.CMS.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.CMS.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "CMS", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1620, top: -10}
                  /reset_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.RESET.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.RESET.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "RESET", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1220, top: -10}
               /indirect_fifo_ctrl_d1_r
                  $register_value[31:0] = {/image_size_f$field_value};
                  $register_load_next0 = /image_size_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/image_size_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "INDIRECT_FIFO_CTRL_1", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 2640}
                  /image_size_f
                     $field_value[31:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.IMAGE_SIZE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.IMAGE_SIZE.load_next;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "IMAGE_SIZE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /indirect_fifo_status_d0_r
                  $register_value[31:0] = {21'b000000000000000000000, /region_type_f$field_value, 6'b000000, /full_f$field_value, /empty_f$field_value};
                  $register_load_next0 = /region_type_f$load_next||/full_f$load_next||/empty_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/region_type_f$field_value', left: 21, width: 3}, {value: '/full_f$field_value', left: 30, width: 1}, {value: '/empty_f$field_value', left: 31, width: 1}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "INDIRECT_FIFO_STATUS_0", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 2780}
                  /empty_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.EMPTY.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.EMPTY.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "EMPTY", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1970, top: -10}
                  /full_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.FULL.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.FULL.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "FULL", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1920, top: -10}
                  /region_type_f
                     $field_value[2:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.REGION_TYPE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.REGION_TYPE.load_next;
                     \viz_js
                        box: {width: 150, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 75.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 75.0,
                              fontSize: 32,
                           }, {
                              top: 110,
                              left: 75.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "3''b" + '$field_value'.asBinaryStr(), "REGION_TYPE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1470, top: -10}
               /indirect_fifo_status_d1_r
                  $register_value[31:0] = {/write_index_f$field_value};
                  $register_load_next0 = /write_index_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/write_index_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "INDIRECT_FIFO_STATUS_1", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 2920}
                  /write_index_f
                     $field_value[31:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1.WRITE_INDEX.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1.WRITE_INDEX.load_next;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "WRITE_INDEX", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /indirect_fifo_status_d2_r
                  $register_value[31:0] = {/read_index_f$field_value};
                  $register_load_next0 = /read_index_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/read_index_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "INDIRECT_FIFO_STATUS_2", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 3060}
                  /read_index_f
                     $field_value[31:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2.READ_INDEX.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2.READ_INDEX.load_next;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "READ_INDEX", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /indirect_fifo_status_d3_r
                  $register_value[31:0] = {/fifo_size_f$field_value};
                  $register_load_next0 = /fifo_size_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/fifo_size_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "INDIRECT_FIFO_STATUS_3", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 3200}
                  /fifo_size_f
                     $field_value[31:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3.FIFO_SIZE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3.FIFO_SIZE.load_next;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "FIFO_SIZE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /indirect_fifo_status_d4_r
                  $register_value[31:0] = {/max_transfer_size_f$field_value};
                  $register_load_next0 = /max_transfer_size_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/max_transfer_size_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "INDIRECT_FIFO_STATUS_4", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 3340}
                  /max_transfer_size_f
                     $field_value[31:0] = 0;
                     $load_next = 0;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "MAX_TRANSFER_SIZE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /indirect_fifo_reserved_r
                  $register_value[31:0] = {/data_f$field_value};
                  $register_load_next0 = /data_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/data_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "INDIRECT_FIFO_RESERVED", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 3480}
                  /data_f
                     $field_value[31:0] = I3CCSR.field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_RESERVED.DATA.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_RESERVED.DATA.load_next;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "DATA", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /indirect_fifo_data_r
                  $register_value[31:0] = {/data_f$field_value};
                  $register_load_next0 = /data_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/data_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "INDIRECT_FIFO_DATA", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 3620}
                  /data_f
                     $field_value[31:0] = 0;
                     $load_next = 0;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "DATA", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
            /stdbyctrlmode_r
               \viz_js
                  box: {strokeWidth: 0},
                  init() {
                     return '/top_viz'.init_node({
                        width: 100,
                        height: 2210,
                        fill: "#F5CF9F",
                     }, {
                        top: 1105.0,
                        left: 50.0,
                        fontSize: 30,
                     })
                  },
                  render() {
                     let obj = this.getObjects()
                     obj.label.set({fill: "black", text: "StdbyCtrlMode"})
                  },
                  where: {left: 160, top: 4460}
               /extcap_header_r
                  $register_value[31:0] = {8'b00000000, /cap_length_f$field_value, /cap_id_f$field_value};
                  $register_load_next0 = /cap_length_f$load_next||/cap_id_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/cap_length_f$field_value', left: 8, width: 16}, {value: '/cap_id_f$field_value', left: 24, width: 8}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "EXTCAP_HEADER", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: -20}
                  /cap_id_f
                     $field_value[7:0] = 0;
                     $load_next = 0;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "CAP_ID", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1620, top: -10}
                  /cap_length_f
                     $field_value[15:0] = 0;
                     $load_next = 0;
                     \viz_js
                        box: {width: 800, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 400.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 400.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 400.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "16''h" + '$field_value'.asHexStr(), "CAP_LENGTH", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 820, top: -10}
               /stby_cr_control_r
                  $register_value[31:0] = {/stby_cr_enable_init_f$field_value, 9'b000000000, /rstact_defbyte_d02_f$field_value, 4'b0000, /daa_entdaa_enable_f$field_value, /daa_setdasa_enable_f$field_value, /daa_setaasa_enable_f$field_value, /target_xact_enable_f$field_value, 1'b0, /bast_ccc_ibi_ring_f$field_value, 2'b00, /cr_request_send_f$field_value, /handoff_deep_sleep_f$field_value, /prime_accept_getacccr_f$field_value, /acr_fsm_op_select_f$field_value, /handoff_delay_nack_f$field_value, /pending_rx_nack_f$field_value};
                  $register_load_next0 = /stby_cr_enable_init_f$load_next||/rstact_defbyte_d02_f$load_next||/daa_entdaa_enable_f$load_next||/daa_setdasa_enable_f$load_next||/daa_setaasa_enable_f$load_next||/target_xact_enable_f$load_next||/bast_ccc_ibi_ring_f$load_next||/cr_request_send_f$load_next||/handoff_deep_sleep_f$load_next||/prime_accept_getacccr_f$load_next||/acr_fsm_op_select_f$load_next||/handoff_delay_nack_f$load_next||/pending_rx_nack_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/stby_cr_enable_init_f$field_value', left: 0, width: 2}, {value: '/rstact_defbyte_d02_f$field_value', left: 11, width: 1}, {value: '/daa_entdaa_enable_f$field_value', left: 16, width: 1}, {value: '/daa_setdasa_enable_f$field_value', left: 17, width: 1}, {value: '/daa_setaasa_enable_f$field_value', left: 18, width: 1}, {value: '/target_xact_enable_f$field_value', left: 19, width: 1}, {value: '/bast_ccc_ibi_ring_f$field_value', left: 21, width: 3}, {value: '/cr_request_send_f$field_value', left: 26, width: 1}, {value: '/handoff_deep_sleep_f$field_value', left: 27, width: 1}, {value: '/prime_accept_getacccr_f$field_value', left: 28, width: 1}, {value: '/acr_fsm_op_select_f$field_value', left: 29, width: 1}, {value: '/handoff_delay_nack_f$field_value', left: 30, width: 1}, {value: '/pending_rx_nack_f$field_value', left: 31, width: 1}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "STBY_CR_CONTROL", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 120}
                  /pending_rx_nack_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PENDING_RX_NACK.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PENDING_RX_NACK.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "PENDING_RX_NACK", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1970, top: -10}
                  /handoff_delay_nack_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DELAY_NACK.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DELAY_NACK.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "HANDOFF_DELAY_NACK", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1920, top: -10}
                  /acr_fsm_op_select_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.ACR_FSM_OP_SELECT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.ACR_FSM_OP_SELECT.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "ACR_FSM_OP_SELECT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1870, top: -10}
                  /prime_accept_getacccr_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PRIME_ACCEPT_GETACCCR.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PRIME_ACCEPT_GETACCCR.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "PRIME_ACCEPT_GETACCCR", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1820, top: -10}
                  /handoff_deep_sleep_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "HANDOFF_DEEP_SLEEP", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1770, top: -10}
                  /cr_request_send_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.CR_REQUEST_SEND.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.CR_REQUEST_SEND.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "CR_REQUEST_SEND", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1720, top: -10}
                  /bast_ccc_ibi_ring_f
                     $field_value[2:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.BAST_CCC_IBI_RING.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.BAST_CCC_IBI_RING.load_next;
                     \viz_js
                        box: {width: 150, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 75.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 75.0,
                              fontSize: 32,
                           }, {
                              top: 110,
                              left: 75.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "3''b" + '$field_value'.asBinaryStr(), "BAST_CCC_IBI_RING", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1470, top: -10}
                  /target_xact_enable_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "TARGET_XACT_ENABLE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1370, top: -10}
                  /daa_setaasa_enable_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "DAA_SETAASA_ENABLE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1320, top: -10}
                  /daa_setdasa_enable_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "DAA_SETDASA_ENABLE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1270, top: -10}
                  /daa_entdaa_enable_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "DAA_ENTDAA_ENABLE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1220, top: -10}
                  /rstact_defbyte_d02_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.RSTACT_DEFBYTE_02.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.RSTACT_DEFBYTE_02.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "RSTACT_DEFBYTE_02", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 970, top: -10}
                  /stby_cr_enable_init_f
                     $field_value[1:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.STBY_CR_ENABLE_INIT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.STBY_CR_ENABLE_INIT.load_next;
                     \viz_js
                        box: {width: 100, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 50.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 50.0,
                              fontSize: 32,
                           }, {
                              top: 110,
                              left: 50.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "2''b" + '$field_value'.asBinaryStr(), "STBY_CR_ENABLE_INIT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /stby_cr_device_addr_r
                  $register_value[31:0] = {/dynamic_addr_valid_f$field_value, 8'b00000000, /dynamic_addr_f$field_value, /static_addr_valid_f$field_value, 8'b00000000, /static_addr_f$field_value};
                  $register_load_next0 = /dynamic_addr_valid_f$load_next||/dynamic_addr_f$load_next||/static_addr_valid_f$load_next||/static_addr_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/dynamic_addr_valid_f$field_value', left: 0, width: 1}, {value: '/dynamic_addr_f$field_value', left: 9, width: 7}, {value: '/static_addr_valid_f$field_value', left: 16, width: 1}, {value: '/static_addr_f$field_value', left: 25, width: 7}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "STBY_CR_DEVICE_ADDR", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 260}
                  /static_addr_f
                     $field_value[6:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR.load_next;
                     \viz_js
                        box: {width: 350, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 175.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 175.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 175.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "7''h" + '$field_value'.asHexStr(), "STATIC_ADDR", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1670, top: -10}
                  /static_addr_valid_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR_VALID.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR_VALID.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "STATIC_ADDR_VALID", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1220, top: -10}
                  /dynamic_addr_f
                     $field_value[6:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR.load_next;
                     \viz_js
                        box: {width: 350, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 175.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 175.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 175.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "7''h" + '$field_value'.asHexStr(), "DYNAMIC_ADDR", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 870, top: -10}
                  /dynamic_addr_valid_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR_VALID.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR_VALID.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "DYNAMIC_ADDR_VALID", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /stby_cr_capabilities_r
                  $register_value[31:0] = {16'b0000000000000000, /daa_entdaa_support_f$field_value, /daa_setdasa_support_f$field_value, /daa_setaasa_support_f$field_value, /target_xact_support_f$field_value, 6'b000000, /simple_crr_support_f$field_value, 5'b00000};
                  $register_load_next0 = /daa_entdaa_support_f$load_next||/daa_setdasa_support_f$load_next||/daa_setaasa_support_f$load_next||/target_xact_support_f$load_next||/simple_crr_support_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/daa_entdaa_support_f$field_value', left: 16, width: 1}, {value: '/daa_setdasa_support_f$field_value', left: 17, width: 1}, {value: '/daa_setaasa_support_f$field_value', left: 18, width: 1}, {value: '/target_xact_support_f$field_value', left: 19, width: 1}, {value: '/simple_crr_support_f$field_value', left: 26, width: 1}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "STBY_CR_CAPABILITIES", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 400}
                  /simple_crr_support_f
                     $field_value[0:0] = 0;
                     $load_next = 0;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "SIMPLE_CRR_SUPPORT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1720, top: -10}
                  /target_xact_support_f
                     $field_value[0:0] = 0;
                     $load_next = 0;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "TARGET_XACT_SUPPORT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1370, top: -10}
                  /daa_setaasa_support_f
                     $field_value[0:0] = 0;
                     $load_next = 0;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "DAA_SETAASA_SUPPORT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1320, top: -10}
                  /daa_setdasa_support_f
                     $field_value[0:0] = 0;
                     $load_next = 0;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "DAA_SETDASA_SUPPORT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1270, top: -10}
                  /daa_entdaa_support_f
                     $field_value[0:0] = 0;
                     $load_next = 0;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "DAA_ENTDAA_SUPPORT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1220, top: -10}
               /stby_cr_virtual_device_char_r
                  $register_value[31:0] = {/bcr_fixed_f$field_value, /bcr_var_f$field_value, /dcr_f$field_value, /pid_hi_f$field_value, 1'b0};
                  $register_load_next0 = /bcr_fixed_f$load_next||/bcr_var_f$load_next||/dcr_f$load_next||/pid_hi_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/bcr_fixed_f$field_value', left: 0, width: 3}, {value: '/bcr_var_f$field_value', left: 3, width: 5}, {value: '/dcr_f$field_value', left: 8, width: 8}, {value: '/pid_hi_f$field_value', left: 16, width: 15}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "STBY_CR_VIRTUAL_DEVICE_CHAR", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 540}
                  /pid_hi_f
                     $field_value[14:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.PID_HI.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.PID_HI.load_next;
                     \viz_js
                        box: {width: 750, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 375.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 375.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 375.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "15''h" + '$field_value'.asHexStr(), "PID_HI", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1220, top: -10}
                  /dcr_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.DCR.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.DCR.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "DCR", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 820, top: -10}
                  /bcr_var_f
                     $field_value[4:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.BCR_VAR.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.BCR_VAR.load_next;
                     \viz_js
                        box: {width: 250, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 125.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 125.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 125.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "5''h" + '$field_value'.asHexStr(), "BCR_VAR", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 570, top: -10}
                  /bcr_fixed_f
                     $field_value[2:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.BCR_FIXED.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.BCR_FIXED.load_next;
                     \viz_js
                        box: {width: 150, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 75.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 75.0,
                              fontSize: 32,
                           }, {
                              top: 110,
                              left: 75.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "3''b" + '$field_value'.asBinaryStr(), "BCR_FIXED", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /stby_cr_status_r
                  $register_value[31:0] = {23'b00000000000000000000000, /hj_req_status_f$field_value, /simple_crr_status_f$field_value, 2'b00, /ac_current_own_f$field_value, 2'b00};
                  $register_load_next0 = /hj_req_status_f$load_next||/simple_crr_status_f$load_next||/ac_current_own_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/hj_req_status_f$field_value', left: 23, width: 1}, {value: '/simple_crr_status_f$field_value', left: 24, width: 3}, {value: '/ac_current_own_f$field_value', left: 29, width: 1}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "STBY_CR_STATUS", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 680}
                  /ac_current_own_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.AC_CURRENT_OWN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.AC_CURRENT_OWN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "AC_CURRENT_OWN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1870, top: -10}
                  /simple_crr_status_f
                     $field_value[2:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.SIMPLE_CRR_STATUS.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.SIMPLE_CRR_STATUS.load_next;
                     \viz_js
                        box: {width: 150, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 75.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 75.0,
                              fontSize: 32,
                           }, {
                              top: 110,
                              left: 75.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "3''b" + '$field_value'.asBinaryStr(), "SIMPLE_CRR_STATUS", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1620, top: -10}
                  /hj_req_status_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.HJ_REQ_STATUS.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.HJ_REQ_STATUS.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "HJ_REQ_STATUS", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1570, top: -10}
               /stby_cr_device_char_r
                  $register_value[31:0] = {/bcr_fixed_f$field_value, /bcr_var_f$field_value, /dcr_f$field_value, /pid_hi_f$field_value, 1'b0};
                  $register_load_next0 = /bcr_fixed_f$load_next||/bcr_var_f$load_next||/dcr_f$load_next||/pid_hi_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/bcr_fixed_f$field_value', left: 0, width: 3}, {value: '/bcr_var_f$field_value', left: 3, width: 5}, {value: '/dcr_f$field_value', left: 8, width: 8}, {value: '/pid_hi_f$field_value', left: 16, width: 15}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "STBY_CR_DEVICE_CHAR", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 820}
                  /pid_hi_f
                     $field_value[14:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.PID_HI.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.PID_HI.load_next;
                     \viz_js
                        box: {width: 750, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 375.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 375.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 375.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "15''h" + '$field_value'.asHexStr(), "PID_HI", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1220, top: -10}
                  /dcr_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.DCR.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.DCR.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "DCR", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 820, top: -10}
                  /bcr_var_f
                     $field_value[4:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_VAR.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_VAR.load_next;
                     \viz_js
                        box: {width: 250, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 125.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 125.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 125.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "5''h" + '$field_value'.asHexStr(), "BCR_VAR", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 570, top: -10}
                  /bcr_fixed_f
                     $field_value[2:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_FIXED.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_FIXED.load_next;
                     \viz_js
                        box: {width: 150, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 75.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 75.0,
                              fontSize: 32,
                           }, {
                              top: 110,
                              left: 75.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "3''b" + '$field_value'.asBinaryStr(), "BCR_FIXED", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /stby_cr_device_pid_lo_r
                  $register_value[31:0] = {/pid_lo_f$field_value};
                  $register_load_next0 = /pid_lo_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/pid_lo_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "STBY_CR_DEVICE_PID_LO", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 960}
                  /pid_lo_f
                     $field_value[31:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO.PID_LO.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO.PID_LO.load_next;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "PID_LO", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /stby_cr_intr_status_r
                  $register_value[31:0] = {12'b000000000000, /ccc_fatal_rstdaa_err_stat_f$field_value, /ccc_unhandled_nack_stat_f$field_value, /ccc_param_modified_stat_f$field_value, /stby_cr_op_rstact_stat_f$field_value, 1'b0, /stby_cr_accept_err_stat_f$field_value, /stby_cr_accept_ok_stat_f$field_value, /stby_cr_accept_nacked_stat_f$field_value, /stby_cr_dyn_addr_stat_f$field_value, /crr_response_stat_f$field_value, 6'b000000, /acr_handoff_err_m3_stat_f$field_value, /acr_handoff_err_fail_stat_f$field_value, /acr_handoff_ok_primed_stat_f$field_value, /acr_handoff_ok_remain_stat_f$field_value};
                  $register_load_next0 = /ccc_fatal_rstdaa_err_stat_f$load_next||/ccc_unhandled_nack_stat_f$load_next||/ccc_param_modified_stat_f$load_next||/stby_cr_op_rstact_stat_f$load_next||/stby_cr_accept_err_stat_f$load_next||/stby_cr_accept_ok_stat_f$load_next||/stby_cr_accept_nacked_stat_f$load_next||/stby_cr_dyn_addr_stat_f$load_next||/crr_response_stat_f$load_next||/acr_handoff_err_m3_stat_f$load_next||/acr_handoff_err_fail_stat_f$load_next||/acr_handoff_ok_primed_stat_f$load_next||/acr_handoff_ok_remain_stat_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/ccc_fatal_rstdaa_err_stat_f$field_value', left: 12, width: 1}, {value: '/ccc_unhandled_nack_stat_f$field_value', left: 13, width: 1}, {value: '/ccc_param_modified_stat_f$field_value', left: 14, width: 1}, {value: '/stby_cr_op_rstact_stat_f$field_value', left: 15, width: 1}, {value: '/stby_cr_accept_err_stat_f$field_value', left: 17, width: 1}, {value: '/stby_cr_accept_ok_stat_f$field_value', left: 18, width: 1}, {value: '/stby_cr_accept_nacked_stat_f$field_value', left: 19, width: 1}, {value: '/stby_cr_dyn_addr_stat_f$field_value', left: 20, width: 1}, {value: '/crr_response_stat_f$field_value', left: 21, width: 1}, {value: '/acr_handoff_err_m3_stat_f$field_value', left: 28, width: 1}, {value: '/acr_handoff_err_fail_stat_f$field_value', left: 29, width: 1}, {value: '/acr_handoff_ok_primed_stat_f$field_value', left: 30, width: 1}, {value: '/acr_handoff_ok_remain_stat_f$field_value', left: 31, width: 1}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "STBY_CR_INTR_STATUS", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 1100}
                  /acr_handoff_ok_remain_stat_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_REMAIN_STAT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_REMAIN_STAT.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "ACR_HANDOFF_OK_REMAIN_STAT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1970, top: -10}
                  /acr_handoff_ok_primed_stat_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_PRIMED_STAT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_PRIMED_STAT.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "ACR_HANDOFF_OK_PRIMED_STAT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1920, top: -10}
                  /acr_handoff_err_fail_stat_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_FAIL_STAT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_FAIL_STAT.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "ACR_HANDOFF_ERR_FAIL_STAT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1870, top: -10}
                  /acr_handoff_err_m3_stat_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_M3_STAT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_M3_STAT.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "ACR_HANDOFF_ERR_M3_STAT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1820, top: -10}
                  /crr_response_stat_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CRR_RESPONSE_STAT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CRR_RESPONSE_STAT.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "CRR_RESPONSE_STAT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1470, top: -10}
                  /stby_cr_dyn_addr_stat_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_DYN_ADDR_STAT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_DYN_ADDR_STAT.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "STBY_CR_DYN_ADDR_STAT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1420, top: -10}
                  /stby_cr_accept_nacked_stat_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_NACKED_STAT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_NACKED_STAT.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "STBY_CR_ACCEPT_NACKED_STAT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1370, top: -10}
                  /stby_cr_accept_ok_stat_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_OK_STAT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_OK_STAT.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "STBY_CR_ACCEPT_OK_STAT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1320, top: -10}
                  /stby_cr_accept_err_stat_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_ERR_STAT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_ERR_STAT.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "STBY_CR_ACCEPT_ERR_STAT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1270, top: -10}
                  /stby_cr_op_rstact_stat_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_OP_RSTACT_STAT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_OP_RSTACT_STAT.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "STBY_CR_OP_RSTACT_STAT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1170, top: -10}
                  /ccc_param_modified_stat_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_PARAM_MODIFIED_STAT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_PARAM_MODIFIED_STAT.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "CCC_PARAM_MODIFIED_STAT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1120, top: -10}
                  /ccc_unhandled_nack_stat_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_UNHANDLED_NACK_STAT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_UNHANDLED_NACK_STAT.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "CCC_UNHANDLED_NACK_STAT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1070, top: -10}
                  /ccc_fatal_rstdaa_err_stat_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_FATAL_RSTDAA_ERR_STAT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_FATAL_RSTDAA_ERR_STAT.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "CCC_FATAL_RSTDAA_ERR_STAT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1020, top: -10}
               /stby_cr_virtual_device_pid_lo_r
                  $register_value[31:0] = {/pid_lo_f$field_value};
                  $register_load_next0 = /pid_lo_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/pid_lo_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "STBY_CR_VIRTUAL_DEVICE_PID_LO", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 1240}
                  /pid_lo_f
                     $field_value[31:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_PID_LO.PID_LO.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_PID_LO.PID_LO.load_next;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "PID_LO", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /stby_cr_intr_signal_enable_r
                  $register_value[31:0] = {12'b000000000000, /ccc_fatal_rstdaa_err_signal_en_f$field_value, /ccc_unhandled_nack_signal_en_f$field_value, /ccc_param_modified_signal_en_f$field_value, /stby_cr_op_rstact_signal_en_f$field_value, 1'b0, /stby_cr_accept_err_signal_en_f$field_value, /stby_cr_accept_ok_signal_en_f$field_value, /stby_cr_accept_nacked_signal_en_f$field_value, /stby_cr_dyn_addr_signal_en_f$field_value, /crr_response_signal_en_f$field_value, 6'b000000, /acr_handoff_err_m3_signal_en_f$field_value, /acr_handoff_err_fail_signal_en_f$field_value, /acr_handoff_ok_primed_signal_en_f$field_value, /acr_handoff_ok_remain_signal_en_f$field_value};
                  $register_load_next0 = /ccc_fatal_rstdaa_err_signal_en_f$load_next||/ccc_unhandled_nack_signal_en_f$load_next||/ccc_param_modified_signal_en_f$load_next||/stby_cr_op_rstact_signal_en_f$load_next||/stby_cr_accept_err_signal_en_f$load_next||/stby_cr_accept_ok_signal_en_f$load_next||/stby_cr_accept_nacked_signal_en_f$load_next||/stby_cr_dyn_addr_signal_en_f$load_next||/crr_response_signal_en_f$load_next||/acr_handoff_err_m3_signal_en_f$load_next||/acr_handoff_err_fail_signal_en_f$load_next||/acr_handoff_ok_primed_signal_en_f$load_next||/acr_handoff_ok_remain_signal_en_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/ccc_fatal_rstdaa_err_signal_en_f$field_value', left: 12, width: 1}, {value: '/ccc_unhandled_nack_signal_en_f$field_value', left: 13, width: 1}, {value: '/ccc_param_modified_signal_en_f$field_value', left: 14, width: 1}, {value: '/stby_cr_op_rstact_signal_en_f$field_value', left: 15, width: 1}, {value: '/stby_cr_accept_err_signal_en_f$field_value', left: 17, width: 1}, {value: '/stby_cr_accept_ok_signal_en_f$field_value', left: 18, width: 1}, {value: '/stby_cr_accept_nacked_signal_en_f$field_value', left: 19, width: 1}, {value: '/stby_cr_dyn_addr_signal_en_f$field_value', left: 20, width: 1}, {value: '/crr_response_signal_en_f$field_value', left: 21, width: 1}, {value: '/acr_handoff_err_m3_signal_en_f$field_value', left: 28, width: 1}, {value: '/acr_handoff_err_fail_signal_en_f$field_value', left: 29, width: 1}, {value: '/acr_handoff_ok_primed_signal_en_f$field_value', left: 30, width: 1}, {value: '/acr_handoff_ok_remain_signal_en_f$field_value', left: 31, width: 1}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "STBY_CR_INTR_SIGNAL_ENABLE", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 1380}
                  /acr_handoff_ok_remain_signal_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_REMAIN_SIGNAL_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_REMAIN_SIGNAL_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "ACR_HANDOFF_OK_REMAIN_SIGNAL_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1970, top: -10}
                  /acr_handoff_ok_primed_signal_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_PRIMED_SIGNAL_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_PRIMED_SIGNAL_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "ACR_HANDOFF_OK_PRIMED_SIGNAL_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1920, top: -10}
                  /acr_handoff_err_fail_signal_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_FAIL_SIGNAL_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_FAIL_SIGNAL_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "ACR_HANDOFF_ERR_FAIL_SIGNAL_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1870, top: -10}
                  /acr_handoff_err_m3_signal_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_M3_SIGNAL_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_M3_SIGNAL_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "ACR_HANDOFF_ERR_M3_SIGNAL_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1820, top: -10}
                  /crr_response_signal_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CRR_RESPONSE_SIGNAL_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CRR_RESPONSE_SIGNAL_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "CRR_RESPONSE_SIGNAL_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1470, top: -10}
                  /stby_cr_dyn_addr_signal_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_DYN_ADDR_SIGNAL_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_DYN_ADDR_SIGNAL_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "STBY_CR_DYN_ADDR_SIGNAL_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1420, top: -10}
                  /stby_cr_accept_nacked_signal_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_NACKED_SIGNAL_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_NACKED_SIGNAL_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "STBY_CR_ACCEPT_NACKED_SIGNAL_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1370, top: -10}
                  /stby_cr_accept_ok_signal_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_OK_SIGNAL_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_OK_SIGNAL_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "STBY_CR_ACCEPT_OK_SIGNAL_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1320, top: -10}
                  /stby_cr_accept_err_signal_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_ERR_SIGNAL_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_ERR_SIGNAL_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "STBY_CR_ACCEPT_ERR_SIGNAL_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1270, top: -10}
                  /stby_cr_op_rstact_signal_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_OP_RSTACT_SIGNAL_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_OP_RSTACT_SIGNAL_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "STBY_CR_OP_RSTACT_SIGNAL_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1170, top: -10}
                  /ccc_param_modified_signal_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_PARAM_MODIFIED_SIGNAL_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_PARAM_MODIFIED_SIGNAL_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "CCC_PARAM_MODIFIED_SIGNAL_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1120, top: -10}
                  /ccc_unhandled_nack_signal_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_UNHANDLED_NACK_SIGNAL_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_UNHANDLED_NACK_SIGNAL_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "CCC_UNHANDLED_NACK_SIGNAL_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1070, top: -10}
                  /ccc_fatal_rstdaa_err_signal_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_FATAL_RSTDAA_ERR_SIGNAL_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_FATAL_RSTDAA_ERR_SIGNAL_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "CCC_FATAL_RSTDAA_ERR_SIGNAL_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1020, top: -10}
               /stby_cr_intr_force_r
                  $register_value[31:0] = {12'b000000000000, /ccc_fatal_rstdaa_err_force_f$field_value, /ccc_unhandled_nack_force_f$field_value, /ccc_param_modified_force_f$field_value, /stby_cr_op_rstact_force_f$field_value, 1'b0, /stby_cr_accept_err_force_f$field_value, /stby_cr_accept_ok_force_f$field_value, /stby_cr_accept_nacked_force_f$field_value, /stby_cr_dyn_addr_force_f$field_value, /crr_response_force_f$field_value, 10'b0000000000};
                  $register_load_next0 = /ccc_fatal_rstdaa_err_force_f$load_next||/ccc_unhandled_nack_force_f$load_next||/ccc_param_modified_force_f$load_next||/stby_cr_op_rstact_force_f$load_next||/stby_cr_accept_err_force_f$load_next||/stby_cr_accept_ok_force_f$load_next||/stby_cr_accept_nacked_force_f$load_next||/stby_cr_dyn_addr_force_f$load_next||/crr_response_force_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/ccc_fatal_rstdaa_err_force_f$field_value', left: 12, width: 1}, {value: '/ccc_unhandled_nack_force_f$field_value', left: 13, width: 1}, {value: '/ccc_param_modified_force_f$field_value', left: 14, width: 1}, {value: '/stby_cr_op_rstact_force_f$field_value', left: 15, width: 1}, {value: '/stby_cr_accept_err_force_f$field_value', left: 17, width: 1}, {value: '/stby_cr_accept_ok_force_f$field_value', left: 18, width: 1}, {value: '/stby_cr_accept_nacked_force_f$field_value', left: 19, width: 1}, {value: '/stby_cr_dyn_addr_force_f$field_value', left: 20, width: 1}, {value: '/crr_response_force_f$field_value', left: 21, width: 1}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "STBY_CR_INTR_FORCE", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 1520}
                  /crr_response_force_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CRR_RESPONSE_FORCE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CRR_RESPONSE_FORCE.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "CRR_RESPONSE_FORCE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1470, top: -10}
                  /stby_cr_dyn_addr_force_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_DYN_ADDR_FORCE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_DYN_ADDR_FORCE.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "STBY_CR_DYN_ADDR_FORCE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1420, top: -10}
                  /stby_cr_accept_nacked_force_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_NACKED_FORCE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_NACKED_FORCE.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "STBY_CR_ACCEPT_NACKED_FORCE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1370, top: -10}
                  /stby_cr_accept_ok_force_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_OK_FORCE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_OK_FORCE.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "STBY_CR_ACCEPT_OK_FORCE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1320, top: -10}
                  /stby_cr_accept_err_force_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_ERR_FORCE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_ERR_FORCE.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "STBY_CR_ACCEPT_ERR_FORCE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1270, top: -10}
                  /stby_cr_op_rstact_force_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_OP_RSTACT_FORCE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_OP_RSTACT_FORCE.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "STBY_CR_OP_RSTACT_FORCE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1170, top: -10}
                  /ccc_param_modified_force_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_PARAM_MODIFIED_FORCE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_PARAM_MODIFIED_FORCE.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "CCC_PARAM_MODIFIED_FORCE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1120, top: -10}
                  /ccc_unhandled_nack_force_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_UNHANDLED_NACK_FORCE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_UNHANDLED_NACK_FORCE.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "CCC_UNHANDLED_NACK_FORCE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1070, top: -10}
                  /ccc_fatal_rstdaa_err_force_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_FATAL_RSTDAA_ERR_FORCE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_FATAL_RSTDAA_ERR_FORCE.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "CCC_FATAL_RSTDAA_ERR_FORCE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1020, top: -10}
               /stby_cr_ccc_config_getcaps_r
                  $register_value[31:0] = {20'b00000000000000000000, /df2_crcap2_dev_interact_f$field_value, 5'b00000, /df2_crcap1_bus_config_f$field_value};
                  $register_load_next0 = /df2_crcap2_dev_interact_f$load_next||/df2_crcap1_bus_config_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/df2_crcap2_dev_interact_f$field_value', left: 20, width: 4}, {value: '/df2_crcap1_bus_config_f$field_value', left: 29, width: 3}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "STBY_CR_CCC_CONFIG_GETCAPS", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 1660}
                  /df2_crcap1_bus_config_f
                     $field_value[2:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP1_BUS_CONFIG.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP1_BUS_CONFIG.load_next;
                     \viz_js
                        box: {width: 150, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 75.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 75.0,
                              fontSize: 32,
                           }, {
                              top: 110,
                              left: 75.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "3''b" + '$field_value'.asBinaryStr(), "F2_CRCAP1_BUS_CONFIG", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1870, top: -10}
                  /df2_crcap2_dev_interact_f
                     $field_value[3:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP2_DEV_INTERACT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP2_DEV_INTERACT.load_next;
                     \viz_js
                        box: {width: 200, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 100.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 100.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 100.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "4''h" + '$field_value'.asHexStr(), "F2_CRCAP2_DEV_INTERACT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1420, top: -10}
               /stby_cr_ccc_config_rstact_params_r
                  $register_value[31:0] = {/reset_dynamic_addr_f$field_value, 7'b0000000, /reset_time_target_f$field_value, /reset_time_peripheral_f$field_value, /rst_action_f$field_value};
                  $register_load_next0 = /reset_dynamic_addr_f$load_next||/reset_time_target_f$load_next||/reset_time_peripheral_f$load_next||/rst_action_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/reset_dynamic_addr_f$field_value', left: 0, width: 1}, {value: '/reset_time_target_f$field_value', left: 8, width: 8}, {value: '/reset_time_peripheral_f$field_value', left: 16, width: 8}, {value: '/rst_action_f$field_value', left: 24, width: 8}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "STBY_CR_CCC_CONFIG_RSTACT_PARAMS", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 1800}
                  /rst_action_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RST_ACTION.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RST_ACTION.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "RST_ACTION", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1620, top: -10}
                  /reset_time_peripheral_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_PERIPHERAL.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_PERIPHERAL.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "RESET_TIME_PERIPHERAL", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1220, top: -10}
                  /reset_time_target_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_TARGET.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_TARGET.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "RESET_TIME_TARGET", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 820, top: -10}
                  /reset_dynamic_addr_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_DYNAMIC_ADDR.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_DYNAMIC_ADDR.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "RESET_DYNAMIC_ADDR", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /stby_cr_virt_device_addr_r
                  $register_value[31:0] = {/virt_dynamic_addr_valid_f$field_value, 8'b00000000, /virt_dynamic_addr_f$field_value, /virt_static_addr_valid_f$field_value, 8'b00000000, /virt_static_addr_f$field_value};
                  $register_load_next0 = /virt_dynamic_addr_valid_f$load_next||/virt_dynamic_addr_f$load_next||/virt_static_addr_valid_f$load_next||/virt_static_addr_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/virt_dynamic_addr_valid_f$field_value', left: 0, width: 1}, {value: '/virt_dynamic_addr_f$field_value', left: 9, width: 7}, {value: '/virt_static_addr_valid_f$field_value', left: 16, width: 1}, {value: '/virt_static_addr_f$field_value', left: 25, width: 7}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "STBY_CR_VIRT_DEVICE_ADDR", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 1940}
                  /virt_static_addr_f
                     $field_value[6:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR.load_next;
                     \viz_js
                        box: {width: 350, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 175.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 175.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 175.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "7''h" + '$field_value'.asHexStr(), "VIRT_STATIC_ADDR", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1670, top: -10}
                  /virt_static_addr_valid_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR_VALID.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR_VALID.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "VIRT_STATIC_ADDR_VALID", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1220, top: -10}
                  /virt_dynamic_addr_f
                     $field_value[6:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR.load_next;
                     \viz_js
                        box: {width: 350, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 175.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 175.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 175.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "7''h" + '$field_value'.asHexStr(), "VIRT_DYNAMIC_ADDR", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 870, top: -10}
                  /virt_dynamic_addr_valid_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR_VALID.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR_VALID.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "VIRT_DYNAMIC_ADDR_VALID", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /rsvd_d3_r
                  $register_value[31:0] = {/rsvd_f$field_value};
                  $register_load_next0 = /rsvd_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/rsvd_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "__rsvd_3", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 2080}
                  /rsvd_f
                     $field_value[31:0] = I3CCSR.field_storage.I3C_EC.StdbyCtrlMode.__rsvd_3.__rsvd.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.StdbyCtrlMode.__rsvd_3.__rsvd.load_next;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "__rsvd", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
            /tti_r
               \viz_js
                  box: {strokeWidth: 0},
                  init() {
                     return '/top_viz'.init_node({
                        width: 100,
                        height: 2210,
                        fill: "#F5CF9F",
                     }, {
                        top: 1105.0,
                        left: 50.0,
                        fontSize: 30,
                     })
                  },
                  render() {
                     let obj = this.getObjects()
                     obj.label.set({fill: "black", text: "TTI"})
                  },
                  where: {left: 160, top: 6700}
               /extcap_header_r
                  $register_value[31:0] = {8'b00000000, /cap_length_f$field_value, /cap_id_f$field_value};
                  $register_load_next0 = /cap_length_f$load_next||/cap_id_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/cap_length_f$field_value', left: 8, width: 16}, {value: '/cap_id_f$field_value', left: 24, width: 8}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "EXTCAP_HEADER", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: -20}
                  /cap_id_f
                     $field_value[7:0] = 0;
                     $load_next = 0;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "CAP_ID", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1620, top: -10}
                  /cap_length_f
                     $field_value[15:0] = 0;
                     $load_next = 0;
                     \viz_js
                        box: {width: 800, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 400.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 400.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 400.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "16''h" + '$field_value'.asHexStr(), "CAP_LENGTH", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 820, top: -10}
               /control_r
                  $register_value[31:0] = {16'b0000000000000000, /ibi_retry_num_f$field_value, /ibi_en_f$field_value, /crr_en_f$field_value, /hj_en_f$field_value, 10'b0000000000};
                  $register_load_next0 = /ibi_retry_num_f$load_next||/ibi_en_f$load_next||/crr_en_f$load_next||/hj_en_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/ibi_retry_num_f$field_value', left: 16, width: 3}, {value: '/ibi_en_f$field_value', left: 19, width: 1}, {value: '/crr_en_f$field_value', left: 20, width: 1}, {value: '/hj_en_f$field_value', left: 21, width: 1}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "CONTROL", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 120}
                  /hj_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.CONTROL.HJ_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.CONTROL.HJ_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "HJ_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1470, top: -10}
                  /crr_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.CONTROL.CRR_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.CONTROL.CRR_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "CRR_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1420, top: -10}
                  /ibi_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.CONTROL.IBI_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.CONTROL.IBI_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "IBI_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1370, top: -10}
                  /ibi_retry_num_f
                     $field_value[2:0] = I3CCSR.field_storage.I3C_EC.TTI.CONTROL.IBI_RETRY_NUM.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.CONTROL.IBI_RETRY_NUM.load_next;
                     \viz_js
                        box: {width: 150, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 75.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 75.0,
                              fontSize: 32,
                           }, {
                              top: 110,
                              left: 75.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "3''b" + '$field_value'.asBinaryStr(), "IBI_RETRY_NUM", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1220, top: -10}
               /status_r
                  $register_value[31:0] = {16'b0000000000000000, /last_ibi_status_f$field_value, /protocol_error_f$field_value, 13'b0000000000000};
                  $register_load_next0 = /last_ibi_status_f$load_next||/protocol_error_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/last_ibi_status_f$field_value', left: 16, width: 2}, {value: '/protocol_error_f$field_value', left: 18, width: 1}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "STATUS", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 260}
                  /protocol_error_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.STATUS.PROTOCOL_ERROR.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.STATUS.PROTOCOL_ERROR.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "PROTOCOL_ERROR", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1320, top: -10}
                  /last_ibi_status_f
                     $field_value[1:0] = I3CCSR.field_storage.I3C_EC.TTI.STATUS.LAST_IBI_STATUS.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.STATUS.LAST_IBI_STATUS.load_next;
                     \viz_js
                        box: {width: 100, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 50.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 50.0,
                              fontSize: 32,
                           }, {
                              top: 110,
                              left: 50.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "2''b" + '$field_value'.asBinaryStr(), "LAST_IBI_STATUS", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1220, top: -10}
               /reset_control_r
                  $register_value[31:0] = {26'b00000000000000000000000000, /ibi_queue_rst_f$field_value, /rx_data_rst_f$field_value, /tx_data_rst_f$field_value, /rx_desc_rst_f$field_value, /tx_desc_rst_f$field_value, /soft_rst_f$field_value};
                  $register_load_next0 = /ibi_queue_rst_f$load_next||/rx_data_rst_f$load_next||/tx_data_rst_f$load_next||/rx_desc_rst_f$load_next||/tx_desc_rst_f$load_next||/soft_rst_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/ibi_queue_rst_f$field_value', left: 26, width: 1}, {value: '/rx_data_rst_f$field_value', left: 27, width: 1}, {value: '/tx_data_rst_f$field_value', left: 28, width: 1}, {value: '/rx_desc_rst_f$field_value', left: 29, width: 1}, {value: '/tx_desc_rst_f$field_value', left: 30, width: 1}, {value: '/soft_rst_f$field_value', left: 31, width: 1}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "RESET_CONTROL", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 400}
                  /soft_rst_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.RESET_CONTROL.SOFT_RST.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.RESET_CONTROL.SOFT_RST.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "SOFT_RST", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1970, top: -10}
                  /tx_desc_rst_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.RESET_CONTROL.TX_DESC_RST.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.RESET_CONTROL.TX_DESC_RST.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "TX_DESC_RST", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1920, top: -10}
                  /rx_desc_rst_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.RESET_CONTROL.RX_DESC_RST.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.RESET_CONTROL.RX_DESC_RST.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "RX_DESC_RST", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1870, top: -10}
                  /tx_data_rst_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.RESET_CONTROL.TX_DATA_RST.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.RESET_CONTROL.TX_DATA_RST.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "TX_DATA_RST", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1820, top: -10}
                  /rx_data_rst_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.RESET_CONTROL.RX_DATA_RST.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.RESET_CONTROL.RX_DATA_RST.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "RX_DATA_RST", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1770, top: -10}
                  /ibi_queue_rst_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.RESET_CONTROL.IBI_QUEUE_RST.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.RESET_CONTROL.IBI_QUEUE_RST.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "IBI_QUEUE_RST", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1720, top: -10}
               /interrupt_status_r
                  $register_value[31:0] = {/transfer_err_stat_f$field_value, 4'b0000, /tx_desc_complete_f$field_value, /transfer_abort_stat_f$field_value, 6'b000000, /pending_interrupt_f$field_value, 1'b0, /ibi_done_f$field_value, /ibi_thld_stat_f$field_value, /rx_desc_thld_stat_f$field_value, /tx_desc_thld_stat_f$field_value, /rx_data_thld_stat_f$field_value, /tx_data_thld_stat_f$field_value, 4'b0000, /tx_desc_timeout_f$field_value, /rx_desc_timeout_f$field_value, /tx_desc_stat_f$field_value, /rx_desc_stat_f$field_value};
                  $register_load_next0 = /transfer_err_stat_f$load_next||/tx_desc_complete_f$load_next||/transfer_abort_stat_f$load_next||/pending_interrupt_f$load_next||/ibi_done_f$load_next||/ibi_thld_stat_f$load_next||/rx_desc_thld_stat_f$load_next||/tx_desc_thld_stat_f$load_next||/rx_data_thld_stat_f$load_next||/tx_data_thld_stat_f$load_next||/tx_desc_timeout_f$load_next||/rx_desc_timeout_f$load_next||/tx_desc_stat_f$load_next||/rx_desc_stat_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/transfer_err_stat_f$field_value', left: 0, width: 1}, {value: '/tx_desc_complete_f$field_value', left: 5, width: 1}, {value: '/transfer_abort_stat_f$field_value', left: 6, width: 1}, {value: '/pending_interrupt_f$field_value', left: 13, width: 4}, {value: '/ibi_done_f$field_value', left: 18, width: 1}, {value: '/ibi_thld_stat_f$field_value', left: 19, width: 1}, {value: '/rx_desc_thld_stat_f$field_value', left: 20, width: 1}, {value: '/tx_desc_thld_stat_f$field_value', left: 21, width: 1}, {value: '/rx_data_thld_stat_f$field_value', left: 22, width: 1}, {value: '/tx_data_thld_stat_f$field_value', left: 23, width: 1}, {value: '/tx_desc_timeout_f$field_value', left: 28, width: 1}, {value: '/rx_desc_timeout_f$field_value', left: 29, width: 1}, {value: '/tx_desc_stat_f$field_value', left: 30, width: 1}, {value: '/rx_desc_stat_f$field_value', left: 31, width: 1}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "INTERRUPT_STATUS", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 540}
                  /rx_desc_stat_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "RX_DESC_STAT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1970, top: -10}
                  /tx_desc_stat_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "TX_DESC_STAT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1920, top: -10}
                  /rx_desc_timeout_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "RX_DESC_TIMEOUT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1870, top: -10}
                  /tx_desc_timeout_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "TX_DESC_TIMEOUT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1820, top: -10}
                  /tx_data_thld_stat_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DATA_THLD_STAT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DATA_THLD_STAT.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "TX_DATA_THLD_STAT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1570, top: -10}
                  /rx_data_thld_stat_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DATA_THLD_STAT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DATA_THLD_STAT.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "RX_DATA_THLD_STAT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1520, top: -10}
                  /tx_desc_thld_stat_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_THLD_STAT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_THLD_STAT.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "TX_DESC_THLD_STAT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1470, top: -10}
                  /rx_desc_thld_stat_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_THLD_STAT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_THLD_STAT.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "RX_DESC_THLD_STAT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1420, top: -10}
                  /ibi_thld_stat_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_STATUS.IBI_THLD_STAT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_STATUS.IBI_THLD_STAT.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "IBI_THLD_STAT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1370, top: -10}
                  /ibi_done_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_STATUS.IBI_DONE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_STATUS.IBI_DONE.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "IBI_DONE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1320, top: -10}
                  /pending_interrupt_f
                     $field_value[3:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_STATUS.PENDING_INTERRUPT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_STATUS.PENDING_INTERRUPT.load_next;
                     \viz_js
                        box: {width: 200, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 100.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 100.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 100.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "4''h" + '$field_value'.asHexStr(), "PENDING_INTERRUPT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1070, top: -10}
                  /transfer_abort_stat_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "TRANSFER_ABORT_STAT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 720, top: -10}
                  /tx_desc_complete_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_COMPLETE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_COMPLETE.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "TX_DESC_COMPLETE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 670, top: -10}
                  /transfer_err_stat_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "TRANSFER_ERR_STAT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /interrupt_enable_r
                  $register_value[31:0] = {/transfer_err_stat_en_f$field_value, 4'b0000, /tx_desc_complete_en_f$field_value, /transfer_abort_stat_en_f$field_value, 11'b00000000000, /ibi_done_en_f$field_value, /ibi_thld_stat_en_f$field_value, /rx_desc_thld_stat_en_f$field_value, /tx_desc_thld_stat_en_f$field_value, /rx_data_thld_stat_en_f$field_value, /tx_data_thld_stat_en_f$field_value, 4'b0000, /tx_desc_timeout_en_f$field_value, /rx_desc_timeout_en_f$field_value, /tx_desc_stat_en_f$field_value, /rx_desc_stat_en_f$field_value};
                  $register_load_next0 = /transfer_err_stat_en_f$load_next||/tx_desc_complete_en_f$load_next||/transfer_abort_stat_en_f$load_next||/ibi_done_en_f$load_next||/ibi_thld_stat_en_f$load_next||/rx_desc_thld_stat_en_f$load_next||/tx_desc_thld_stat_en_f$load_next||/rx_data_thld_stat_en_f$load_next||/tx_data_thld_stat_en_f$load_next||/tx_desc_timeout_en_f$load_next||/rx_desc_timeout_en_f$load_next||/tx_desc_stat_en_f$load_next||/rx_desc_stat_en_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/transfer_err_stat_en_f$field_value', left: 0, width: 1}, {value: '/tx_desc_complete_en_f$field_value', left: 5, width: 1}, {value: '/transfer_abort_stat_en_f$field_value', left: 6, width: 1}, {value: '/ibi_done_en_f$field_value', left: 18, width: 1}, {value: '/ibi_thld_stat_en_f$field_value', left: 19, width: 1}, {value: '/rx_desc_thld_stat_en_f$field_value', left: 20, width: 1}, {value: '/tx_desc_thld_stat_en_f$field_value', left: 21, width: 1}, {value: '/rx_data_thld_stat_en_f$field_value', left: 22, width: 1}, {value: '/tx_data_thld_stat_en_f$field_value', left: 23, width: 1}, {value: '/tx_desc_timeout_en_f$field_value', left: 28, width: 1}, {value: '/rx_desc_timeout_en_f$field_value', left: 29, width: 1}, {value: '/tx_desc_stat_en_f$field_value', left: 30, width: 1}, {value: '/rx_desc_stat_en_f$field_value', left: 31, width: 1}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "INTERRUPT_ENABLE", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 680}
                  /rx_desc_stat_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_STAT_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_STAT_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "RX_DESC_STAT_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1970, top: -10}
                  /tx_desc_stat_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_STAT_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_STAT_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "TX_DESC_STAT_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1920, top: -10}
                  /rx_desc_timeout_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_TIMEOUT_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_TIMEOUT_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "RX_DESC_TIMEOUT_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1870, top: -10}
                  /tx_desc_timeout_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_TIMEOUT_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_TIMEOUT_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "TX_DESC_TIMEOUT_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1820, top: -10}
                  /tx_data_thld_stat_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DATA_THLD_STAT_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DATA_THLD_STAT_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "TX_DATA_THLD_STAT_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1570, top: -10}
                  /rx_data_thld_stat_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DATA_THLD_STAT_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DATA_THLD_STAT_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "RX_DATA_THLD_STAT_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1520, top: -10}
                  /tx_desc_thld_stat_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_THLD_STAT_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_THLD_STAT_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "TX_DESC_THLD_STAT_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1470, top: -10}
                  /rx_desc_thld_stat_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_THLD_STAT_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_THLD_STAT_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "RX_DESC_THLD_STAT_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1420, top: -10}
                  /ibi_thld_stat_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_THLD_STAT_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_THLD_STAT_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "IBI_THLD_STAT_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1370, top: -10}
                  /ibi_done_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_DONE_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_DONE_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "IBI_DONE_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1320, top: -10}
                  /transfer_abort_stat_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TRANSFER_ABORT_STAT_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TRANSFER_ABORT_STAT_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "TRANSFER_ABORT_STAT_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 720, top: -10}
                  /tx_desc_complete_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_COMPLETE_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_COMPLETE_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "TX_DESC_COMPLETE_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 670, top: -10}
                  /transfer_err_stat_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TRANSFER_ERR_STAT_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TRANSFER_ERR_STAT_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "TRANSFER_ERR_STAT_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /interrupt_force_r
                  $register_value[31:0] = {/transfer_err_stat_force_f$field_value, 4'b0000, /tx_desc_complete_force_f$field_value, /transfer_abort_stat_force_f$field_value, 11'b00000000000, /ibi_done_force_f$field_value, /ibi_thld_force_f$field_value, /rx_desc_thld_force_f$field_value, /tx_desc_thld_force_f$field_value, /rx_data_thld_force_f$field_value, /tx_data_thld_force_f$field_value, 4'b0000, /tx_desc_timeout_force_f$field_value, /rx_desc_timeout_force_f$field_value, /tx_desc_stat_force_f$field_value, /rx_desc_stat_force_f$field_value};
                  $register_load_next0 = /transfer_err_stat_force_f$load_next||/tx_desc_complete_force_f$load_next||/transfer_abort_stat_force_f$load_next||/ibi_done_force_f$load_next||/ibi_thld_force_f$load_next||/rx_desc_thld_force_f$load_next||/tx_desc_thld_force_f$load_next||/rx_data_thld_force_f$load_next||/tx_data_thld_force_f$load_next||/tx_desc_timeout_force_f$load_next||/rx_desc_timeout_force_f$load_next||/tx_desc_stat_force_f$load_next||/rx_desc_stat_force_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/transfer_err_stat_force_f$field_value', left: 0, width: 1}, {value: '/tx_desc_complete_force_f$field_value', left: 5, width: 1}, {value: '/transfer_abort_stat_force_f$field_value', left: 6, width: 1}, {value: '/ibi_done_force_f$field_value', left: 18, width: 1}, {value: '/ibi_thld_force_f$field_value', left: 19, width: 1}, {value: '/rx_desc_thld_force_f$field_value', left: 20, width: 1}, {value: '/tx_desc_thld_force_f$field_value', left: 21, width: 1}, {value: '/rx_data_thld_force_f$field_value', left: 22, width: 1}, {value: '/tx_data_thld_force_f$field_value', left: 23, width: 1}, {value: '/tx_desc_timeout_force_f$field_value', left: 28, width: 1}, {value: '/rx_desc_timeout_force_f$field_value', left: 29, width: 1}, {value: '/tx_desc_stat_force_f$field_value', left: 30, width: 1}, {value: '/rx_desc_stat_force_f$field_value', left: 31, width: 1}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "INTERRUPT_FORCE", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 820}
                  /rx_desc_stat_force_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_STAT_FORCE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_STAT_FORCE.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "RX_DESC_STAT_FORCE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1970, top: -10}
                  /tx_desc_stat_force_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_STAT_FORCE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_STAT_FORCE.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "TX_DESC_STAT_FORCE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1920, top: -10}
                  /rx_desc_timeout_force_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_TIMEOUT_FORCE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_TIMEOUT_FORCE.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "RX_DESC_TIMEOUT_FORCE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1870, top: -10}
                  /tx_desc_timeout_force_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_TIMEOUT_FORCE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_TIMEOUT_FORCE.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "TX_DESC_TIMEOUT_FORCE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1820, top: -10}
                  /tx_data_thld_force_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DATA_THLD_FORCE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DATA_THLD_FORCE.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "TX_DATA_THLD_FORCE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1570, top: -10}
                  /rx_data_thld_force_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DATA_THLD_FORCE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_FORCE.RX_DATA_THLD_FORCE.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "RX_DATA_THLD_FORCE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1520, top: -10}
                  /tx_desc_thld_force_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_THLD_FORCE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_THLD_FORCE.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "TX_DESC_THLD_FORCE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1470, top: -10}
                  /rx_desc_thld_force_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_THLD_FORCE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_THLD_FORCE.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "RX_DESC_THLD_FORCE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1420, top: -10}
                  /ibi_thld_force_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_FORCE.IBI_THLD_FORCE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_FORCE.IBI_THLD_FORCE.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "IBI_THLD_FORCE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1370, top: -10}
                  /ibi_done_force_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_FORCE.IBI_DONE_FORCE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_FORCE.IBI_DONE_FORCE.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "IBI_DONE_FORCE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1320, top: -10}
                  /transfer_abort_stat_force_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TRANSFER_ABORT_STAT_FORCE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TRANSFER_ABORT_STAT_FORCE.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "TRANSFER_ABORT_STAT_FORCE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 720, top: -10}
                  /tx_desc_complete_force_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_COMPLETE_FORCE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_COMPLETE_FORCE.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "TX_DESC_COMPLETE_FORCE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 670, top: -10}
                  /transfer_err_stat_force_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TRANSFER_ERR_STAT_FORCE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TRANSFER_ERR_STAT_FORCE.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "TRANSFER_ERR_STAT_FORCE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /rx_desc_queue_port_r
                  $register_value[31:0] = {/rx_desc_f$field_value};
                  $register_load_next0 = /rx_desc_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/rx_desc_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "RX_DESC_QUEUE_PORT", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 960}
                  /rx_desc_f
                     $field_value[31:0] = 0;
                     $load_next = 0;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "RX_DESC", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /rx_data_port_r
                  $register_value[31:0] = {/rx_data_f$field_value};
                  $register_load_next0 = /rx_data_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/rx_data_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "RX_DATA_PORT", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 1100}
                  /rx_data_f
                     $field_value[31:0] = 0;
                     $load_next = 0;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "RX_DATA", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /tx_desc_queue_port_r
                  $register_value[31:0] = {/tx_desc_f$field_value};
                  $register_load_next0 = /tx_desc_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/tx_desc_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "TX_DESC_QUEUE_PORT", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 1240}
                  /tx_desc_f
                     $field_value[31:0] = 0;
                     $load_next = 0;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "TX_DESC", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /tx_data_port_r
                  $register_value[31:0] = {/tx_data_f$field_value};
                  $register_load_next0 = /tx_data_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/tx_data_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "TX_DATA_PORT", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 1380}
                  /tx_data_f
                     $field_value[31:0] = 0;
                     $load_next = 0;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "TX_DATA", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /ibi_port_r
                  $register_value[31:0] = {/ibi_data_f$field_value};
                  $register_load_next0 = /ibi_data_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/ibi_data_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "IBI_PORT", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 1520}
                  /ibi_data_f
                     $field_value[31:0] = 0;
                     $load_next = 0;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "IBI_DATA", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /queue_size_r
                  $register_value[31:0] = {/tx_data_buffer_size_f$field_value, /rx_data_buffer_size_f$field_value, /tx_desc_buffer_size_f$field_value, /rx_desc_buffer_size_f$field_value};
                  $register_load_next0 = /tx_data_buffer_size_f$load_next||/rx_data_buffer_size_f$load_next||/tx_desc_buffer_size_f$load_next||/rx_desc_buffer_size_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/tx_data_buffer_size_f$field_value', left: 0, width: 8}, {value: '/rx_data_buffer_size_f$field_value', left: 8, width: 8}, {value: '/tx_desc_buffer_size_f$field_value', left: 16, width: 8}, {value: '/rx_desc_buffer_size_f$field_value', left: 24, width: 8}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "QUEUE_SIZE", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 1660}
                  /rx_desc_buffer_size_f
                     $field_value[7:0] = 0;
                     $load_next = 0;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "RX_DESC_BUFFER_SIZE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1620, top: -10}
                  /tx_desc_buffer_size_f
                     $field_value[7:0] = 0;
                     $load_next = 0;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "TX_DESC_BUFFER_SIZE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1220, top: -10}
                  /rx_data_buffer_size_f
                     $field_value[7:0] = 0;
                     $load_next = 0;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "RX_DATA_BUFFER_SIZE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 820, top: -10}
                  /tx_data_buffer_size_f
                     $field_value[7:0] = 0;
                     $load_next = 0;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "TX_DATA_BUFFER_SIZE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /ibi_queue_size_r
                  $register_value[31:0] = {24'b000000000000000000000000, /ibi_queue_size_f$field_value};
                  $register_load_next0 = /ibi_queue_size_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/ibi_queue_size_f$field_value', left: 24, width: 8}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "IBI_QUEUE_SIZE", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 1800}
                  /ibi_queue_size_f
                     $field_value[7:0] = 0;
                     $load_next = 0;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "IBI_QUEUE_SIZE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1620, top: -10}
               /queue_thld_ctrl_r
                  $register_value[31:0] = {/ibi_thld_f$field_value, 8'b00000000, /rx_desc_thld_f$field_value, /tx_desc_thld_f$field_value};
                  $register_load_next0 = /ibi_thld_f$load_next||/rx_desc_thld_f$load_next||/tx_desc_thld_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/ibi_thld_f$field_value', left: 0, width: 8}, {value: '/rx_desc_thld_f$field_value', left: 16, width: 8}, {value: '/tx_desc_thld_f$field_value', left: 24, width: 8}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "QUEUE_THLD_CTRL", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 1940}
                  /tx_desc_thld_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "TX_DESC_THLD", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1620, top: -10}
                  /rx_desc_thld_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "RX_DESC_THLD", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1220, top: -10}
                  /ibi_thld_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "IBI_THLD", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /data_buffer_thld_ctrl_r
                  $register_value[31:0] = {5'b00000, /rx_start_thld_f$field_value, 5'b00000, /tx_start_thld_f$field_value, 5'b00000, /rx_data_thld_f$field_value, 5'b00000, /tx_data_thld_f$field_value};
                  $register_load_next0 = /rx_start_thld_f$load_next||/tx_start_thld_f$load_next||/rx_data_thld_f$load_next||/tx_data_thld_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/rx_start_thld_f$field_value', left: 5, width: 3}, {value: '/tx_start_thld_f$field_value', left: 13, width: 3}, {value: '/rx_data_thld_f$field_value', left: 21, width: 3}, {value: '/tx_data_thld_f$field_value', left: 29, width: 3}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "DATA_BUFFER_THLD_CTRL", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 2080}
                  /tx_data_thld_f
                     $field_value[2:0] = I3CCSR.field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_DATA_THLD.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_DATA_THLD.load_next;
                     \viz_js
                        box: {width: 150, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 75.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 75.0,
                              fontSize: 32,
                           }, {
                              top: 110,
                              left: 75.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "3''b" + '$field_value'.asBinaryStr(), "TX_DATA_THLD", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1870, top: -10}
                  /rx_data_thld_f
                     $field_value[2:0] = I3CCSR.field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_DATA_THLD.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_DATA_THLD.load_next;
                     \viz_js
                        box: {width: 150, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 75.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 75.0,
                              fontSize: 32,
                           }, {
                              top: 110,
                              left: 75.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "3''b" + '$field_value'.asBinaryStr(), "RX_DATA_THLD", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1470, top: -10}
                  /tx_start_thld_f
                     $field_value[2:0] = I3CCSR.field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_START_THLD.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_START_THLD.load_next;
                     \viz_js
                        box: {width: 150, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 75.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 75.0,
                              fontSize: 32,
                           }, {
                              top: 110,
                              left: 75.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "3''b" + '$field_value'.asBinaryStr(), "TX_START_THLD", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1070, top: -10}
                  /rx_start_thld_f
                     $field_value[2:0] = I3CCSR.field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_START_THLD.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_START_THLD.load_next;
                     \viz_js
                        box: {width: 150, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 75.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 75.0,
                              fontSize: 32,
                           }, {
                              top: 110,
                              left: 75.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "3''b" + '$field_value'.asBinaryStr(), "RX_START_THLD", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 670, top: -10}
            /socmgmtif_r
               \viz_js
                  box: {strokeWidth: 0},
                  init() {
                     return '/top_viz'.init_node({
                        width: 100,
                        height: 3190,
                        fill: "#F5CF9F",
                     }, {
                        top: 1595.0,
                        left: 50.0,
                        fontSize: 30,
                     })
                  },
                  render() {
                     let obj = this.getObjects()
                     obj.label.set({fill: "black", text: "SoCMgmtIf"})
                  },
                  where: {left: 160, top: 8940}
               /extcap_header_r
                  $register_value[31:0] = {8'b00000000, /cap_length_f$field_value, /cap_id_f$field_value};
                  $register_load_next0 = /cap_length_f$load_next||/cap_id_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/cap_length_f$field_value', left: 8, width: 16}, {value: '/cap_id_f$field_value', left: 24, width: 8}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "EXTCAP_HEADER", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: -20}
                  /cap_id_f
                     $field_value[7:0] = 0;
                     $load_next = 0;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "CAP_ID", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1620, top: -10}
                  /cap_length_f
                     $field_value[15:0] = 0;
                     $load_next = 0;
                     \viz_js
                        box: {width: 800, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 400.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 400.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 400.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "16''h" + '$field_value'.asHexStr(), "CAP_LENGTH", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 820, top: -10}
               /soc_mgmt_control_r
                  $register_value[31:0] = {/placeholder_f$field_value};
                  $register_load_next0 = /placeholder_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/placeholder_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "SOC_MGMT_CONTROL", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 120}
                  /placeholder_f
                     $field_value[31:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL.PLACEHOLDER.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL.PLACEHOLDER.load_next;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "PLACEHOLDER", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /soc_mgmt_status_r
                  $register_value[31:0] = {/placeholder_f$field_value};
                  $register_load_next0 = /placeholder_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/placeholder_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "SOC_MGMT_STATUS", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 260}
                  /placeholder_f
                     $field_value[31:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS.PLACEHOLDER.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS.PLACEHOLDER.load_next;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "PLACEHOLDER", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /rec_intf_cfg_r
                  $register_value[31:0] = {30'b000000000000000000000000000000, /rec_payload_done_f$field_value, /rec_intf_bypass_f$field_value};
                  $register_load_next0 = /rec_payload_done_f$load_next||/rec_intf_bypass_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/rec_payload_done_f$field_value', left: 30, width: 1}, {value: '/rec_intf_bypass_f$field_value', left: 31, width: 1}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "REC_INTF_CFG", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 400}
                  /rec_intf_bypass_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_INTF_BYPASS.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_INTF_BYPASS.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "REC_INTF_BYPASS", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1970, top: -10}
                  /rec_payload_done_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_PAYLOAD_DONE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_PAYLOAD_DONE.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "REC_PAYLOAD_DONE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1920, top: -10}
               /rec_intf_reg_wdc_access_r
                  $register_value[31:0] = {8'b00000000, /indirect_fifo_ctrl_reset_f$field_value, /recovery_ctrl_activate_rec_img_f$field_value, /device_reset_ctrl_f$field_value};
                  $register_load_next0 = /indirect_fifo_ctrl_reset_f$load_next||/recovery_ctrl_activate_rec_img_f$load_next||/device_reset_ctrl_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/indirect_fifo_ctrl_reset_f$field_value', left: 8, width: 8}, {value: '/recovery_ctrl_activate_rec_img_f$field_value', left: 16, width: 8}, {value: '/device_reset_ctrl_f$field_value', left: 24, width: 8}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "REC_INTF_REG_W1C_ACCESS", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 540}
                  /device_reset_ctrl_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.DEVICE_RESET_CTRL.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.DEVICE_RESET_CTRL.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "DEVICE_RESET_CTRL", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1620, top: -10}
                  /recovery_ctrl_activate_rec_img_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.RECOVERY_CTRL_ACTIVATE_REC_IMG.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.RECOVERY_CTRL_ACTIVATE_REC_IMG.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "RECOVERY_CTRL_ACTIVATE_REC_IMG", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1220, top: -10}
                  /indirect_fifo_ctrl_reset_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.INDIRECT_FIFO_CTRL_RESET.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.INDIRECT_FIFO_CTRL_RESET.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "INDIRECT_FIFO_CTRL_RESET", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 820, top: -10}
               /soc_mgmt_rsvd_d2_r
                  $register_value[31:0] = {/placeholder_f$field_value};
                  $register_load_next0 = /placeholder_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/placeholder_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "SOC_MGMT_RSVD_2", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 680}
                  /placeholder_f
                     $field_value[31:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2.PLACEHOLDER.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2.PLACEHOLDER.load_next;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "PLACEHOLDER", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /soc_mgmt_rsvd_d3_r
                  $register_value[31:0] = {/placeholder_f$field_value};
                  $register_load_next0 = /placeholder_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/placeholder_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "SOC_MGMT_RSVD_3", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 820}
                  /placeholder_f
                     $field_value[31:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3.PLACEHOLDER.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3.PLACEHOLDER.load_next;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "PLACEHOLDER", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /soc_pad_conf_r
                  $register_value[31:0] = {/pad_type_f$field_value, 16'b0000000000000000, /virtual_od_en_f$field_value, /od_en_f$field_value, /io_inversion_f$field_value, /pull_en_f$field_value, /pull_dir_f$field_value, /keeper_en_f$field_value, /schmitt_en_f$field_value, /input_enable_f$field_value};
                  $register_load_next0 = /pad_type_f$load_next||/virtual_od_en_f$load_next||/od_en_f$load_next||/io_inversion_f$load_next||/pull_en_f$load_next||/pull_dir_f$load_next||/keeper_en_f$load_next||/schmitt_en_f$load_next||/input_enable_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/pad_type_f$field_value', left: 0, width: 8}, {value: '/virtual_od_en_f$field_value', left: 24, width: 1}, {value: '/od_en_f$field_value', left: 25, width: 1}, {value: '/io_inversion_f$field_value', left: 26, width: 1}, {value: '/pull_en_f$field_value', left: 27, width: 1}, {value: '/pull_dir_f$field_value', left: 28, width: 1}, {value: '/keeper_en_f$field_value', left: 29, width: 1}, {value: '/schmitt_en_f$field_value', left: 30, width: 1}, {value: '/input_enable_f$field_value', left: 31, width: 1}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "SOC_PAD_CONF", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 960}
                  /input_enable_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.INPUT_ENABLE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.INPUT_ENABLE.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "INPUT_ENABLE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1970, top: -10}
                  /schmitt_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.SCHMITT_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.SCHMITT_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "SCHMITT_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1920, top: -10}
                  /keeper_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.KEEPER_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.KEEPER_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "KEEPER_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1870, top: -10}
                  /pull_dir_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_DIR.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_DIR.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "PULL_DIR", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1820, top: -10}
                  /pull_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "PULL_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1770, top: -10}
                  /io_inversion_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.IO_INVERSION.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.IO_INVERSION.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "IO_INVERSION", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1720, top: -10}
                  /od_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.OD_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.OD_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "OD_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1670, top: -10}
                  /virtual_od_en_f
                     $field_value[0:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.VIRTUAL_OD_EN.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.VIRTUAL_OD_EN.load_next;
                     \viz_js
                        box: {width: 50, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 10,
                              left: 25.0,
                              fontSize: 10,
                           }, {
                              top: 65.0,
                              left: 25.0,
                              fontSize: 46,
                           }, {
                              top: 120,
                              left: 25.0,
                              fontSize: 10,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "" + '$field_value'.asBinaryStr(), "VIRTUAL_OD_EN", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1620, top: -10}
                  /pad_type_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PAD_TYPE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PAD_TYPE.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "PAD_TYPE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /soc_pad_attr_r
                  $register_value[31:0] = {/drive_strength_f$field_value, 8'b00000000, /drive_slew_rate_f$field_value, 8'b00000000};
                  $register_load_next0 = /drive_strength_f$load_next||/drive_slew_rate_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/drive_strength_f$field_value', left: 0, width: 8}, {value: '/drive_slew_rate_f$field_value', left: 16, width: 8}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "SOC_PAD_ATTR", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 1100}
                  /drive_slew_rate_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_SLEW_RATE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_SLEW_RATE.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "DRIVE_SLEW_RATE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1220, top: -10}
                  /drive_strength_f
                     $field_value[7:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_STRENGTH.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_STRENGTH.load_next;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "DRIVE_STRENGTH", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /soc_mgmt_feature_d2_r
                  $register_value[31:0] = {/placeholder_f$field_value};
                  $register_load_next0 = /placeholder_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/placeholder_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "SOC_MGMT_FEATURE_2", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 1240}
                  /placeholder_f
                     $field_value[31:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2.PLACEHOLDER.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2.PLACEHOLDER.load_next;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "PLACEHOLDER", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /soc_mgmt_feature_d3_r
                  $register_value[31:0] = {/placeholder_f$field_value};
                  $register_load_next0 = /placeholder_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/placeholder_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "SOC_MGMT_FEATURE_3", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 1380}
                  /placeholder_f
                     $field_value[31:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3.PLACEHOLDER.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3.PLACEHOLDER.load_next;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "PLACEHOLDER", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /dt_r_reg_r
                  $register_value[31:0] = {12'b000000000000, /dt_r_f$field_value};
                  $register_load_next0 = /dt_r_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/dt_r_f$field_value', left: 12, width: 20}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "T_R_REG", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 1520}
                  /dt_r_f
                     $field_value[19:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.T_R_REG.T_R.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.T_R_REG.T_R.load_next;
                     \viz_js
                        box: {width: 1000, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 500.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 500.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 500.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "20''h" + '$field_value'.asHexStr(), "T_R", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1020, top: -10}
               /dt_f_reg_r
                  $register_value[31:0] = {12'b000000000000, /dt_f_f$field_value};
                  $register_load_next0 = /dt_f_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/dt_f_f$field_value', left: 12, width: 20}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "T_F_REG", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 1660}
                  /dt_f_f
                     $field_value[19:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.T_F_REG.T_F.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.T_F_REG.T_F.load_next;
                     \viz_js
                        box: {width: 1000, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 500.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 500.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 500.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "20''h" + '$field_value'.asHexStr(), "T_F", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1020, top: -10}
               /dt_su_dat_reg_r
                  $register_value[31:0] = {12'b000000000000, /dt_su_dat_f$field_value};
                  $register_load_next0 = /dt_su_dat_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/dt_su_dat_f$field_value', left: 12, width: 20}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "T_SU_DAT_REG", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 1800}
                  /dt_su_dat_f
                     $field_value[19:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.T_SU_DAT_REG.T_SU_DAT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.T_SU_DAT_REG.T_SU_DAT.load_next;
                     \viz_js
                        box: {width: 1000, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 500.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 500.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 500.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "20''h" + '$field_value'.asHexStr(), "T_SU_DAT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1020, top: -10}
               /dt_hd_dat_reg_r
                  $register_value[31:0] = {12'b000000000000, /dt_hd_dat_f$field_value};
                  $register_load_next0 = /dt_hd_dat_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/dt_hd_dat_f$field_value', left: 12, width: 20}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "T_HD_DAT_REG", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 1940}
                  /dt_hd_dat_f
                     $field_value[19:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.T_HD_DAT_REG.T_HD_DAT.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.T_HD_DAT_REG.T_HD_DAT.load_next;
                     \viz_js
                        box: {width: 1000, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 500.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 500.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 500.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "20''h" + '$field_value'.asHexStr(), "T_HD_DAT", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1020, top: -10}
               /dt_high_reg_r
                  $register_value[31:0] = {12'b000000000000, /dt_high_f$field_value};
                  $register_load_next0 = /dt_high_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/dt_high_f$field_value', left: 12, width: 20}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "T_HIGH_REG", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 2080}
                  /dt_high_f
                     $field_value[19:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.T_HIGH_REG.T_HIGH.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.T_HIGH_REG.T_HIGH.load_next;
                     \viz_js
                        box: {width: 1000, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 500.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 500.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 500.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "20''h" + '$field_value'.asHexStr(), "T_HIGH", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1020, top: -10}
               /dt_low_reg_r
                  $register_value[31:0] = {12'b000000000000, /dt_low_f$field_value};
                  $register_load_next0 = /dt_low_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/dt_low_f$field_value', left: 12, width: 20}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "T_LOW_REG", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 2220}
                  /dt_low_f
                     $field_value[19:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.T_LOW_REG.T_LOW.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.T_LOW_REG.T_LOW.load_next;
                     \viz_js
                        box: {width: 1000, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 500.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 500.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 500.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "20''h" + '$field_value'.asHexStr(), "T_LOW", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1020, top: -10}
               /dt_hd_sta_reg_r
                  $register_value[31:0] = {12'b000000000000, /dt_hd_sta_f$field_value};
                  $register_load_next0 = /dt_hd_sta_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/dt_hd_sta_f$field_value', left: 12, width: 20}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "T_HD_STA_REG", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 2360}
                  /dt_hd_sta_f
                     $field_value[19:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.T_HD_STA_REG.T_HD_STA.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.T_HD_STA_REG.T_HD_STA.load_next;
                     \viz_js
                        box: {width: 1000, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 500.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 500.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 500.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "20''h" + '$field_value'.asHexStr(), "T_HD_STA", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1020, top: -10}
               /dt_su_sta_reg_r
                  $register_value[31:0] = {12'b000000000000, /dt_su_sta_f$field_value};
                  $register_load_next0 = /dt_su_sta_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/dt_su_sta_f$field_value', left: 12, width: 20}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "T_SU_STA_REG", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 2500}
                  /dt_su_sta_f
                     $field_value[19:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.T_SU_STA_REG.T_SU_STA.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.T_SU_STA_REG.T_SU_STA.load_next;
                     \viz_js
                        box: {width: 1000, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 500.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 500.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 500.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "20''h" + '$field_value'.asHexStr(), "T_SU_STA", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1020, top: -10}
               /dt_su_sto_reg_r
                  $register_value[31:0] = {12'b000000000000, /dt_su_sto_f$field_value};
                  $register_load_next0 = /dt_su_sto_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/dt_su_sto_f$field_value', left: 12, width: 20}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "T_SU_STO_REG", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 2640}
                  /dt_su_sto_f
                     $field_value[19:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.T_SU_STO_REG.T_SU_STO.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.T_SU_STO_REG.T_SU_STO.load_next;
                     \viz_js
                        box: {width: 1000, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 500.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 500.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 500.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "20''h" + '$field_value'.asHexStr(), "T_SU_STO", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1020, top: -10}
               /dt_free_reg_r
                  $register_value[31:0] = {/dt_free_f$field_value};
                  $register_load_next0 = /dt_free_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/dt_free_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "T_FREE_REG", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 2780}
                  /dt_free_f
                     $field_value[31:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.T_FREE_REG.T_FREE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.T_FREE_REG.T_FREE.load_next;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "T_FREE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /dt_aval_reg_r
                  $register_value[31:0] = {/dt_aval_f$field_value};
                  $register_load_next0 = /dt_aval_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/dt_aval_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "T_AVAL_REG", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 2920}
                  /dt_aval_f
                     $field_value[31:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.T_AVAL_REG.T_AVAL.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.T_AVAL_REG.T_AVAL.load_next;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "T_AVAL", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
               /dt_idle_reg_r
                  $register_value[31:0] = {/dt_idle_f$field_value};
                  $register_load_next0 = /dt_idle_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/dt_idle_f$field_value', left: 0, width: 32}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "T_IDLE_REG", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 3060}
                  /dt_idle_f
                     $field_value[31:0] = I3CCSR.field_storage.I3C_EC.SoCMgmtIf.T_IDLE_REG.T_IDLE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.SoCMgmtIf.T_IDLE_REG.T_IDLE.load_next;
                     \viz_js
                        box: {width: 1600, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 800.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 800.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 800.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "32''h" + '$field_value'.asHexStr(), "T_IDLE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 420, top: -10}
            /ctrlcfg_r
               \viz_js
                  box: {strokeWidth: 0},
                  init() {
                     return '/top_viz'.init_node({
                        width: 100,
                        height: 250,
                        fill: "#F5CF9F",
                     }, {
                        top: 125.0,
                        left: 50.0,
                        fontSize: 30,
                     })
                  },
                  render() {
                     let obj = this.getObjects()
                     obj.label.set({fill: "black", text: "CtrlCfg"})
                  },
                  where: {left: 160, top: 12300}
               /extcap_header_r
                  $register_value[31:0] = {8'b00000000, /cap_length_f$field_value, /cap_id_f$field_value};
                  $register_load_next0 = /cap_length_f$load_next||/cap_id_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/cap_length_f$field_value', left: 8, width: 16}, {value: '/cap_id_f$field_value', left: 24, width: 8}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "EXTCAP_HEADER", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: -20}
                  /cap_id_f
                     $field_value[7:0] = 0;
                     $load_next = 0;
                     \viz_js
                        box: {width: 400, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 200.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 200.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 200.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "CAP_ID", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1620, top: -10}
                  /cap_length_f
                     $field_value[15:0] = 0;
                     $load_next = 0;
                     \viz_js
                        box: {width: 800, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 400.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 400.0,
                              fontSize: 44,
                           }, {
                              top: 110,
                              left: 400.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "16''h" + '$field_value'.asHexStr(), "CAP_LENGTH", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 820, top: -10}
               /controller_config_r
                  $register_value[31:0] = {26'b00000000000000000000000000, /operation_mode_f$field_value, 4'b0000};
                  $register_load_next0 = /operation_mode_f$load_next;

                  \viz_js
                     box: {strokeWidth: 0},
                     init() {
                        return '/top_viz'.init_register([{
                           width: 1610,
                           height: 140,
                           left: 410,
                           top: -20,
                           strokeWidth: 10,
                        },], {
                           width: 350,
                           height: 110,
                        }, {
                           top: 30.0,
                           left: 175.0,
                           fontSize: 25,
                        }, {
                           top: 80.0,
                           left: 175.0,
                           fontSize: 25,
                        })
                     },
                     render() {
                        let obj = this.getObjects()
                        let load_nexts = []
                        let fields = [[{value: '/operation_mode_f$field_value', left: 26, width: 2}]]
                        load_nexts.push('$register_load_next0')
                        let action_signals = []
                        action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                        action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                        return '/top_viz'.render_register(obj, "CONTROLLER_CONFIG", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                     },
                     where: {left: 160.0, top: 120}
                  /operation_mode_f
                     $field_value[1:0] = I3CCSR.field_storage.I3C_EC.CtrlCfg.CONTROLLER_CONFIG.OPERATION_MODE.value;
                     $load_next = I3CCSR.field_combo.I3C_EC.CtrlCfg.CONTROLLER_CONFIG.OPERATION_MODE.load_next;
                     \viz_js
                        box: {width: 100, height: 130, strokeWidth: 1},
                        init() {
                           return '/top_viz'.init_field({
                              top: 20,
                              left: 50.0,
                              fontSize: 20,
                           }, {
                              top: 65.0,
                              left: 50.0,
                              fontSize: 32,
                           }, {
                              top: 110,
                              left: 50.0,
                              fontSize: 20,
                           })
                        },
                        renderFill() {
                           let obj = this.getObjects()
                           let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                           return '/top_viz'.render_field(obj, "2''b" + '$field_value'.asBinaryStr(), "OPERATION_MODE", '$load_next'.step(-1).asBool(), sw_write)
                        },
                        where: {left: 1720, top: -10}
            /termination_extcap_header_r
               $register_value[31:0] = {8'b00000000, /cap_length_f$field_value, /cap_id_f$field_value};
               $register_load_next0 = /cap_length_f$load_next||/cap_id_f$load_next;

               \viz_js
                  box: {strokeWidth: 0},
                  init() {
                     return '/top_viz'.init_register([{
                        width: 1610,
                        height: 140,
                        left: 410,
                        top: -20,
                        strokeWidth: 10,
                     },], {
                        width: 350,
                        height: 110,
                     }, {
                        top: 30.0,
                        left: 175.0,
                        fontSize: 25,
                     }, {
                        top: 80.0,
                        left: 175.0,
                        fontSize: 25,
                     })
                  },
                  render() {
                     let obj = this.getObjects()
                     let load_nexts = []
                     let fields = [[{value: '/cap_length_f$field_value', left: 8, width: 16}, {value: '/cap_id_f$field_value', left: 24, width: 8}]]
                     load_nexts.push('$register_load_next0')
                     let action_signals = []
                     action_signals.push(this.sigVal(`I3CCSR.cpuif_req`).step(-1))
                     action_signals.push(this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1))
                     return '/top_viz'.render_register(obj, "TERMINATION_EXTCAP_HEADER", 32, '$register_value'.asHexStr(), 1, load_nexts, fields, action_signals)
                  },
                  where: {left: 320.0, top: 12580}
               /cap_id_f
                  $field_value[7:0] = 0;
                  $load_next = 0;
                  \viz_js
                     box: {width: 400, height: 130, strokeWidth: 1},
                     init() {
                        return '/top_viz'.init_field({
                           top: 20,
                           left: 200.0,
                           fontSize: 20,
                        }, {
                           top: 65.0,
                           left: 200.0,
                           fontSize: 44,
                        }, {
                           top: 110,
                           left: 200.0,
                           fontSize: 20,
                        })
                     },
                     renderFill() {
                        let obj = this.getObjects()
                        let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                        return '/top_viz'.render_field(obj, "8''h" + '$field_value'.asHexStr(), "CAP_ID", '$load_next'.step(-1).asBool(), sw_write)
                     },
                     where: {left: 1620, top: -10}
               /cap_length_f
                  $field_value[15:0] = 0;
                  $load_next = 0;
                  \viz_js
                     box: {width: 800, height: 130, strokeWidth: 1},
                     init() {
                        return '/top_viz'.init_field({
                           top: 20,
                           left: 400.0,
                           fontSize: 20,
                        }, {
                           top: 65.0,
                           left: 400.0,
                           fontSize: 44,
                        }, {
                           top: 110,
                           left: 400.0,
                           fontSize: 20,
                        })
                     },
                     renderFill() {
                        let obj = this.getObjects()
                        let sw_write = this.sigVal(`I3CCSR.cpuif_req`).step(-1).asInt() & this.sigVal(`I3CCSR.decoded_req_is_wr`).step(-1).asInt()
                        return '/top_viz'.render_field(obj, "16''h" + '$field_value'.asHexStr(), "CAP_LENGTH", '$load_next'.step(-1).asBool(), sw_write)
                     },
                     where: {left: 820, top: -10}

\SV
endmodule

// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module I3CCSR (
        input wire clk,
        input wire rst,

        input wire s_apb_psel,
        input wire s_apb_penable,
        input wire s_apb_pwrite,
        input wire [9:0] s_apb_paddr,
        input wire [31:0] s_apb_pwdata,
        output logic s_apb_pready,
        output logic [31:0] s_apb_prdata,
        output logic s_apb_pslverr,

        input I3CCSR_pkg::I3CCSR__in_t hwif_in,
        output I3CCSR_pkg::I3CCSR__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [9:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    // Request
    logic is_active;
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            is_active <= '0;
            cpuif_req <= '0;
            cpuif_req_is_wr <= '0;
            cpuif_addr <= '0;
            cpuif_wr_data <= '0;
        end else begin
            if(~is_active) begin
                if(s_apb_psel) begin
                    is_active <= '1;
                    cpuif_req <= '1;
                    cpuif_req_is_wr <= s_apb_pwrite;
                    cpuif_addr <= {s_apb_paddr[9:2], 2'b0};
                    cpuif_wr_data <= s_apb_pwdata;
                end
            end else begin
                cpuif_req <= '0;
                if(cpuif_rd_ack || cpuif_wr_ack) begin
                    is_active <= '0;
                end
            end
        end
    end
    assign cpuif_wr_biten = '1;

    // Response
    assign s_apb_pready = cpuif_rd_ack | cpuif_wr_ack;
    assign s_apb_prdata = cpuif_rd_data;
    assign s_apb_pslverr = cpuif_rd_err | cpuif_wr_err;

    logic cpuif_req_masked;
    logic external_req;
    logic external_pending;
    logic external_wr_ack;
    logic external_rd_ack;
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            external_pending <= '0;
        end else begin
            if(external_req & ~external_wr_ack & ~external_rd_ack) external_pending <= '1;
            else if(external_wr_ack | external_rd_ack) external_pending <= '0;
            `ifndef SYNTHESIS
                assert(!external_wr_ack || (external_pending | external_req))
                    else $error("An external wr_ack strobe was asserted when no external request was active");
                assert(!external_rd_ack || (external_pending | external_req))
                    else $error("An external rd_ack strobe was asserted when no external request was active");
            `endif
        end
    end

    // Read & write latencies are balanced. Stalls not required
    // except if external
    assign cpuif_req_stall_rd = external_pending;
    assign cpuif_req_stall_wr = external_pending;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            struct {
                logic EXTCAP_HEADER;
                logic PROT_CAP_0;
                logic PROT_CAP_1;
                logic PROT_CAP_2;
                logic PROT_CAP_3;
                logic DEVICE_ID_0;
                logic DEVICE_ID_1;
                logic DEVICE_ID_2;
                logic DEVICE_ID_3;
                logic DEVICE_ID_4;
                logic DEVICE_ID_5;
                logic DEVICE_ID_RESERVED;
                logic DEVICE_STATUS_0;
                logic DEVICE_STATUS_1;
                logic DEVICE_RESET;
                logic RECOVERY_CTRL;
                logic RECOVERY_STATUS;
                logic HW_STATUS;
                logic INDIRECT_FIFO_CTRL_0;
                logic INDIRECT_FIFO_CTRL_1;
                logic INDIRECT_FIFO_STATUS_0;
                logic INDIRECT_FIFO_STATUS_1;
                logic INDIRECT_FIFO_STATUS_2;
                logic INDIRECT_FIFO_STATUS_3;
                logic INDIRECT_FIFO_STATUS_4;
                logic INDIRECT_FIFO_RESERVED;
                logic INDIRECT_FIFO_DATA;
            } SecFwRecoveryIf;
            struct {
                logic EXTCAP_HEADER;
                logic STBY_CR_CONTROL;
                logic STBY_CR_DEVICE_ADDR;
                logic STBY_CR_CAPABILITIES;
                logic STBY_CR_VIRTUAL_DEVICE_CHAR;
                logic STBY_CR_STATUS;
                logic STBY_CR_DEVICE_CHAR;
                logic STBY_CR_DEVICE_PID_LO;
                logic STBY_CR_INTR_STATUS;
                logic STBY_CR_VIRTUAL_DEVICE_PID_LO;
                logic STBY_CR_INTR_SIGNAL_ENABLE;
                logic STBY_CR_INTR_FORCE;
                logic STBY_CR_CCC_CONFIG_GETCAPS;
                logic STBY_CR_CCC_CONFIG_RSTACT_PARAMS;
                logic STBY_CR_VIRT_DEVICE_ADDR;
                logic __rsvd_3;
            } StdbyCtrlMode;
            struct {
                logic EXTCAP_HEADER;
                logic CONTROL;
                logic STATUS;
                logic RESET_CONTROL;
                logic INTERRUPT_STATUS;
                logic INTERRUPT_ENABLE;
                logic INTERRUPT_FORCE;
                logic RX_DESC_QUEUE_PORT;
                logic RX_DATA_PORT;
                logic TX_DESC_QUEUE_PORT;
                logic TX_DATA_PORT;
                logic IBI_PORT;
                logic QUEUE_SIZE;
                logic IBI_QUEUE_SIZE;
                logic QUEUE_THLD_CTRL;
                logic DATA_BUFFER_THLD_CTRL;
            } TTI;
            struct {
                logic EXTCAP_HEADER;
                logic SOC_MGMT_CONTROL;
                logic SOC_MGMT_STATUS;
                logic REC_INTF_CFG;
                logic REC_INTF_REG_W1C_ACCESS;
                logic SOC_MGMT_RSVD_2;
                logic SOC_MGMT_RSVD_3;
                logic SOC_PAD_CONF;
                logic SOC_PAD_ATTR;
                logic SOC_MGMT_FEATURE_2;
                logic SOC_MGMT_FEATURE_3;
                logic T_R_REG;
                logic T_F_REG;
                logic T_SU_DAT_REG;
                logic T_HD_DAT_REG;
                logic T_HIGH_REG;
                logic T_LOW_REG;
                logic T_HD_STA_REG;
                logic T_SU_STA_REG;
                logic T_SU_STO_REG;
                logic T_FREE_REG;
                logic T_AVAL_REG;
                logic T_IDLE_REG;
            } SoCMgmtIf;
            struct {
                logic EXTCAP_HEADER;
                logic CONTROLLER_CONFIG;
            } CtrlCfg;
            logic TERMINATION_EXTCAP_HEADER;
        } I3C_EC;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_strb_is_external;

    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;

    always_comb begin
        automatic logic is_external;
        is_external = '0;
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.EXTCAP_HEADER = cpuif_req_masked & (cpuif_addr == 10'h100);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.PROT_CAP_0 = cpuif_req_masked & (cpuif_addr == 10'h104);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.PROT_CAP_1 = cpuif_req_masked & (cpuif_addr == 10'h108);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.PROT_CAP_2 = cpuif_req_masked & (cpuif_addr == 10'h10c);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.PROT_CAP_3 = cpuif_req_masked & (cpuif_addr == 10'h110);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0 = cpuif_req_masked & (cpuif_addr == 10'h114);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1 = cpuif_req_masked & (cpuif_addr == 10'h118);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2 = cpuif_req_masked & (cpuif_addr == 10'h11c);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3 = cpuif_req_masked & (cpuif_addr == 10'h120);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4 = cpuif_req_masked & (cpuif_addr == 10'h124);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5 = cpuif_req_masked & (cpuif_addr == 10'h128);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_RESERVED = cpuif_req_masked & (cpuif_addr == 10'h12c);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0 = cpuif_req_masked & (cpuif_addr == 10'h130);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1 = cpuif_req_masked & (cpuif_addr == 10'h134);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_RESET = cpuif_req_masked & (cpuif_addr == 10'h138);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL = cpuif_req_masked & (cpuif_addr == 10'h13c);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS = cpuif_req_masked & (cpuif_addr == 10'h140);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.HW_STATUS = cpuif_req_masked & (cpuif_addr == 10'h144);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0 = cpuif_req_masked & (cpuif_addr == 10'h148);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1 = cpuif_req_masked & (cpuif_addr == 10'h14c);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0 = cpuif_req_masked & (cpuif_addr == 10'h150);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1 = cpuif_req_masked & (cpuif_addr == 10'h154);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2 = cpuif_req_masked & (cpuif_addr == 10'h158);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3 = cpuif_req_masked & (cpuif_addr == 10'h15c);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_4 = cpuif_req_masked & (cpuif_addr == 10'h160);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_RESERVED = cpuif_req_masked & (cpuif_addr == 10'h164);
        decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_DATA = cpuif_req_masked & (cpuif_addr == 10'h168);
        is_external |= cpuif_req_masked & (cpuif_addr == 10'h168) & !cpuif_req_is_wr;
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.EXTCAP_HEADER = cpuif_req_masked & (cpuif_addr == 10'h180);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL = cpuif_req_masked & (cpuif_addr == 10'h184);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR = cpuif_req_masked & (cpuif_addr == 10'h188);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES = cpuif_req_masked & (cpuif_addr == 10'h18c);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR = cpuif_req_masked & (cpuif_addr == 10'h190);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS = cpuif_req_masked & (cpuif_addr == 10'h194);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR = cpuif_req_masked & (cpuif_addr == 10'h198);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO = cpuif_req_masked & (cpuif_addr == 10'h19c);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS = cpuif_req_masked & (cpuif_addr == 10'h1a0);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_PID_LO = cpuif_req_masked & (cpuif_addr == 10'h1a4);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE = cpuif_req_masked & (cpuif_addr == 10'h1a8);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE = cpuif_req_masked & (cpuif_addr == 10'h1ac);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS = cpuif_req_masked & (cpuif_addr == 10'h1b0);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS = cpuif_req_masked & (cpuif_addr == 10'h1b4);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR = cpuif_req_masked & (cpuif_addr == 10'h1b8);
        decoded_reg_strb.I3C_EC.StdbyCtrlMode.__rsvd_3 = cpuif_req_masked & (cpuif_addr == 10'h1bc);
        decoded_reg_strb.I3C_EC.TTI.EXTCAP_HEADER = cpuif_req_masked & (cpuif_addr == 10'h1c0);
        decoded_reg_strb.I3C_EC.TTI.CONTROL = cpuif_req_masked & (cpuif_addr == 10'h1c4);
        decoded_reg_strb.I3C_EC.TTI.STATUS = cpuif_req_masked & (cpuif_addr == 10'h1c8);
        decoded_reg_strb.I3C_EC.TTI.RESET_CONTROL = cpuif_req_masked & (cpuif_addr == 10'h1cc);
        decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS = cpuif_req_masked & (cpuif_addr == 10'h1d0);
        decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE = cpuif_req_masked & (cpuif_addr == 10'h1d4);
        decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE = cpuif_req_masked & (cpuif_addr == 10'h1d8);
        decoded_reg_strb.I3C_EC.TTI.RX_DESC_QUEUE_PORT = cpuif_req_masked & (cpuif_addr == 10'h1dc);
        is_external |= cpuif_req_masked & (cpuif_addr == 10'h1dc) & !cpuif_req_is_wr;
        decoded_reg_strb.I3C_EC.TTI.RX_DATA_PORT = cpuif_req_masked & (cpuif_addr == 10'h1e0);
        is_external |= cpuif_req_masked & (cpuif_addr == 10'h1e0) & !cpuif_req_is_wr;
        decoded_reg_strb.I3C_EC.TTI.TX_DESC_QUEUE_PORT = cpuif_req_masked & (cpuif_addr == 10'h1e4);
        is_external |= cpuif_req_masked & (cpuif_addr == 10'h1e4) & cpuif_req_is_wr;
        decoded_reg_strb.I3C_EC.TTI.TX_DATA_PORT = cpuif_req_masked & (cpuif_addr == 10'h1e8);
        is_external |= cpuif_req_masked & (cpuif_addr == 10'h1e8) & cpuif_req_is_wr;
        decoded_reg_strb.I3C_EC.TTI.IBI_PORT = cpuif_req_masked & (cpuif_addr == 10'h1ec);
        is_external |= cpuif_req_masked & (cpuif_addr == 10'h1ec) & cpuif_req_is_wr;
        decoded_reg_strb.I3C_EC.TTI.QUEUE_SIZE = cpuif_req_masked & (cpuif_addr == 10'h1f0);
        decoded_reg_strb.I3C_EC.TTI.IBI_QUEUE_SIZE = cpuif_req_masked & (cpuif_addr == 10'h1f4);
        decoded_reg_strb.I3C_EC.TTI.QUEUE_THLD_CTRL = cpuif_req_masked & (cpuif_addr == 10'h1f8);
        decoded_reg_strb.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL = cpuif_req_masked & (cpuif_addr == 10'h1fc);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.EXTCAP_HEADER = cpuif_req_masked & (cpuif_addr == 10'h200);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL = cpuif_req_masked & (cpuif_addr == 10'h204);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS = cpuif_req_masked & (cpuif_addr == 10'h208);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.REC_INTF_CFG = cpuif_req_masked & (cpuif_addr == 10'h20c);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS = cpuif_req_masked & (cpuif_addr == 10'h210);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2 = cpuif_req_masked & (cpuif_addr == 10'h214);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3 = cpuif_req_masked & (cpuif_addr == 10'h218);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF = cpuif_req_masked & (cpuif_addr == 10'h21c);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR = cpuif_req_masked & (cpuif_addr == 10'h220);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2 = cpuif_req_masked & (cpuif_addr == 10'h224);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3 = cpuif_req_masked & (cpuif_addr == 10'h228);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.T_R_REG = cpuif_req_masked & (cpuif_addr == 10'h22c);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.T_F_REG = cpuif_req_masked & (cpuif_addr == 10'h230);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.T_SU_DAT_REG = cpuif_req_masked & (cpuif_addr == 10'h234);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.T_HD_DAT_REG = cpuif_req_masked & (cpuif_addr == 10'h238);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.T_HIGH_REG = cpuif_req_masked & (cpuif_addr == 10'h23c);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.T_LOW_REG = cpuif_req_masked & (cpuif_addr == 10'h240);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.T_HD_STA_REG = cpuif_req_masked & (cpuif_addr == 10'h244);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.T_SU_STA_REG = cpuif_req_masked & (cpuif_addr == 10'h248);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.T_SU_STO_REG = cpuif_req_masked & (cpuif_addr == 10'h24c);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.T_FREE_REG = cpuif_req_masked & (cpuif_addr == 10'h250);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.T_AVAL_REG = cpuif_req_masked & (cpuif_addr == 10'h254);
        decoded_reg_strb.I3C_EC.SoCMgmtIf.T_IDLE_REG = cpuif_req_masked & (cpuif_addr == 10'h258);
        decoded_reg_strb.I3C_EC.CtrlCfg.EXTCAP_HEADER = cpuif_req_masked & (cpuif_addr == 10'h260);
        decoded_reg_strb.I3C_EC.CtrlCfg.CONTROLLER_CONFIG = cpuif_req_masked & (cpuif_addr == 10'h264);
        decoded_reg_strb.I3C_EC.TERMINATION_EXTCAP_HEADER = cpuif_req_masked & (cpuif_addr == 10'h268);
        decoded_strb_is_external = is_external;
        external_req = is_external;
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            struct {
                struct {
                    struct {
                        logic [15:0] next;
                        logic load_next;
                    } REC_PROT_VERSION;
                    struct {
                        logic [15:0] next;
                        logic load_next;
                    } AGENT_CAPS;
                } PROT_CAP_2;
                struct {
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } NUM_OF_CMS_REGIONS;
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } MAX_RESP_TIME;
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } HEARTBEAT_PERIOD;
                } PROT_CAP_3;
                struct {
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } DESC_TYPE;
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } VENDOR_SPECIFIC_STR_LENGTH;
                    struct {
                        logic [15:0] next;
                        logic load_next;
                    } DATA;
                } DEVICE_ID_0;
                struct {
                    struct {
                        logic [31:0] next;
                        logic load_next;
                    } DATA;
                } DEVICE_ID_1;
                struct {
                    struct {
                        logic [31:0] next;
                        logic load_next;
                    } DATA;
                } DEVICE_ID_2;
                struct {
                    struct {
                        logic [31:0] next;
                        logic load_next;
                    } DATA;
                } DEVICE_ID_3;
                struct {
                    struct {
                        logic [31:0] next;
                        logic load_next;
                    } DATA;
                } DEVICE_ID_4;
                struct {
                    struct {
                        logic [31:0] next;
                        logic load_next;
                    } DATA;
                } DEVICE_ID_5;
                struct {
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } DEV_STATUS;
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } PROT_ERROR;
                    struct {
                        logic [15:0] next;
                        logic load_next;
                    } REC_REASON_CODE;
                } DEVICE_STATUS_0;
                struct {
                    struct {
                        logic [15:0] next;
                        logic load_next;
                    } HEARTBEAT;
                    struct {
                        logic [8:0] next;
                        logic load_next;
                    } VENDOR_STATUS_LENGTH;
                    struct {
                        logic [6:0] next;
                        logic load_next;
                    } VENDOR_STATUS;
                } DEVICE_STATUS_1;
                struct {
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } RESET_CTRL;
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } FORCED_RECOVERY;
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } IF_CTRL;
                } DEVICE_RESET;
                struct {
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } CMS;
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } REC_IMG_SEL;
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } ACTIVATE_REC_IMG;
                } RECOVERY_CTRL;
                struct {
                    struct {
                        logic [3:0] next;
                        logic load_next;
                    } DEV_REC_STATUS;
                    struct {
                        logic [3:0] next;
                        logic load_next;
                    } REC_IMG_INDEX;
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } VENDOR_SPECIFIC_STATUS;
                } RECOVERY_STATUS;
                struct {
                    struct {
                        logic next;
                        logic load_next;
                    } TEMP_CRITICAL;
                    struct {
                        logic next;
                        logic load_next;
                    } SOFT_ERR;
                    struct {
                        logic next;
                        logic load_next;
                    } FATAL_ERR;
                    struct {
                        logic [4:0] next;
                        logic load_next;
                    } RESERVED_7_3;
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } VENDOR_HW_STATUS;
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } CTEMP;
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } VENDOR_HW_STATUS_LEN;
                } HW_STATUS;
                struct {
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } CMS;
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } RESET;
                } INDIRECT_FIFO_CTRL_0;
                struct {
                    struct {
                        logic [31:0] next;
                        logic load_next;
                    } IMAGE_SIZE;
                } INDIRECT_FIFO_CTRL_1;
                struct {
                    struct {
                        logic next;
                        logic load_next;
                    } EMPTY;
                    struct {
                        logic next;
                        logic load_next;
                    } FULL;
                    struct {
                        logic [2:0] next;
                        logic load_next;
                    } REGION_TYPE;
                } INDIRECT_FIFO_STATUS_0;
                struct {
                    struct {
                        logic [31:0] next;
                        logic load_next;
                    } WRITE_INDEX;
                } INDIRECT_FIFO_STATUS_1;
                struct {
                    struct {
                        logic [31:0] next;
                        logic load_next;
                    } READ_INDEX;
                } INDIRECT_FIFO_STATUS_2;
                struct {
                    struct {
                        logic [31:0] next;
                        logic load_next;
                    } FIFO_SIZE;
                } INDIRECT_FIFO_STATUS_3;
                struct {
                    struct {
                        logic [31:0] next;
                        logic load_next;
                    } DATA;
                } INDIRECT_FIFO_RESERVED;
            } SecFwRecoveryIf;
            struct {
                struct {
                    struct {
                        logic next;
                        logic load_next;
                    } PENDING_RX_NACK;
                    struct {
                        logic next;
                        logic load_next;
                    } HANDOFF_DELAY_NACK;
                    struct {
                        logic next;
                        logic load_next;
                    } ACR_FSM_OP_SELECT;
                    struct {
                        logic next;
                        logic load_next;
                    } PRIME_ACCEPT_GETACCCR;
                    struct {
                        logic next;
                        logic load_next;
                    } HANDOFF_DEEP_SLEEP;
                    struct {
                        logic next;
                        logic load_next;
                    } CR_REQUEST_SEND;
                    struct {
                        logic [2:0] next;
                        logic load_next;
                    } BAST_CCC_IBI_RING;
                    struct {
                        logic next;
                        logic load_next;
                    } TARGET_XACT_ENABLE;
                    struct {
                        logic next;
                        logic load_next;
                    } DAA_SETAASA_ENABLE;
                    struct {
                        logic next;
                        logic load_next;
                    } DAA_SETDASA_ENABLE;
                    struct {
                        logic next;
                        logic load_next;
                    } DAA_ENTDAA_ENABLE;
                    struct {
                        logic next;
                        logic load_next;
                    } RSTACT_DEFBYTE_02;
                    struct {
                        logic [1:0] next;
                        logic load_next;
                    } STBY_CR_ENABLE_INIT;
                } STBY_CR_CONTROL;
                struct {
                    struct {
                        logic [6:0] next;
                        logic load_next;
                    } STATIC_ADDR;
                    struct {
                        logic next;
                        logic load_next;
                    } STATIC_ADDR_VALID;
                    struct {
                        logic [6:0] next;
                        logic load_next;
                    } DYNAMIC_ADDR;
                    struct {
                        logic next;
                        logic load_next;
                    } DYNAMIC_ADDR_VALID;
                } STBY_CR_DEVICE_ADDR;
                struct {
                    struct {
                        logic [14:0] next;
                        logic load_next;
                    } PID_HI;
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } DCR;
                    struct {
                        logic [4:0] next;
                        logic load_next;
                    } BCR_VAR;
                    struct {
                        logic [2:0] next;
                        logic load_next;
                    } BCR_FIXED;
                } STBY_CR_VIRTUAL_DEVICE_CHAR;
                struct {
                    struct {
                        logic next;
                        logic load_next;
                    } AC_CURRENT_OWN;
                    struct {
                        logic [2:0] next;
                        logic load_next;
                    } SIMPLE_CRR_STATUS;
                    struct {
                        logic next;
                        logic load_next;
                    } HJ_REQ_STATUS;
                } STBY_CR_STATUS;
                struct {
                    struct {
                        logic [14:0] next;
                        logic load_next;
                    } PID_HI;
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } DCR;
                    struct {
                        logic [4:0] next;
                        logic load_next;
                    } BCR_VAR;
                    struct {
                        logic [2:0] next;
                        logic load_next;
                    } BCR_FIXED;
                } STBY_CR_DEVICE_CHAR;
                struct {
                    struct {
                        logic [31:0] next;
                        logic load_next;
                    } PID_LO;
                } STBY_CR_DEVICE_PID_LO;
                struct {
                    struct {
                        logic next;
                        logic load_next;
                    } ACR_HANDOFF_OK_REMAIN_STAT;
                    struct {
                        logic next;
                        logic load_next;
                    } ACR_HANDOFF_OK_PRIMED_STAT;
                    struct {
                        logic next;
                        logic load_next;
                    } ACR_HANDOFF_ERR_FAIL_STAT;
                    struct {
                        logic next;
                        logic load_next;
                    } ACR_HANDOFF_ERR_M3_STAT;
                    struct {
                        logic next;
                        logic load_next;
                    } CRR_RESPONSE_STAT;
                    struct {
                        logic next;
                        logic load_next;
                    } STBY_CR_DYN_ADDR_STAT;
                    struct {
                        logic next;
                        logic load_next;
                    } STBY_CR_ACCEPT_NACKED_STAT;
                    struct {
                        logic next;
                        logic load_next;
                    } STBY_CR_ACCEPT_OK_STAT;
                    struct {
                        logic next;
                        logic load_next;
                    } STBY_CR_ACCEPT_ERR_STAT;
                    struct {
                        logic next;
                        logic load_next;
                    } STBY_CR_OP_RSTACT_STAT;
                    struct {
                        logic next;
                        logic load_next;
                    } CCC_PARAM_MODIFIED_STAT;
                    struct {
                        logic next;
                        logic load_next;
                    } CCC_UNHANDLED_NACK_STAT;
                    struct {
                        logic next;
                        logic load_next;
                    } CCC_FATAL_RSTDAA_ERR_STAT;
                } STBY_CR_INTR_STATUS;
                struct {
                    struct {
                        logic [31:0] next;
                        logic load_next;
                    } PID_LO;
                } STBY_CR_VIRTUAL_DEVICE_PID_LO;
                struct {
                    struct {
                        logic next;
                        logic load_next;
                    } ACR_HANDOFF_OK_REMAIN_SIGNAL_EN;
                    struct {
                        logic next;
                        logic load_next;
                    } ACR_HANDOFF_OK_PRIMED_SIGNAL_EN;
                    struct {
                        logic next;
                        logic load_next;
                    } ACR_HANDOFF_ERR_FAIL_SIGNAL_EN;
                    struct {
                        logic next;
                        logic load_next;
                    } ACR_HANDOFF_ERR_M3_SIGNAL_EN;
                    struct {
                        logic next;
                        logic load_next;
                    } CRR_RESPONSE_SIGNAL_EN;
                    struct {
                        logic next;
                        logic load_next;
                    } STBY_CR_DYN_ADDR_SIGNAL_EN;
                    struct {
                        logic next;
                        logic load_next;
                    } STBY_CR_ACCEPT_NACKED_SIGNAL_EN;
                    struct {
                        logic next;
                        logic load_next;
                    } STBY_CR_ACCEPT_OK_SIGNAL_EN;
                    struct {
                        logic next;
                        logic load_next;
                    } STBY_CR_ACCEPT_ERR_SIGNAL_EN;
                    struct {
                        logic next;
                        logic load_next;
                    } STBY_CR_OP_RSTACT_SIGNAL_EN;
                    struct {
                        logic next;
                        logic load_next;
                    } CCC_PARAM_MODIFIED_SIGNAL_EN;
                    struct {
                        logic next;
                        logic load_next;
                    } CCC_UNHANDLED_NACK_SIGNAL_EN;
                    struct {
                        logic next;
                        logic load_next;
                    } CCC_FATAL_RSTDAA_ERR_SIGNAL_EN;
                } STBY_CR_INTR_SIGNAL_ENABLE;
                struct {
                    struct {
                        logic next;
                        logic load_next;
                    } CRR_RESPONSE_FORCE;
                    struct {
                        logic next;
                        logic load_next;
                    } STBY_CR_DYN_ADDR_FORCE;
                    struct {
                        logic next;
                        logic load_next;
                    } STBY_CR_ACCEPT_NACKED_FORCE;
                    struct {
                        logic next;
                        logic load_next;
                    } STBY_CR_ACCEPT_OK_FORCE;
                    struct {
                        logic next;
                        logic load_next;
                    } STBY_CR_ACCEPT_ERR_FORCE;
                    struct {
                        logic next;
                        logic load_next;
                    } STBY_CR_OP_RSTACT_FORCE;
                    struct {
                        logic next;
                        logic load_next;
                    } CCC_PARAM_MODIFIED_FORCE;
                    struct {
                        logic next;
                        logic load_next;
                    } CCC_UNHANDLED_NACK_FORCE;
                    struct {
                        logic next;
                        logic load_next;
                    } CCC_FATAL_RSTDAA_ERR_FORCE;
                } STBY_CR_INTR_FORCE;
                struct {
                    struct {
                        logic [2:0] next;
                        logic load_next;
                    } F2_CRCAP1_BUS_CONFIG;
                    struct {
                        logic [3:0] next;
                        logic load_next;
                    } F2_CRCAP2_DEV_INTERACT;
                } STBY_CR_CCC_CONFIG_GETCAPS;
                struct {
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } RST_ACTION;
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } RESET_TIME_PERIPHERAL;
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } RESET_TIME_TARGET;
                    struct {
                        logic next;
                        logic load_next;
                    } RESET_DYNAMIC_ADDR;
                } STBY_CR_CCC_CONFIG_RSTACT_PARAMS;
                struct {
                    struct {
                        logic [6:0] next;
                        logic load_next;
                    } VIRT_STATIC_ADDR;
                    struct {
                        logic next;
                        logic load_next;
                    } VIRT_STATIC_ADDR_VALID;
                    struct {
                        logic [6:0] next;
                        logic load_next;
                    } VIRT_DYNAMIC_ADDR;
                    struct {
                        logic next;
                        logic load_next;
                    } VIRT_DYNAMIC_ADDR_VALID;
                } STBY_CR_VIRT_DEVICE_ADDR;
                struct {
                    struct {
                        logic [31:0] next;
                        logic load_next;
                    } __rsvd;
                } __rsvd_3;
            } StdbyCtrlMode;
            struct {
                struct {
                    struct {
                        logic next;
                        logic load_next;
                    } HJ_EN;
                    struct {
                        logic next;
                        logic load_next;
                    } CRR_EN;
                    struct {
                        logic next;
                        logic load_next;
                    } IBI_EN;
                    struct {
                        logic [2:0] next;
                        logic load_next;
                    } IBI_RETRY_NUM;
                } CONTROL;
                struct {
                    struct {
                        logic next;
                        logic load_next;
                    } PROTOCOL_ERROR;
                    struct {
                        logic [1:0] next;
                        logic load_next;
                    } LAST_IBI_STATUS;
                } STATUS;
                struct {
                    struct {
                        logic next;
                        logic load_next;
                    } SOFT_RST;
                    struct {
                        logic next;
                        logic load_next;
                    } TX_DESC_RST;
                    struct {
                        logic next;
                        logic load_next;
                    } RX_DESC_RST;
                    struct {
                        logic next;
                        logic load_next;
                    } TX_DATA_RST;
                    struct {
                        logic next;
                        logic load_next;
                    } RX_DATA_RST;
                    struct {
                        logic next;
                        logic load_next;
                    } IBI_QUEUE_RST;
                } RESET_CONTROL;
                struct {
                    struct {
                        logic next;
                        logic load_next;
                    } RX_DESC_STAT;
                    struct {
                        logic next;
                        logic load_next;
                    } TX_DESC_STAT;
                    struct {
                        logic next;
                        logic load_next;
                    } RX_DESC_TIMEOUT;
                    struct {
                        logic next;
                        logic load_next;
                    } TX_DESC_TIMEOUT;
                    struct {
                        logic next;
                        logic load_next;
                    } TX_DATA_THLD_STAT;
                    struct {
                        logic next;
                        logic load_next;
                    } RX_DATA_THLD_STAT;
                    struct {
                        logic next;
                        logic load_next;
                    } TX_DESC_THLD_STAT;
                    struct {
                        logic next;
                        logic load_next;
                    } RX_DESC_THLD_STAT;
                    struct {
                        logic next;
                        logic load_next;
                    } IBI_THLD_STAT;
                    struct {
                        logic next;
                        logic load_next;
                    } IBI_DONE;
                    struct {
                        logic [3:0] next;
                        logic load_next;
                    } PENDING_INTERRUPT;
                    struct {
                        logic next;
                        logic load_next;
                    } TRANSFER_ABORT_STAT;
                    struct {
                        logic next;
                        logic load_next;
                    } TX_DESC_COMPLETE;
                    struct {
                        logic next;
                        logic load_next;
                    } TRANSFER_ERR_STAT;
                } INTERRUPT_STATUS;
                struct {
                    struct {
                        logic next;
                        logic load_next;
                    } RX_DESC_STAT_EN;
                    struct {
                        logic next;
                        logic load_next;
                    } TX_DESC_STAT_EN;
                    struct {
                        logic next;
                        logic load_next;
                    } RX_DESC_TIMEOUT_EN;
                    struct {
                        logic next;
                        logic load_next;
                    } TX_DESC_TIMEOUT_EN;
                    struct {
                        logic next;
                        logic load_next;
                    } TX_DATA_THLD_STAT_EN;
                    struct {
                        logic next;
                        logic load_next;
                    } RX_DATA_THLD_STAT_EN;
                    struct {
                        logic next;
                        logic load_next;
                    } TX_DESC_THLD_STAT_EN;
                    struct {
                        logic next;
                        logic load_next;
                    } RX_DESC_THLD_STAT_EN;
                    struct {
                        logic next;
                        logic load_next;
                    } IBI_THLD_STAT_EN;
                    struct {
                        logic next;
                        logic load_next;
                    } IBI_DONE_EN;
                    struct {
                        logic next;
                        logic load_next;
                    } TRANSFER_ABORT_STAT_EN;
                    struct {
                        logic next;
                        logic load_next;
                    } TX_DESC_COMPLETE_EN;
                    struct {
                        logic next;
                        logic load_next;
                    } TRANSFER_ERR_STAT_EN;
                } INTERRUPT_ENABLE;
                struct {
                    struct {
                        logic next;
                        logic load_next;
                    } RX_DESC_STAT_FORCE;
                    struct {
                        logic next;
                        logic load_next;
                    } TX_DESC_STAT_FORCE;
                    struct {
                        logic next;
                        logic load_next;
                    } RX_DESC_TIMEOUT_FORCE;
                    struct {
                        logic next;
                        logic load_next;
                    } TX_DESC_TIMEOUT_FORCE;
                    struct {
                        logic next;
                        logic load_next;
                    } TX_DATA_THLD_FORCE;
                    struct {
                        logic next;
                        logic load_next;
                    } RX_DATA_THLD_FORCE;
                    struct {
                        logic next;
                        logic load_next;
                    } TX_DESC_THLD_FORCE;
                    struct {
                        logic next;
                        logic load_next;
                    } RX_DESC_THLD_FORCE;
                    struct {
                        logic next;
                        logic load_next;
                    } IBI_THLD_FORCE;
                    struct {
                        logic next;
                        logic load_next;
                    } IBI_DONE_FORCE;
                    struct {
                        logic next;
                        logic load_next;
                    } TRANSFER_ABORT_STAT_FORCE;
                    struct {
                        logic next;
                        logic load_next;
                    } TX_DESC_COMPLETE_FORCE;
                    struct {
                        logic next;
                        logic load_next;
                    } TRANSFER_ERR_STAT_FORCE;
                } INTERRUPT_FORCE;
                struct {
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } TX_DESC_THLD;
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } RX_DESC_THLD;
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } IBI_THLD;
                } QUEUE_THLD_CTRL;
                struct {
                    struct {
                        logic [2:0] next;
                        logic load_next;
                    } TX_DATA_THLD;
                    struct {
                        logic [2:0] next;
                        logic load_next;
                    } RX_DATA_THLD;
                    struct {
                        logic [2:0] next;
                        logic load_next;
                    } TX_START_THLD;
                    struct {
                        logic [2:0] next;
                        logic load_next;
                    } RX_START_THLD;
                } DATA_BUFFER_THLD_CTRL;
            } TTI;
            struct {
                struct {
                    struct {
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } SOC_MGMT_CONTROL;
                struct {
                    struct {
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } SOC_MGMT_STATUS;
                struct {
                    struct {
                        logic next;
                        logic load_next;
                    } REC_INTF_BYPASS;
                    struct {
                        logic next;
                        logic load_next;
                    } REC_PAYLOAD_DONE;
                } REC_INTF_CFG;
                struct {
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } DEVICE_RESET_CTRL;
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } RECOVERY_CTRL_ACTIVATE_REC_IMG;
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } INDIRECT_FIFO_CTRL_RESET;
                } REC_INTF_REG_W1C_ACCESS;
                struct {
                    struct {
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } SOC_MGMT_RSVD_2;
                struct {
                    struct {
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } SOC_MGMT_RSVD_3;
                struct {
                    struct {
                        logic next;
                        logic load_next;
                    } INPUT_ENABLE;
                    struct {
                        logic next;
                        logic load_next;
                    } SCHMITT_EN;
                    struct {
                        logic next;
                        logic load_next;
                    } KEEPER_EN;
                    struct {
                        logic next;
                        logic load_next;
                    } PULL_DIR;
                    struct {
                        logic next;
                        logic load_next;
                    } PULL_EN;
                    struct {
                        logic next;
                        logic load_next;
                    } IO_INVERSION;
                    struct {
                        logic next;
                        logic load_next;
                    } OD_EN;
                    struct {
                        logic next;
                        logic load_next;
                    } VIRTUAL_OD_EN;
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } PAD_TYPE;
                } SOC_PAD_CONF;
                struct {
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } DRIVE_SLEW_RATE;
                    struct {
                        logic [7:0] next;
                        logic load_next;
                    } DRIVE_STRENGTH;
                } SOC_PAD_ATTR;
                struct {
                    struct {
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } SOC_MGMT_FEATURE_2;
                struct {
                    struct {
                        logic [31:0] next;
                        logic load_next;
                    } PLACEHOLDER;
                } SOC_MGMT_FEATURE_3;
                struct {
                    struct {
                        logic [19:0] next;
                        logic load_next;
                    } T_R;
                } T_R_REG;
                struct {
                    struct {
                        logic [19:0] next;
                        logic load_next;
                    } T_F;
                } T_F_REG;
                struct {
                    struct {
                        logic [19:0] next;
                        logic load_next;
                    } T_SU_DAT;
                } T_SU_DAT_REG;
                struct {
                    struct {
                        logic [19:0] next;
                        logic load_next;
                    } T_HD_DAT;
                } T_HD_DAT_REG;
                struct {
                    struct {
                        logic [19:0] next;
                        logic load_next;
                    } T_HIGH;
                } T_HIGH_REG;
                struct {
                    struct {
                        logic [19:0] next;
                        logic load_next;
                    } T_LOW;
                } T_LOW_REG;
                struct {
                    struct {
                        logic [19:0] next;
                        logic load_next;
                    } T_HD_STA;
                } T_HD_STA_REG;
                struct {
                    struct {
                        logic [19:0] next;
                        logic load_next;
                    } T_SU_STA;
                } T_SU_STA_REG;
                struct {
                    struct {
                        logic [19:0] next;
                        logic load_next;
                    } T_SU_STO;
                } T_SU_STO_REG;
                struct {
                    struct {
                        logic [31:0] next;
                        logic load_next;
                    } T_FREE;
                } T_FREE_REG;
                struct {
                    struct {
                        logic [31:0] next;
                        logic load_next;
                    } T_AVAL;
                } T_AVAL_REG;
                struct {
                    struct {
                        logic [31:0] next;
                        logic load_next;
                    } T_IDLE;
                } T_IDLE_REG;
            } SoCMgmtIf;
            struct {
                struct {
                    struct {
                        logic [1:0] next;
                        logic load_next;
                    } OPERATION_MODE;
                } CONTROLLER_CONFIG;
            } CtrlCfg;
        } I3C_EC;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct {
        struct {
            struct {
                struct {
                    struct {
                        logic [15:0] value;
                    } REC_PROT_VERSION;
                    struct {
                        logic [15:0] value;
                    } AGENT_CAPS;
                } PROT_CAP_2;
                struct {
                    struct {
                        logic [7:0] value;
                    } NUM_OF_CMS_REGIONS;
                    struct {
                        logic [7:0] value;
                    } MAX_RESP_TIME;
                    struct {
                        logic [7:0] value;
                    } HEARTBEAT_PERIOD;
                } PROT_CAP_3;
                struct {
                    struct {
                        logic [7:0] value;
                    } DESC_TYPE;
                    struct {
                        logic [7:0] value;
                    } VENDOR_SPECIFIC_STR_LENGTH;
                    struct {
                        logic [15:0] value;
                    } DATA;
                } DEVICE_ID_0;
                struct {
                    struct {
                        logic [31:0] value;
                    } DATA;
                } DEVICE_ID_1;
                struct {
                    struct {
                        logic [31:0] value;
                    } DATA;
                } DEVICE_ID_2;
                struct {
                    struct {
                        logic [31:0] value;
                    } DATA;
                } DEVICE_ID_3;
                struct {
                    struct {
                        logic [31:0] value;
                    } DATA;
                } DEVICE_ID_4;
                struct {
                    struct {
                        logic [31:0] value;
                    } DATA;
                } DEVICE_ID_5;
                struct {
                    struct {
                        logic [7:0] value;
                    } DEV_STATUS;
                    struct {
                        logic [7:0] value;
                    } PROT_ERROR;
                    struct {
                        logic [15:0] value;
                    } REC_REASON_CODE;
                } DEVICE_STATUS_0;
                struct {
                    struct {
                        logic [15:0] value;
                    } HEARTBEAT;
                    struct {
                        logic [8:0] value;
                    } VENDOR_STATUS_LENGTH;
                    struct {
                        logic [6:0] value;
                    } VENDOR_STATUS;
                } DEVICE_STATUS_1;
                struct {
                    struct {
                        logic [7:0] value;
                    } RESET_CTRL;
                    struct {
                        logic [7:0] value;
                    } FORCED_RECOVERY;
                    struct {
                        logic [7:0] value;
                    } IF_CTRL;
                } DEVICE_RESET;
                struct {
                    struct {
                        logic [7:0] value;
                    } CMS;
                    struct {
                        logic [7:0] value;
                    } REC_IMG_SEL;
                    struct {
                        logic [7:0] value;
                    } ACTIVATE_REC_IMG;
                } RECOVERY_CTRL;
                struct {
                    struct {
                        logic [3:0] value;
                    } DEV_REC_STATUS;
                    struct {
                        logic [3:0] value;
                    } REC_IMG_INDEX;
                    struct {
                        logic [7:0] value;
                    } VENDOR_SPECIFIC_STATUS;
                } RECOVERY_STATUS;
                struct {
                    struct {
                        logic value;
                    } TEMP_CRITICAL;
                    struct {
                        logic value;
                    } SOFT_ERR;
                    struct {
                        logic value;
                    } FATAL_ERR;
                    struct {
                        logic [4:0] value;
                    } RESERVED_7_3;
                    struct {
                        logic [7:0] value;
                    } VENDOR_HW_STATUS;
                    struct {
                        logic [7:0] value;
                    } CTEMP;
                    struct {
                        logic [7:0] value;
                    } VENDOR_HW_STATUS_LEN;
                } HW_STATUS;
                struct {
                    struct {
                        logic [7:0] value;
                    } CMS;
                    struct {
                        logic [7:0] value;
                    } RESET;
                } INDIRECT_FIFO_CTRL_0;
                struct {
                    struct {
                        logic [31:0] value;
                    } IMAGE_SIZE;
                } INDIRECT_FIFO_CTRL_1;
                struct {
                    struct {
                        logic value;
                    } EMPTY;
                    struct {
                        logic value;
                    } FULL;
                    struct {
                        logic [2:0] value;
                    } REGION_TYPE;
                } INDIRECT_FIFO_STATUS_0;
                struct {
                    struct {
                        logic [31:0] value;
                    } WRITE_INDEX;
                } INDIRECT_FIFO_STATUS_1;
                struct {
                    struct {
                        logic [31:0] value;
                    } READ_INDEX;
                } INDIRECT_FIFO_STATUS_2;
                struct {
                    struct {
                        logic [31:0] value;
                    } FIFO_SIZE;
                } INDIRECT_FIFO_STATUS_3;
                struct {
                    struct {
                        logic [31:0] value;
                    } DATA;
                } INDIRECT_FIFO_RESERVED;
            } SecFwRecoveryIf;
            struct {
                struct {
                    struct {
                        logic value;
                    } PENDING_RX_NACK;
                    struct {
                        logic value;
                    } HANDOFF_DELAY_NACK;
                    struct {
                        logic value;
                    } ACR_FSM_OP_SELECT;
                    struct {
                        logic value;
                    } PRIME_ACCEPT_GETACCCR;
                    struct {
                        logic value;
                    } HANDOFF_DEEP_SLEEP;
                    struct {
                        logic value;
                    } CR_REQUEST_SEND;
                    struct {
                        logic [2:0] value;
                    } BAST_CCC_IBI_RING;
                    struct {
                        logic value;
                    } TARGET_XACT_ENABLE;
                    struct {
                        logic value;
                    } DAA_SETAASA_ENABLE;
                    struct {
                        logic value;
                    } DAA_SETDASA_ENABLE;
                    struct {
                        logic value;
                    } DAA_ENTDAA_ENABLE;
                    struct {
                        logic value;
                    } RSTACT_DEFBYTE_02;
                    struct {
                        logic [1:0] value;
                    } STBY_CR_ENABLE_INIT;
                } STBY_CR_CONTROL;
                struct {
                    struct {
                        logic [6:0] value;
                    } STATIC_ADDR;
                    struct {
                        logic value;
                    } STATIC_ADDR_VALID;
                    struct {
                        logic [6:0] value;
                    } DYNAMIC_ADDR;
                    struct {
                        logic value;
                    } DYNAMIC_ADDR_VALID;
                } STBY_CR_DEVICE_ADDR;
                struct {
                    struct {
                        logic [14:0] value;
                    } PID_HI;
                    struct {
                        logic [7:0] value;
                    } DCR;
                    struct {
                        logic [4:0] value;
                    } BCR_VAR;
                    struct {
                        logic [2:0] value;
                    } BCR_FIXED;
                } STBY_CR_VIRTUAL_DEVICE_CHAR;
                struct {
                    struct {
                        logic value;
                    } AC_CURRENT_OWN;
                    struct {
                        logic [2:0] value;
                    } SIMPLE_CRR_STATUS;
                    struct {
                        logic value;
                    } HJ_REQ_STATUS;
                } STBY_CR_STATUS;
                struct {
                    struct {
                        logic [14:0] value;
                    } PID_HI;
                    struct {
                        logic [7:0] value;
                    } DCR;
                    struct {
                        logic [4:0] value;
                    } BCR_VAR;
                    struct {
                        logic [2:0] value;
                    } BCR_FIXED;
                } STBY_CR_DEVICE_CHAR;
                struct {
                    struct {
                        logic [31:0] value;
                    } PID_LO;
                } STBY_CR_DEVICE_PID_LO;
                struct {
                    struct {
                        logic value;
                    } ACR_HANDOFF_OK_REMAIN_STAT;
                    struct {
                        logic value;
                    } ACR_HANDOFF_OK_PRIMED_STAT;
                    struct {
                        logic value;
                    } ACR_HANDOFF_ERR_FAIL_STAT;
                    struct {
                        logic value;
                    } ACR_HANDOFF_ERR_M3_STAT;
                    struct {
                        logic value;
                    } CRR_RESPONSE_STAT;
                    struct {
                        logic value;
                    } STBY_CR_DYN_ADDR_STAT;
                    struct {
                        logic value;
                    } STBY_CR_ACCEPT_NACKED_STAT;
                    struct {
                        logic value;
                    } STBY_CR_ACCEPT_OK_STAT;
                    struct {
                        logic value;
                    } STBY_CR_ACCEPT_ERR_STAT;
                    struct {
                        logic value;
                    } STBY_CR_OP_RSTACT_STAT;
                    struct {
                        logic value;
                    } CCC_PARAM_MODIFIED_STAT;
                    struct {
                        logic value;
                    } CCC_UNHANDLED_NACK_STAT;
                    struct {
                        logic value;
                    } CCC_FATAL_RSTDAA_ERR_STAT;
                } STBY_CR_INTR_STATUS;
                struct {
                    struct {
                        logic [31:0] value;
                    } PID_LO;
                } STBY_CR_VIRTUAL_DEVICE_PID_LO;
                struct {
                    struct {
                        logic value;
                    } ACR_HANDOFF_OK_REMAIN_SIGNAL_EN;
                    struct {
                        logic value;
                    } ACR_HANDOFF_OK_PRIMED_SIGNAL_EN;
                    struct {
                        logic value;
                    } ACR_HANDOFF_ERR_FAIL_SIGNAL_EN;
                    struct {
                        logic value;
                    } ACR_HANDOFF_ERR_M3_SIGNAL_EN;
                    struct {
                        logic value;
                    } CRR_RESPONSE_SIGNAL_EN;
                    struct {
                        logic value;
                    } STBY_CR_DYN_ADDR_SIGNAL_EN;
                    struct {
                        logic value;
                    } STBY_CR_ACCEPT_NACKED_SIGNAL_EN;
                    struct {
                        logic value;
                    } STBY_CR_ACCEPT_OK_SIGNAL_EN;
                    struct {
                        logic value;
                    } STBY_CR_ACCEPT_ERR_SIGNAL_EN;
                    struct {
                        logic value;
                    } STBY_CR_OP_RSTACT_SIGNAL_EN;
                    struct {
                        logic value;
                    } CCC_PARAM_MODIFIED_SIGNAL_EN;
                    struct {
                        logic value;
                    } CCC_UNHANDLED_NACK_SIGNAL_EN;
                    struct {
                        logic value;
                    } CCC_FATAL_RSTDAA_ERR_SIGNAL_EN;
                } STBY_CR_INTR_SIGNAL_ENABLE;
                struct {
                    struct {
                        logic value;
                    } CRR_RESPONSE_FORCE;
                    struct {
                        logic value;
                    } STBY_CR_DYN_ADDR_FORCE;
                    struct {
                        logic value;
                    } STBY_CR_ACCEPT_NACKED_FORCE;
                    struct {
                        logic value;
                    } STBY_CR_ACCEPT_OK_FORCE;
                    struct {
                        logic value;
                    } STBY_CR_ACCEPT_ERR_FORCE;
                    struct {
                        logic value;
                    } STBY_CR_OP_RSTACT_FORCE;
                    struct {
                        logic value;
                    } CCC_PARAM_MODIFIED_FORCE;
                    struct {
                        logic value;
                    } CCC_UNHANDLED_NACK_FORCE;
                    struct {
                        logic value;
                    } CCC_FATAL_RSTDAA_ERR_FORCE;
                } STBY_CR_INTR_FORCE;
                struct {
                    struct {
                        logic [2:0] value;
                    } F2_CRCAP1_BUS_CONFIG;
                    struct {
                        logic [3:0] value;
                    } F2_CRCAP2_DEV_INTERACT;
                } STBY_CR_CCC_CONFIG_GETCAPS;
                struct {
                    struct {
                        logic [7:0] value;
                    } RST_ACTION;
                    struct {
                        logic [7:0] value;
                    } RESET_TIME_PERIPHERAL;
                    struct {
                        logic [7:0] value;
                    } RESET_TIME_TARGET;
                    struct {
                        logic value;
                    } RESET_DYNAMIC_ADDR;
                } STBY_CR_CCC_CONFIG_RSTACT_PARAMS;
                struct {
                    struct {
                        logic [6:0] value;
                    } VIRT_STATIC_ADDR;
                    struct {
                        logic value;
                    } VIRT_STATIC_ADDR_VALID;
                    struct {
                        logic [6:0] value;
                    } VIRT_DYNAMIC_ADDR;
                    struct {
                        logic value;
                    } VIRT_DYNAMIC_ADDR_VALID;
                } STBY_CR_VIRT_DEVICE_ADDR;
                struct {
                    struct {
                        logic [31:0] value;
                    } __rsvd;
                } __rsvd_3;
            } StdbyCtrlMode;
            struct {
                struct {
                    struct {
                        logic value;
                    } HJ_EN;
                    struct {
                        logic value;
                    } CRR_EN;
                    struct {
                        logic value;
                    } IBI_EN;
                    struct {
                        logic [2:0] value;
                    } IBI_RETRY_NUM;
                } CONTROL;
                struct {
                    struct {
                        logic value;
                    } PROTOCOL_ERROR;
                    struct {
                        logic [1:0] value;
                    } LAST_IBI_STATUS;
                } STATUS;
                struct {
                    struct {
                        logic value;
                    } SOFT_RST;
                    struct {
                        logic value;
                    } TX_DESC_RST;
                    struct {
                        logic value;
                    } RX_DESC_RST;
                    struct {
                        logic value;
                    } TX_DATA_RST;
                    struct {
                        logic value;
                    } RX_DATA_RST;
                    struct {
                        logic value;
                    } IBI_QUEUE_RST;
                } RESET_CONTROL;
                struct {
                    struct {
                        logic value;
                    } RX_DESC_STAT;
                    struct {
                        logic value;
                    } TX_DESC_STAT;
                    struct {
                        logic value;
                    } RX_DESC_TIMEOUT;
                    struct {
                        logic value;
                    } TX_DESC_TIMEOUT;
                    struct {
                        logic value;
                    } TX_DATA_THLD_STAT;
                    struct {
                        logic value;
                    } RX_DATA_THLD_STAT;
                    struct {
                        logic value;
                    } TX_DESC_THLD_STAT;
                    struct {
                        logic value;
                    } RX_DESC_THLD_STAT;
                    struct {
                        logic value;
                    } IBI_THLD_STAT;
                    struct {
                        logic value;
                    } IBI_DONE;
                    struct {
                        logic [3:0] value;
                    } PENDING_INTERRUPT;
                    struct {
                        logic value;
                    } TRANSFER_ABORT_STAT;
                    struct {
                        logic value;
                    } TX_DESC_COMPLETE;
                    struct {
                        logic value;
                    } TRANSFER_ERR_STAT;
                } INTERRUPT_STATUS;
                struct {
                    struct {
                        logic value;
                    } RX_DESC_STAT_EN;
                    struct {
                        logic value;
                    } TX_DESC_STAT_EN;
                    struct {
                        logic value;
                    } RX_DESC_TIMEOUT_EN;
                    struct {
                        logic value;
                    } TX_DESC_TIMEOUT_EN;
                    struct {
                        logic value;
                    } TX_DATA_THLD_STAT_EN;
                    struct {
                        logic value;
                    } RX_DATA_THLD_STAT_EN;
                    struct {
                        logic value;
                    } TX_DESC_THLD_STAT_EN;
                    struct {
                        logic value;
                    } RX_DESC_THLD_STAT_EN;
                    struct {
                        logic value;
                    } IBI_THLD_STAT_EN;
                    struct {
                        logic value;
                    } IBI_DONE_EN;
                    struct {
                        logic value;
                    } TRANSFER_ABORT_STAT_EN;
                    struct {
                        logic value;
                    } TX_DESC_COMPLETE_EN;
                    struct {
                        logic value;
                    } TRANSFER_ERR_STAT_EN;
                } INTERRUPT_ENABLE;
                struct {
                    struct {
                        logic value;
                    } RX_DESC_STAT_FORCE;
                    struct {
                        logic value;
                    } TX_DESC_STAT_FORCE;
                    struct {
                        logic value;
                    } RX_DESC_TIMEOUT_FORCE;
                    struct {
                        logic value;
                    } TX_DESC_TIMEOUT_FORCE;
                    struct {
                        logic value;
                    } TX_DATA_THLD_FORCE;
                    struct {
                        logic value;
                    } RX_DATA_THLD_FORCE;
                    struct {
                        logic value;
                    } TX_DESC_THLD_FORCE;
                    struct {
                        logic value;
                    } RX_DESC_THLD_FORCE;
                    struct {
                        logic value;
                    } IBI_THLD_FORCE;
                    struct {
                        logic value;
                    } IBI_DONE_FORCE;
                    struct {
                        logic value;
                    } TRANSFER_ABORT_STAT_FORCE;
                    struct {
                        logic value;
                    } TX_DESC_COMPLETE_FORCE;
                    struct {
                        logic value;
                    } TRANSFER_ERR_STAT_FORCE;
                } INTERRUPT_FORCE;
                struct {
                    struct {
                        logic [7:0] value;
                    } TX_DESC_THLD;
                    struct {
                        logic [7:0] value;
                    } RX_DESC_THLD;
                    struct {
                        logic [7:0] value;
                    } IBI_THLD;
                } QUEUE_THLD_CTRL;
                struct {
                    struct {
                        logic [2:0] value;
                    } TX_DATA_THLD;
                    struct {
                        logic [2:0] value;
                    } RX_DATA_THLD;
                    struct {
                        logic [2:0] value;
                    } TX_START_THLD;
                    struct {
                        logic [2:0] value;
                    } RX_START_THLD;
                } DATA_BUFFER_THLD_CTRL;
            } TTI;
            struct {
                struct {
                    struct {
                        logic [31:0] value;
                    } PLACEHOLDER;
                } SOC_MGMT_CONTROL;
                struct {
                    struct {
                        logic [31:0] value;
                    } PLACEHOLDER;
                } SOC_MGMT_STATUS;
                struct {
                    struct {
                        logic value;
                    } REC_INTF_BYPASS;
                    struct {
                        logic value;
                    } REC_PAYLOAD_DONE;
                } REC_INTF_CFG;
                struct {
                    struct {
                        logic [7:0] value;
                    } DEVICE_RESET_CTRL;
                    struct {
                        logic [7:0] value;
                    } RECOVERY_CTRL_ACTIVATE_REC_IMG;
                    struct {
                        logic [7:0] value;
                    } INDIRECT_FIFO_CTRL_RESET;
                } REC_INTF_REG_W1C_ACCESS;
                struct {
                    struct {
                        logic [31:0] value;
                    } PLACEHOLDER;
                } SOC_MGMT_RSVD_2;
                struct {
                    struct {
                        logic [31:0] value;
                    } PLACEHOLDER;
                } SOC_MGMT_RSVD_3;
                struct {
                    struct {
                        logic value;
                    } INPUT_ENABLE;
                    struct {
                        logic value;
                    } SCHMITT_EN;
                    struct {
                        logic value;
                    } KEEPER_EN;
                    struct {
                        logic value;
                    } PULL_DIR;
                    struct {
                        logic value;
                    } PULL_EN;
                    struct {
                        logic value;
                    } IO_INVERSION;
                    struct {
                        logic value;
                    } OD_EN;
                    struct {
                        logic value;
                    } VIRTUAL_OD_EN;
                    struct {
                        logic [7:0] value;
                    } PAD_TYPE;
                } SOC_PAD_CONF;
                struct {
                    struct {
                        logic [7:0] value;
                    } DRIVE_SLEW_RATE;
                    struct {
                        logic [7:0] value;
                    } DRIVE_STRENGTH;
                } SOC_PAD_ATTR;
                struct {
                    struct {
                        logic [31:0] value;
                    } PLACEHOLDER;
                } SOC_MGMT_FEATURE_2;
                struct {
                    struct {
                        logic [31:0] value;
                    } PLACEHOLDER;
                } SOC_MGMT_FEATURE_3;
                struct {
                    struct {
                        logic [19:0] value;
                    } T_R;
                } T_R_REG;
                struct {
                    struct {
                        logic [19:0] value;
                    } T_F;
                } T_F_REG;
                struct {
                    struct {
                        logic [19:0] value;
                    } T_SU_DAT;
                } T_SU_DAT_REG;
                struct {
                    struct {
                        logic [19:0] value;
                    } T_HD_DAT;
                } T_HD_DAT_REG;
                struct {
                    struct {
                        logic [19:0] value;
                    } T_HIGH;
                } T_HIGH_REG;
                struct {
                    struct {
                        logic [19:0] value;
                    } T_LOW;
                } T_LOW_REG;
                struct {
                    struct {
                        logic [19:0] value;
                    } T_HD_STA;
                } T_HD_STA_REG;
                struct {
                    struct {
                        logic [19:0] value;
                    } T_SU_STA;
                } T_SU_STA_REG;
                struct {
                    struct {
                        logic [19:0] value;
                    } T_SU_STO;
                } T_SU_STO_REG;
                struct {
                    struct {
                        logic [31:0] value;
                    } T_FREE;
                } T_FREE_REG;
                struct {
                    struct {
                        logic [31:0] value;
                    } T_AVAL;
                } T_AVAL_REG;
                struct {
                    struct {
                        logic [31:0] value;
                    } T_IDLE;
                } T_IDLE_REG;
            } SoCMgmtIf;
            struct {
                struct {
                    struct {
                        logic [1:0] value;
                    } OPERATION_MODE;
                } CONTROLLER_CONFIG;
            } CtrlCfg;
        } I3C_EC;
    } field_storage_t;
    field_storage_t field_storage;

    assign hwif_out.I3C_EC.SecFwRecoveryIf.EXTCAP_HEADER.CAP_ID.value = 8'hc0;
    assign hwif_out.I3C_EC.SecFwRecoveryIf.EXTCAP_HEADER.CAP_LENGTH.value = 16'h20;
    assign hwif_out.I3C_EC.SecFwRecoveryIf.PROT_CAP_0.REC_MAGIC_STRING_0.value = 32'h2050434f;
    assign hwif_out.I3C_EC.SecFwRecoveryIf.PROT_CAP_1.REC_MAGIC_STRING_1.value = 32'h56434552;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.REC_PROT_VERSION
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.REC_PROT_VERSION.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.PROT_CAP_2 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.REC_PROT_VERSION.value & ~decoded_wr_biten[15:0]) | (decoded_wr_data[15:0] & decoded_wr_biten[15:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.REC_PROT_VERSION.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.REC_PROT_VERSION.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.REC_PROT_VERSION.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.REC_PROT_VERSION.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.REC_PROT_VERSION.value <= 16'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.REC_PROT_VERSION.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.REC_PROT_VERSION.value <= field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.REC_PROT_VERSION.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.REC_PROT_VERSION.value = field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.REC_PROT_VERSION.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.AGENT_CAPS
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.AGENT_CAPS.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.PROT_CAP_2 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.AGENT_CAPS.value & ~decoded_wr_biten[31:16]) | (decoded_wr_data[31:16] & decoded_wr_biten[31:16]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.AGENT_CAPS.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.AGENT_CAPS.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.AGENT_CAPS.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.AGENT_CAPS.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.AGENT_CAPS.value <= 16'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.AGENT_CAPS.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.AGENT_CAPS.value <= field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.AGENT_CAPS.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.AGENT_CAPS.value = field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.AGENT_CAPS.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.NUM_OF_CMS_REGIONS
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.NUM_OF_CMS_REGIONS.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.PROT_CAP_3 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.NUM_OF_CMS_REGIONS.value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.NUM_OF_CMS_REGIONS.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.NUM_OF_CMS_REGIONS.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.NUM_OF_CMS_REGIONS.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.NUM_OF_CMS_REGIONS.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.NUM_OF_CMS_REGIONS.value <= 8'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.NUM_OF_CMS_REGIONS.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.NUM_OF_CMS_REGIONS.value <= field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.NUM_OF_CMS_REGIONS.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.NUM_OF_CMS_REGIONS.value = field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.NUM_OF_CMS_REGIONS.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.MAX_RESP_TIME
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.MAX_RESP_TIME.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.PROT_CAP_3 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.MAX_RESP_TIME.value & ~decoded_wr_biten[15:8]) | (decoded_wr_data[15:8] & decoded_wr_biten[15:8]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.MAX_RESP_TIME.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.MAX_RESP_TIME.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.MAX_RESP_TIME.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.MAX_RESP_TIME.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.MAX_RESP_TIME.value <= 8'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.MAX_RESP_TIME.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.MAX_RESP_TIME.value <= field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.MAX_RESP_TIME.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.MAX_RESP_TIME.value = field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.MAX_RESP_TIME.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.HEARTBEAT_PERIOD
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.HEARTBEAT_PERIOD.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.PROT_CAP_3 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.HEARTBEAT_PERIOD.value & ~decoded_wr_biten[23:16]) | (decoded_wr_data[23:16] & decoded_wr_biten[23:16]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.HEARTBEAT_PERIOD.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.HEARTBEAT_PERIOD.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.HEARTBEAT_PERIOD.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.HEARTBEAT_PERIOD.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.HEARTBEAT_PERIOD.value <= 8'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.HEARTBEAT_PERIOD.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.HEARTBEAT_PERIOD.value <= field_combo.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.HEARTBEAT_PERIOD.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.HEARTBEAT_PERIOD.value = field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.HEARTBEAT_PERIOD.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DESC_TYPE
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DESC_TYPE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DESC_TYPE.value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DESC_TYPE.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DESC_TYPE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DESC_TYPE.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DESC_TYPE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DESC_TYPE.value <= 8'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DESC_TYPE.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DESC_TYPE.value <= field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DESC_TYPE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DESC_TYPE.value = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DESC_TYPE.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.VENDOR_SPECIFIC_STR_LENGTH
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.VENDOR_SPECIFIC_STR_LENGTH.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.VENDOR_SPECIFIC_STR_LENGTH.value & ~decoded_wr_biten[15:8]) | (decoded_wr_data[15:8] & decoded_wr_biten[15:8]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.VENDOR_SPECIFIC_STR_LENGTH.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.VENDOR_SPECIFIC_STR_LENGTH.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.VENDOR_SPECIFIC_STR_LENGTH.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.VENDOR_SPECIFIC_STR_LENGTH.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.VENDOR_SPECIFIC_STR_LENGTH.value <= 8'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.VENDOR_SPECIFIC_STR_LENGTH.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.VENDOR_SPECIFIC_STR_LENGTH.value <= field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.VENDOR_SPECIFIC_STR_LENGTH.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.VENDOR_SPECIFIC_STR_LENGTH.value = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.VENDOR_SPECIFIC_STR_LENGTH.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DATA
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DATA.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DATA.value & ~decoded_wr_biten[31:16]) | (decoded_wr_data[31:16] & decoded_wr_biten[31:16]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DATA.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DATA.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DATA.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DATA.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DATA.value <= 16'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DATA.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DATA.value <= field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DATA.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DATA.value = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DATA.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.DATA
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.DATA.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.DATA.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.DATA.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.DATA.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.DATA.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.DATA.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.DATA.value <= 32'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.DATA.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.DATA.value <= field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.DATA.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.DATA.value = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.DATA.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.DATA
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.DATA.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.DATA.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.DATA.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.DATA.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.DATA.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.DATA.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.DATA.value <= 32'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.DATA.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.DATA.value <= field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.DATA.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.DATA.value = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.DATA.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.DATA
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.DATA.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.DATA.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.DATA.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.DATA.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.DATA.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.DATA.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.DATA.value <= 32'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.DATA.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.DATA.value <= field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.DATA.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.DATA.value = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.DATA.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.DATA
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.DATA.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.DATA.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.DATA.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.DATA.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.DATA.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.DATA.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.DATA.value <= 32'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.DATA.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.DATA.value <= field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.DATA.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.DATA.value = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.DATA.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.DATA
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.DATA.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.DATA.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.DATA.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.DATA.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.DATA.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.DATA.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.DATA.value <= 32'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.DATA.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.DATA.value <= field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.DATA.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.DATA.value = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.DATA.value;
    assign hwif_out.I3C_EC.SecFwRecoveryIf.DEVICE_ID_RESERVED.DATA.value = 32'h0;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.DEV_STATUS
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.DEV_STATUS.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.DEV_STATUS.value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.DEV_STATUS.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.DEV_STATUS.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.DEV_STATUS.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.DEV_STATUS.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.DEV_STATUS.value <= 8'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.DEV_STATUS.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.DEV_STATUS.value <= field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.DEV_STATUS.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.DEV_STATUS.value = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.DEV_STATUS.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PROT_ERROR
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PROT_ERROR.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0 && !decoded_req_is_wr) begin // SW clear on read
            next_c = '0;
            load_next_c = '1;
        end else if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PROT_ERROR.value & ~decoded_wr_biten[15:8]) | (decoded_wr_data[15:8] & decoded_wr_biten[15:8]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PROT_ERROR.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PROT_ERROR.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PROT_ERROR.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PROT_ERROR.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PROT_ERROR.value <= 8'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PROT_ERROR.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PROT_ERROR.value <= field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PROT_ERROR.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PROT_ERROR.value = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PROT_ERROR.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.REC_REASON_CODE
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.REC_REASON_CODE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.REC_REASON_CODE.value & ~decoded_wr_biten[31:16]) | (decoded_wr_data[31:16] & decoded_wr_biten[31:16]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.REC_REASON_CODE.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.REC_REASON_CODE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.REC_REASON_CODE.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.REC_REASON_CODE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.REC_REASON_CODE.value <= 16'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.REC_REASON_CODE.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.REC_REASON_CODE.value <= field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.REC_REASON_CODE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.REC_REASON_CODE.value = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.REC_REASON_CODE.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.HEARTBEAT
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.HEARTBEAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.HEARTBEAT.value & ~decoded_wr_biten[15:0]) | (decoded_wr_data[15:0] & decoded_wr_biten[15:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.HEARTBEAT.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.HEARTBEAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.HEARTBEAT.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.HEARTBEAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.HEARTBEAT.value <= 16'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.HEARTBEAT.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.HEARTBEAT.value <= field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.HEARTBEAT.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.HEARTBEAT.value = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.HEARTBEAT.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS_LENGTH
    always_comb begin
        automatic logic [8:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS_LENGTH.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS_LENGTH.value & ~decoded_wr_biten[24:16]) | (decoded_wr_data[24:16] & decoded_wr_biten[24:16]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS_LENGTH.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS_LENGTH.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS_LENGTH.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS_LENGTH.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS_LENGTH.value <= 9'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS_LENGTH.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS_LENGTH.value <= field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS_LENGTH.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS_LENGTH.value = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS_LENGTH.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS
    always_comb begin
        automatic logic [6:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS.value & ~decoded_wr_biten[31:25]) | (decoded_wr_data[31:25] & decoded_wr_biten[31:25]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS.value <= 7'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS.value <= field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS.value = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.RESET_CTRL
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.RESET_CTRL.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_RESET && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.RESET_CTRL.value & ~(decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.RESET_CTRL.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.RESET_CTRL.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.RESET_CTRL.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.RESET_CTRL.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.RESET_CTRL.value <= 8'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.RESET_CTRL.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.RESET_CTRL.value <= field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.RESET_CTRL.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.RESET_CTRL.value = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.RESET_CTRL.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.FORCED_RECOVERY
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.FORCED_RECOVERY.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_RESET && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.FORCED_RECOVERY.value & ~decoded_wr_biten[15:8]) | (decoded_wr_data[15:8] & decoded_wr_biten[15:8]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.FORCED_RECOVERY.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.FORCED_RECOVERY.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.FORCED_RECOVERY.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.FORCED_RECOVERY.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.FORCED_RECOVERY.value <= 8'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.FORCED_RECOVERY.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.FORCED_RECOVERY.value <= field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.FORCED_RECOVERY.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.FORCED_RECOVERY.value = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.FORCED_RECOVERY.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.IF_CTRL
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.IF_CTRL.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_RESET && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.IF_CTRL.value & ~decoded_wr_biten[23:16]) | (decoded_wr_data[23:16] & decoded_wr_biten[23:16]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.IF_CTRL.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.IF_CTRL.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.IF_CTRL.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.IF_CTRL.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.IF_CTRL.value <= 8'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.IF_CTRL.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.IF_CTRL.value <= field_combo.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.IF_CTRL.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.IF_CTRL.value = field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.IF_CTRL.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.CMS
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.CMS.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.CMS.value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.CMS.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.CMS.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.CMS.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.CMS.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.CMS.value <= 8'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.CMS.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.CMS.value <= field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.CMS.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.CMS.value = field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.CMS.value;
    assign hwif_out.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.CMS.swmod = decoded_reg_strb.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL && decoded_req_is_wr;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.REC_IMG_SEL
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.REC_IMG_SEL.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.REC_IMG_SEL.value & ~decoded_wr_biten[15:8]) | (decoded_wr_data[15:8] & decoded_wr_biten[15:8]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.REC_IMG_SEL.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.REC_IMG_SEL.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.REC_IMG_SEL.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.REC_IMG_SEL.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.REC_IMG_SEL.value <= 8'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.REC_IMG_SEL.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.REC_IMG_SEL.value <= field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.REC_IMG_SEL.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.REC_IMG_SEL.value = field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.REC_IMG_SEL.value;
    assign hwif_out.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.REC_IMG_SEL.swmod = decoded_reg_strb.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL && decoded_req_is_wr;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.ACTIVATE_REC_IMG
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.ACTIVATE_REC_IMG.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.ACTIVATE_REC_IMG.value & ~(decoded_wr_data[23:16] & decoded_wr_biten[23:16]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.ACTIVATE_REC_IMG.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.ACTIVATE_REC_IMG.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.ACTIVATE_REC_IMG.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.ACTIVATE_REC_IMG.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.ACTIVATE_REC_IMG.value <= 8'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.ACTIVATE_REC_IMG.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.ACTIVATE_REC_IMG.value <= field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.ACTIVATE_REC_IMG.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.ACTIVATE_REC_IMG.value = field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.ACTIVATE_REC_IMG.value;
    assign hwif_out.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.ACTIVATE_REC_IMG.swmod = decoded_reg_strb.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL && decoded_req_is_wr;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.DEV_REC_STATUS
    always_comb begin
        automatic logic [3:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.DEV_REC_STATUS.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.DEV_REC_STATUS.value & ~decoded_wr_biten[3:0]) | (decoded_wr_data[3:0] & decoded_wr_biten[3:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.DEV_REC_STATUS.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.DEV_REC_STATUS.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.DEV_REC_STATUS.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.DEV_REC_STATUS.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.DEV_REC_STATUS.value <= 4'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.DEV_REC_STATUS.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.DEV_REC_STATUS.value <= field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.DEV_REC_STATUS.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.DEV_REC_STATUS.value = field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.DEV_REC_STATUS.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.REC_IMG_INDEX
    always_comb begin
        automatic logic [3:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.REC_IMG_INDEX.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.REC_IMG_INDEX.value & ~decoded_wr_biten[7:4]) | (decoded_wr_data[7:4] & decoded_wr_biten[7:4]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.REC_IMG_INDEX.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.REC_IMG_INDEX.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.REC_IMG_INDEX.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.REC_IMG_INDEX.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.REC_IMG_INDEX.value <= 4'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.REC_IMG_INDEX.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.REC_IMG_INDEX.value <= field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.REC_IMG_INDEX.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.REC_IMG_INDEX.value = field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.REC_IMG_INDEX.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.VENDOR_SPECIFIC_STATUS
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.VENDOR_SPECIFIC_STATUS.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.VENDOR_SPECIFIC_STATUS.value & ~decoded_wr_biten[15:8]) | (decoded_wr_data[15:8] & decoded_wr_biten[15:8]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.VENDOR_SPECIFIC_STATUS.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.VENDOR_SPECIFIC_STATUS.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.VENDOR_SPECIFIC_STATUS.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.VENDOR_SPECIFIC_STATUS.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.VENDOR_SPECIFIC_STATUS.value <= 8'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.VENDOR_SPECIFIC_STATUS.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.VENDOR_SPECIFIC_STATUS.value <= field_combo.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.VENDOR_SPECIFIC_STATUS.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.VENDOR_SPECIFIC_STATUS.value = field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.VENDOR_SPECIFIC_STATUS.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.HW_STATUS.TEMP_CRITICAL
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.TEMP_CRITICAL.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.HW_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.TEMP_CRITICAL.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.HW_STATUS.TEMP_CRITICAL.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.HW_STATUS.TEMP_CRITICAL.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.TEMP_CRITICAL.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.TEMP_CRITICAL.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.TEMP_CRITICAL.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.TEMP_CRITICAL.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.TEMP_CRITICAL.value <= field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.TEMP_CRITICAL.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.HW_STATUS.TEMP_CRITICAL.value = field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.TEMP_CRITICAL.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.HW_STATUS.SOFT_ERR
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.SOFT_ERR.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.HW_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.SOFT_ERR.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.HW_STATUS.SOFT_ERR.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.HW_STATUS.SOFT_ERR.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.SOFT_ERR.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.SOFT_ERR.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.SOFT_ERR.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.SOFT_ERR.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.SOFT_ERR.value <= field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.SOFT_ERR.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.HW_STATUS.SOFT_ERR.value = field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.SOFT_ERR.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.HW_STATUS.FATAL_ERR
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.FATAL_ERR.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.HW_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.FATAL_ERR.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.HW_STATUS.FATAL_ERR.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.HW_STATUS.FATAL_ERR.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.FATAL_ERR.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.FATAL_ERR.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.FATAL_ERR.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.FATAL_ERR.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.FATAL_ERR.value <= field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.FATAL_ERR.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.HW_STATUS.FATAL_ERR.value = field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.FATAL_ERR.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.HW_STATUS.RESERVED_7_3
    always_comb begin
        automatic logic [4:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.RESERVED_7_3.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.HW_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.RESERVED_7_3.value & ~decoded_wr_biten[7:3]) | (decoded_wr_data[7:3] & decoded_wr_biten[7:3]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.HW_STATUS.RESERVED_7_3.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.HW_STATUS.RESERVED_7_3.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.RESERVED_7_3.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.RESERVED_7_3.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.RESERVED_7_3.value <= 5'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.RESERVED_7_3.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.RESERVED_7_3.value <= field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.RESERVED_7_3.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.HW_STATUS.RESERVED_7_3.value = field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.RESERVED_7_3.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.HW_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS.value & ~decoded_wr_biten[15:8]) | (decoded_wr_data[15:8] & decoded_wr_biten[15:8]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS.value <= 8'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS.value <= field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS.value = field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.HW_STATUS.CTEMP
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.CTEMP.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.HW_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.CTEMP.value & ~decoded_wr_biten[23:16]) | (decoded_wr_data[23:16] & decoded_wr_biten[23:16]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.HW_STATUS.CTEMP.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.HW_STATUS.CTEMP.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.CTEMP.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.CTEMP.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.CTEMP.value <= 8'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.CTEMP.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.CTEMP.value <= field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.CTEMP.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.HW_STATUS.CTEMP.value = field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.CTEMP.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS_LEN
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS_LEN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.HW_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS_LEN.value & ~decoded_wr_biten[31:24]) | (decoded_wr_data[31:24] & decoded_wr_biten[31:24]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS_LEN.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS_LEN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS_LEN.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS_LEN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS_LEN.value <= 8'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS_LEN.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS_LEN.value <= field_combo.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS_LEN.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS_LEN.value = field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS_LEN.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.CMS
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.CMS.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.CMS.value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.CMS.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.CMS.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.CMS.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.CMS.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.CMS.value <= 8'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.CMS.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.CMS.value <= field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.CMS.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.CMS.value = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.CMS.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.RESET
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.RESET.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.RESET.value & ~decoded_wr_biten[15:8]) | (decoded_wr_data[15:8] & decoded_wr_biten[15:8]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.RESET.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.RESET.next;
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.RESET.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.RESET.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.RESET.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.RESET.value <= 8'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.RESET.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.RESET.value <= field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.RESET.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.RESET.value = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.RESET.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.IMAGE_SIZE
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.IMAGE_SIZE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.IMAGE_SIZE.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.IMAGE_SIZE.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.IMAGE_SIZE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.IMAGE_SIZE.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.IMAGE_SIZE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.IMAGE_SIZE.value <= 32'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.IMAGE_SIZE.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.IMAGE_SIZE.value <= field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.IMAGE_SIZE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.IMAGE_SIZE.value = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.IMAGE_SIZE.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.EMPTY
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.EMPTY.value;
        load_next_c = '0;
        if(hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.EMPTY.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.EMPTY.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.EMPTY.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.EMPTY.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.EMPTY.value <= 1'h1;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.EMPTY.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.EMPTY.value <= field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.EMPTY.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.EMPTY.value = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.EMPTY.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.FULL
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.FULL.value;
        load_next_c = '0;
        if(hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.FULL.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.FULL.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.FULL.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.FULL.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.FULL.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.FULL.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.FULL.value <= field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.FULL.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.FULL.value = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.FULL.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.REGION_TYPE
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.REGION_TYPE.value;
        load_next_c = '0;
        if(hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.REGION_TYPE.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.REGION_TYPE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.REGION_TYPE.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.REGION_TYPE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.REGION_TYPE.value <= 3'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.REGION_TYPE.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.REGION_TYPE.value <= field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.REGION_TYPE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.REGION_TYPE.value = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.REGION_TYPE.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1.WRITE_INDEX
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1.WRITE_INDEX.value;
        load_next_c = '0;
        if(hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1.WRITE_INDEX.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1.WRITE_INDEX.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1.WRITE_INDEX.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1.WRITE_INDEX.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1.WRITE_INDEX.value <= 32'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1.WRITE_INDEX.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1.WRITE_INDEX.value <= field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1.WRITE_INDEX.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1.WRITE_INDEX.value = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1.WRITE_INDEX.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2.READ_INDEX
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2.READ_INDEX.value;
        load_next_c = '0;
        if(hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2.READ_INDEX.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2.READ_INDEX.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2.READ_INDEX.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2.READ_INDEX.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2.READ_INDEX.value <= 32'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2.READ_INDEX.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2.READ_INDEX.value <= field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2.READ_INDEX.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2.READ_INDEX.value = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2.READ_INDEX.value;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3.FIFO_SIZE
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3.FIFO_SIZE.value;
        load_next_c = '0;
        if(hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3.FIFO_SIZE.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3.FIFO_SIZE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3.FIFO_SIZE.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3.FIFO_SIZE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3.FIFO_SIZE.value <= 32'h40;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3.FIFO_SIZE.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3.FIFO_SIZE.value <= field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3.FIFO_SIZE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3.FIFO_SIZE.value = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3.FIFO_SIZE.value;
    assign hwif_out.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_4.MAX_TRANSFER_SIZE.value = 32'h40;
    // Field: I3CCSR.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_RESERVED.DATA
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_RESERVED.DATA.value;
        load_next_c = '0;
        if(hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_RESERVED.DATA.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_RESERVED.DATA.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_RESERVED.DATA.next = next_c;
        field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_RESERVED.DATA.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_RESERVED.DATA.value <= 32'h0;
        end else begin
            if(field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_RESERVED.DATA.load_next) begin
                field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_RESERVED.DATA.value <= field_combo.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_RESERVED.DATA.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_RESERVED.DATA.value = field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_RESERVED.DATA.value;

    assign hwif_out.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_DATA.req = !decoded_req_is_wr ? decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_DATA : '0;
    assign hwif_out.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_DATA.req_is_wr = decoded_req_is_wr;
    assign hwif_out.I3C_EC.StdbyCtrlMode.EXTCAP_HEADER.CAP_ID.value = 8'h12;
    assign hwif_out.I3C_EC.StdbyCtrlMode.EXTCAP_HEADER.CAP_LENGTH.value = 16'h10;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PENDING_RX_NACK
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PENDING_RX_NACK.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PENDING_RX_NACK.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PENDING_RX_NACK.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PENDING_RX_NACK.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PENDING_RX_NACK.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PENDING_RX_NACK.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PENDING_RX_NACK.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PENDING_RX_NACK.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PENDING_RX_NACK.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PENDING_RX_NACK.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DELAY_NACK
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DELAY_NACK.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DELAY_NACK.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DELAY_NACK.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DELAY_NACK.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DELAY_NACK.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DELAY_NACK.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DELAY_NACK.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DELAY_NACK.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DELAY_NACK.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DELAY_NACK.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.ACR_FSM_OP_SELECT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.ACR_FSM_OP_SELECT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.ACR_FSM_OP_SELECT.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.ACR_FSM_OP_SELECT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.ACR_FSM_OP_SELECT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.ACR_FSM_OP_SELECT.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.ACR_FSM_OP_SELECT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.ACR_FSM_OP_SELECT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.ACR_FSM_OP_SELECT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.ACR_FSM_OP_SELECT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.ACR_FSM_OP_SELECT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PRIME_ACCEPT_GETACCCR
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PRIME_ACCEPT_GETACCCR.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PRIME_ACCEPT_GETACCCR.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PRIME_ACCEPT_GETACCCR.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PRIME_ACCEPT_GETACCCR.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PRIME_ACCEPT_GETACCCR.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PRIME_ACCEPT_GETACCCR.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PRIME_ACCEPT_GETACCCR.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PRIME_ACCEPT_GETACCCR.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PRIME_ACCEPT_GETACCCR.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PRIME_ACCEPT_GETACCCR.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && decoded_req_is_wr) begin // SW write set
            next_c = '1;
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP.next;
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.CR_REQUEST_SEND
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.CR_REQUEST_SEND.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.CR_REQUEST_SEND.value & ~decoded_wr_biten[5:5]) | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.CR_REQUEST_SEND.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.CR_REQUEST_SEND.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.CR_REQUEST_SEND.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.CR_REQUEST_SEND.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.CR_REQUEST_SEND.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.CR_REQUEST_SEND.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.CR_REQUEST_SEND.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.CR_REQUEST_SEND.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.BAST_CCC_IBI_RING
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.BAST_CCC_IBI_RING.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.BAST_CCC_IBI_RING.value & ~decoded_wr_biten[10:8]) | (decoded_wr_data[10:8] & decoded_wr_biten[10:8]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.BAST_CCC_IBI_RING.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.BAST_CCC_IBI_RING.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.BAST_CCC_IBI_RING.value <= 3'h0;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.BAST_CCC_IBI_RING.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.BAST_CCC_IBI_RING.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.BAST_CCC_IBI_RING.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.BAST_CCC_IBI_RING.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.BAST_CCC_IBI_RING.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE.value & ~decoded_wr_biten[12:12]) | (decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE.value <= 1'h1;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE.value & ~decoded_wr_biten[13:13]) | (decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE.value & ~decoded_wr_biten[14:14]) | (decoded_wr_data[14:14] & decoded_wr_biten[14:14]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE.value & ~decoded_wr_biten[15:15]) | (decoded_wr_data[15:15] & decoded_wr_biten[15:15]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.RSTACT_DEFBYTE_02
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.RSTACT_DEFBYTE_02.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.RSTACT_DEFBYTE_02.value & ~decoded_wr_biten[20:20]) | (decoded_wr_data[20:20] & decoded_wr_biten[20:20]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.RSTACT_DEFBYTE_02.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.RSTACT_DEFBYTE_02.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.RSTACT_DEFBYTE_02.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.RSTACT_DEFBYTE_02.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.RSTACT_DEFBYTE_02.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.RSTACT_DEFBYTE_02.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.RSTACT_DEFBYTE_02.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.RSTACT_DEFBYTE_02.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.STBY_CR_ENABLE_INIT
    always_comb begin
        automatic logic [1:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.STBY_CR_ENABLE_INIT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.STBY_CR_ENABLE_INIT.value & ~decoded_wr_biten[31:30]) | (decoded_wr_data[31:30] & decoded_wr_biten[31:30]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.STBY_CR_ENABLE_INIT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.STBY_CR_ENABLE_INIT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.STBY_CR_ENABLE_INIT.value <= 2'h0;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.STBY_CR_ENABLE_INIT.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.STBY_CR_ENABLE_INIT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.STBY_CR_ENABLE_INIT.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.STBY_CR_ENABLE_INIT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.STBY_CR_ENABLE_INIT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR
    always_comb begin
        automatic logic [6:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR.value & ~decoded_wr_biten[6:0]) | (decoded_wr_data[6:0] & decoded_wr_biten[6:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR.value <= 7'h0;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR_VALID
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR_VALID.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR_VALID.value & ~decoded_wr_biten[15:15]) | (decoded_wr_data[15:15] & decoded_wr_biten[15:15]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR_VALID.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR_VALID.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR_VALID.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR_VALID.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR_VALID.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR_VALID.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR_VALID.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR_VALID.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR_VALID.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR_VALID.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR
    always_comb begin
        automatic logic [6:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR.value & ~decoded_wr_biten[22:16]) | (decoded_wr_data[22:16] & decoded_wr_biten[22:16]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR.value <= 7'h0;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR_VALID
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR_VALID.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR_VALID.value & ~decoded_wr_biten[31:31]) | (decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR_VALID.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR_VALID.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR_VALID.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR_VALID.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR_VALID.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR_VALID.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR_VALID.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR_VALID.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR_VALID.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR_VALID.value;
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.SIMPLE_CRR_SUPPORT.value = 1'h0;
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.TARGET_XACT_SUPPORT.value = 1'h1;
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_SETAASA_SUPPORT.value = 1'h1;
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_SETDASA_SUPPORT.value = 1'h1;
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES.DAA_ENTDAA_SUPPORT.value = 1'h0;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.PID_HI
    always_comb begin
        automatic logic [14:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.PID_HI.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.PID_HI.value & ~decoded_wr_biten[15:1]) | (decoded_wr_data[15:1] & decoded_wr_biten[15:1]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.PID_HI.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.PID_HI.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.PID_HI.value <= 15'h7fff;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.PID_HI.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.PID_HI.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.PID_HI.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.PID_HI.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.PID_HI.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.DCR
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.DCR.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.DCR.value & ~decoded_wr_biten[23:16]) | (decoded_wr_data[23:16] & decoded_wr_biten[23:16]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.DCR.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.DCR.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.DCR.value <= 8'hbd;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.DCR.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.DCR.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.DCR.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.DCR.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.DCR.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.BCR_VAR
    always_comb begin
        automatic logic [4:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.BCR_VAR.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.BCR_VAR.value & ~decoded_wr_biten[28:24]) | (decoded_wr_data[28:24] & decoded_wr_biten[28:24]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.BCR_VAR.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.BCR_VAR.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.BCR_VAR.value <= 5'h6;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.BCR_VAR.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.BCR_VAR.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.BCR_VAR.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.BCR_VAR.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.BCR_VAR.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.BCR_FIXED
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.BCR_FIXED.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.BCR_FIXED.value & ~decoded_wr_biten[31:29]) | (decoded_wr_data[31:29] & decoded_wr_biten[31:29]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.BCR_FIXED.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.BCR_FIXED.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.BCR_FIXED.value <= 3'h1;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.BCR_FIXED.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.BCR_FIXED.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.BCR_FIXED.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.BCR_FIXED.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.BCR_FIXED.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.AC_CURRENT_OWN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.AC_CURRENT_OWN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.AC_CURRENT_OWN.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.AC_CURRENT_OWN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.AC_CURRENT_OWN.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.AC_CURRENT_OWN.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.AC_CURRENT_OWN.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.AC_CURRENT_OWN.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.AC_CURRENT_OWN.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.AC_CURRENT_OWN.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.AC_CURRENT_OWN.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.SIMPLE_CRR_STATUS
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.SIMPLE_CRR_STATUS.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.SIMPLE_CRR_STATUS.value & ~decoded_wr_biten[7:5]) | (decoded_wr_data[7:5] & decoded_wr_biten[7:5]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.SIMPLE_CRR_STATUS.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.SIMPLE_CRR_STATUS.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.SIMPLE_CRR_STATUS.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.SIMPLE_CRR_STATUS.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.SIMPLE_CRR_STATUS.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.SIMPLE_CRR_STATUS.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.SIMPLE_CRR_STATUS.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.SIMPLE_CRR_STATUS.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.HJ_REQ_STATUS
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.HJ_REQ_STATUS.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.HJ_REQ_STATUS.value & ~decoded_wr_biten[8:8]) | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.HJ_REQ_STATUS.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.HJ_REQ_STATUS.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.HJ_REQ_STATUS.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.HJ_REQ_STATUS.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.HJ_REQ_STATUS.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.HJ_REQ_STATUS.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.HJ_REQ_STATUS.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.HJ_REQ_STATUS.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.PID_HI
    always_comb begin
        automatic logic [14:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.PID_HI.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.PID_HI.value & ~decoded_wr_biten[15:1]) | (decoded_wr_data[15:1] & decoded_wr_biten[15:1]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.PID_HI.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.PID_HI.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.PID_HI.value <= 15'h7fff;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.PID_HI.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.PID_HI.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.PID_HI.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.PID_HI.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.PID_HI.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.DCR
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.DCR.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.DCR.value & ~decoded_wr_biten[23:16]) | (decoded_wr_data[23:16] & decoded_wr_biten[23:16]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.DCR.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.DCR.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.DCR.value <= 8'hbd;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.DCR.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.DCR.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.DCR.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.DCR.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.DCR.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_VAR
    always_comb begin
        automatic logic [4:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_VAR.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_VAR.value & ~decoded_wr_biten[28:24]) | (decoded_wr_data[28:24] & decoded_wr_biten[28:24]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_VAR.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_VAR.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_VAR.value <= 5'h6;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_VAR.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_VAR.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_VAR.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_VAR.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_VAR.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_FIXED
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_FIXED.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_FIXED.value & ~decoded_wr_biten[31:29]) | (decoded_wr_data[31:29] & decoded_wr_biten[31:29]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_FIXED.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_FIXED.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_FIXED.value <= 3'h1;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_FIXED.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_FIXED.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_FIXED.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_FIXED.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_FIXED.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO.PID_LO
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO.PID_LO.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO.PID_LO.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO.PID_LO.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO.PID_LO.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO.PID_LO.value <= 32'h5a00a5;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO.PID_LO.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO.PID_LO.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO.PID_LO.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO.PID_LO.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO.PID_LO.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_REMAIN_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_REMAIN_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_REMAIN_STAT.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_REMAIN_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_REMAIN_STAT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_REMAIN_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_REMAIN_STAT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_REMAIN_STAT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_REMAIN_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_REMAIN_STAT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_REMAIN_STAT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_PRIMED_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_PRIMED_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_PRIMED_STAT.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_PRIMED_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_PRIMED_STAT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_PRIMED_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_PRIMED_STAT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_PRIMED_STAT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_PRIMED_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_PRIMED_STAT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_PRIMED_STAT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_FAIL_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_FAIL_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_FAIL_STAT.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_FAIL_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_FAIL_STAT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_FAIL_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_FAIL_STAT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_FAIL_STAT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_FAIL_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_FAIL_STAT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_FAIL_STAT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_M3_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_M3_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_M3_STAT.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_M3_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_M3_STAT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_M3_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_M3_STAT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_M3_STAT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_M3_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_M3_STAT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_M3_STAT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CRR_RESPONSE_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CRR_RESPONSE_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CRR_RESPONSE_STAT.value & ~decoded_wr_biten[10:10]) | (decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CRR_RESPONSE_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CRR_RESPONSE_STAT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CRR_RESPONSE_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CRR_RESPONSE_STAT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CRR_RESPONSE_STAT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CRR_RESPONSE_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CRR_RESPONSE_STAT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CRR_RESPONSE_STAT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_DYN_ADDR_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_DYN_ADDR_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_DYN_ADDR_STAT.value & ~decoded_wr_biten[11:11]) | (decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_DYN_ADDR_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_DYN_ADDR_STAT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_DYN_ADDR_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_DYN_ADDR_STAT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_DYN_ADDR_STAT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_DYN_ADDR_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_DYN_ADDR_STAT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_DYN_ADDR_STAT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_NACKED_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_NACKED_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_NACKED_STAT.value & ~decoded_wr_biten[12:12]) | (decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_NACKED_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_NACKED_STAT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_NACKED_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_NACKED_STAT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_NACKED_STAT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_NACKED_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_NACKED_STAT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_NACKED_STAT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_OK_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_OK_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_OK_STAT.value & ~decoded_wr_biten[13:13]) | (decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_OK_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_OK_STAT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_OK_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_OK_STAT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_OK_STAT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_OK_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_OK_STAT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_OK_STAT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_ERR_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_ERR_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_ERR_STAT.value & ~decoded_wr_biten[14:14]) | (decoded_wr_data[14:14] & decoded_wr_biten[14:14]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_ERR_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_ERR_STAT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_ERR_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_ERR_STAT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_ERR_STAT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_ERR_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_ERR_STAT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_ERR_STAT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_OP_RSTACT_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_OP_RSTACT_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_OP_RSTACT_STAT.value & ~decoded_wr_biten[16:16]) | (decoded_wr_data[16:16] & decoded_wr_biten[16:16]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_OP_RSTACT_STAT.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_OP_RSTACT_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_OP_RSTACT_STAT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_OP_RSTACT_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_OP_RSTACT_STAT.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_OP_RSTACT_STAT.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_OP_RSTACT_STAT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_OP_RSTACT_STAT.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_OP_RSTACT_STAT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_OP_RSTACT_STAT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_PARAM_MODIFIED_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_PARAM_MODIFIED_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_PARAM_MODIFIED_STAT.value & ~decoded_wr_biten[17:17]) | (decoded_wr_data[17:17] & decoded_wr_biten[17:17]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_PARAM_MODIFIED_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_PARAM_MODIFIED_STAT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_PARAM_MODIFIED_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_PARAM_MODIFIED_STAT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_PARAM_MODIFIED_STAT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_PARAM_MODIFIED_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_PARAM_MODIFIED_STAT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_PARAM_MODIFIED_STAT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_UNHANDLED_NACK_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_UNHANDLED_NACK_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_UNHANDLED_NACK_STAT.value & ~decoded_wr_biten[18:18]) | (decoded_wr_data[18:18] & decoded_wr_biten[18:18]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_UNHANDLED_NACK_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_UNHANDLED_NACK_STAT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_UNHANDLED_NACK_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_UNHANDLED_NACK_STAT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_UNHANDLED_NACK_STAT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_UNHANDLED_NACK_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_UNHANDLED_NACK_STAT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_UNHANDLED_NACK_STAT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_FATAL_RSTDAA_ERR_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_FATAL_RSTDAA_ERR_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_FATAL_RSTDAA_ERR_STAT.value & ~decoded_wr_biten[19:19]) | (decoded_wr_data[19:19] & decoded_wr_biten[19:19]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_FATAL_RSTDAA_ERR_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_FATAL_RSTDAA_ERR_STAT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_FATAL_RSTDAA_ERR_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_FATAL_RSTDAA_ERR_STAT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_FATAL_RSTDAA_ERR_STAT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_FATAL_RSTDAA_ERR_STAT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_FATAL_RSTDAA_ERR_STAT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_FATAL_RSTDAA_ERR_STAT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_PID_LO.PID_LO
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_PID_LO.PID_LO.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_PID_LO && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_PID_LO.PID_LO.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_PID_LO.PID_LO.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_PID_LO.PID_LO.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_PID_LO.PID_LO.value <= 32'h5a10a5;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_PID_LO.PID_LO.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_PID_LO.PID_LO.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_PID_LO.PID_LO.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_PID_LO.PID_LO.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_PID_LO.PID_LO.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_REMAIN_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_REMAIN_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_REMAIN_SIGNAL_EN.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_REMAIN_SIGNAL_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_REMAIN_SIGNAL_EN.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_REMAIN_SIGNAL_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_REMAIN_SIGNAL_EN.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_REMAIN_SIGNAL_EN.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_REMAIN_SIGNAL_EN.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_REMAIN_SIGNAL_EN.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_REMAIN_SIGNAL_EN.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_PRIMED_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_PRIMED_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_PRIMED_SIGNAL_EN.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_PRIMED_SIGNAL_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_PRIMED_SIGNAL_EN.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_PRIMED_SIGNAL_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_PRIMED_SIGNAL_EN.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_PRIMED_SIGNAL_EN.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_PRIMED_SIGNAL_EN.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_PRIMED_SIGNAL_EN.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_PRIMED_SIGNAL_EN.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_FAIL_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_FAIL_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_FAIL_SIGNAL_EN.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_FAIL_SIGNAL_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_FAIL_SIGNAL_EN.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_FAIL_SIGNAL_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_FAIL_SIGNAL_EN.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_FAIL_SIGNAL_EN.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_FAIL_SIGNAL_EN.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_FAIL_SIGNAL_EN.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_FAIL_SIGNAL_EN.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_M3_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_M3_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_M3_SIGNAL_EN.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_M3_SIGNAL_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_M3_SIGNAL_EN.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_M3_SIGNAL_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_M3_SIGNAL_EN.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_M3_SIGNAL_EN.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_M3_SIGNAL_EN.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_M3_SIGNAL_EN.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_M3_SIGNAL_EN.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CRR_RESPONSE_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CRR_RESPONSE_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CRR_RESPONSE_SIGNAL_EN.value & ~decoded_wr_biten[10:10]) | (decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CRR_RESPONSE_SIGNAL_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CRR_RESPONSE_SIGNAL_EN.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CRR_RESPONSE_SIGNAL_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CRR_RESPONSE_SIGNAL_EN.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CRR_RESPONSE_SIGNAL_EN.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CRR_RESPONSE_SIGNAL_EN.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CRR_RESPONSE_SIGNAL_EN.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CRR_RESPONSE_SIGNAL_EN.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_DYN_ADDR_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_DYN_ADDR_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_DYN_ADDR_SIGNAL_EN.value & ~decoded_wr_biten[11:11]) | (decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_DYN_ADDR_SIGNAL_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_DYN_ADDR_SIGNAL_EN.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_DYN_ADDR_SIGNAL_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_DYN_ADDR_SIGNAL_EN.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_DYN_ADDR_SIGNAL_EN.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_DYN_ADDR_SIGNAL_EN.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_DYN_ADDR_SIGNAL_EN.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_DYN_ADDR_SIGNAL_EN.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_NACKED_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_NACKED_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_NACKED_SIGNAL_EN.value & ~decoded_wr_biten[12:12]) | (decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_NACKED_SIGNAL_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_NACKED_SIGNAL_EN.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_NACKED_SIGNAL_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_NACKED_SIGNAL_EN.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_NACKED_SIGNAL_EN.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_NACKED_SIGNAL_EN.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_NACKED_SIGNAL_EN.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_NACKED_SIGNAL_EN.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_OK_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_OK_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_OK_SIGNAL_EN.value & ~decoded_wr_biten[13:13]) | (decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_OK_SIGNAL_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_OK_SIGNAL_EN.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_OK_SIGNAL_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_OK_SIGNAL_EN.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_OK_SIGNAL_EN.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_OK_SIGNAL_EN.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_OK_SIGNAL_EN.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_OK_SIGNAL_EN.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_ERR_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_ERR_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_ERR_SIGNAL_EN.value & ~decoded_wr_biten[14:14]) | (decoded_wr_data[14:14] & decoded_wr_biten[14:14]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_ERR_SIGNAL_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_ERR_SIGNAL_EN.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_ERR_SIGNAL_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_ERR_SIGNAL_EN.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_ERR_SIGNAL_EN.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_ERR_SIGNAL_EN.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_ERR_SIGNAL_EN.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_ERR_SIGNAL_EN.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_OP_RSTACT_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_OP_RSTACT_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_OP_RSTACT_SIGNAL_EN.value & ~decoded_wr_biten[16:16]) | (decoded_wr_data[16:16] & decoded_wr_biten[16:16]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_OP_RSTACT_SIGNAL_EN.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_OP_RSTACT_SIGNAL_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_OP_RSTACT_SIGNAL_EN.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_OP_RSTACT_SIGNAL_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_OP_RSTACT_SIGNAL_EN.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_OP_RSTACT_SIGNAL_EN.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_OP_RSTACT_SIGNAL_EN.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_OP_RSTACT_SIGNAL_EN.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_OP_RSTACT_SIGNAL_EN.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_OP_RSTACT_SIGNAL_EN.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_PARAM_MODIFIED_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_PARAM_MODIFIED_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_PARAM_MODIFIED_SIGNAL_EN.value & ~decoded_wr_biten[17:17]) | (decoded_wr_data[17:17] & decoded_wr_biten[17:17]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_PARAM_MODIFIED_SIGNAL_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_PARAM_MODIFIED_SIGNAL_EN.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_PARAM_MODIFIED_SIGNAL_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_PARAM_MODIFIED_SIGNAL_EN.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_PARAM_MODIFIED_SIGNAL_EN.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_PARAM_MODIFIED_SIGNAL_EN.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_PARAM_MODIFIED_SIGNAL_EN.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_PARAM_MODIFIED_SIGNAL_EN.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_UNHANDLED_NACK_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_UNHANDLED_NACK_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_UNHANDLED_NACK_SIGNAL_EN.value & ~decoded_wr_biten[18:18]) | (decoded_wr_data[18:18] & decoded_wr_biten[18:18]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_UNHANDLED_NACK_SIGNAL_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_UNHANDLED_NACK_SIGNAL_EN.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_UNHANDLED_NACK_SIGNAL_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_UNHANDLED_NACK_SIGNAL_EN.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_UNHANDLED_NACK_SIGNAL_EN.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_UNHANDLED_NACK_SIGNAL_EN.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_UNHANDLED_NACK_SIGNAL_EN.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_UNHANDLED_NACK_SIGNAL_EN.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_FATAL_RSTDAA_ERR_SIGNAL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_FATAL_RSTDAA_ERR_SIGNAL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_FATAL_RSTDAA_ERR_SIGNAL_EN.value & ~decoded_wr_biten[19:19]) | (decoded_wr_data[19:19] & decoded_wr_biten[19:19]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_FATAL_RSTDAA_ERR_SIGNAL_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_FATAL_RSTDAA_ERR_SIGNAL_EN.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_FATAL_RSTDAA_ERR_SIGNAL_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_FATAL_RSTDAA_ERR_SIGNAL_EN.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_FATAL_RSTDAA_ERR_SIGNAL_EN.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_FATAL_RSTDAA_ERR_SIGNAL_EN.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_FATAL_RSTDAA_ERR_SIGNAL_EN.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_FATAL_RSTDAA_ERR_SIGNAL_EN.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CRR_RESPONSE_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CRR_RESPONSE_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CRR_RESPONSE_FORCE.value & ~decoded_wr_biten[10:10]) | (decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CRR_RESPONSE_FORCE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CRR_RESPONSE_FORCE.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CRR_RESPONSE_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CRR_RESPONSE_FORCE.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CRR_RESPONSE_FORCE.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CRR_RESPONSE_FORCE.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CRR_RESPONSE_FORCE.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CRR_RESPONSE_FORCE.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_DYN_ADDR_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_DYN_ADDR_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_DYN_ADDR_FORCE.value & ~decoded_wr_biten[11:11]) | (decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_DYN_ADDR_FORCE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_DYN_ADDR_FORCE.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_DYN_ADDR_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_DYN_ADDR_FORCE.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_DYN_ADDR_FORCE.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_DYN_ADDR_FORCE.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_DYN_ADDR_FORCE.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_DYN_ADDR_FORCE.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_NACKED_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_NACKED_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_NACKED_FORCE.value & ~decoded_wr_biten[12:12]) | (decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_NACKED_FORCE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_NACKED_FORCE.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_NACKED_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_NACKED_FORCE.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_NACKED_FORCE.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_NACKED_FORCE.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_NACKED_FORCE.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_NACKED_FORCE.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_OK_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_OK_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_OK_FORCE.value & ~decoded_wr_biten[13:13]) | (decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_OK_FORCE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_OK_FORCE.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_OK_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_OK_FORCE.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_OK_FORCE.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_OK_FORCE.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_OK_FORCE.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_OK_FORCE.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_ERR_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_ERR_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_ERR_FORCE.value & ~decoded_wr_biten[14:14]) | (decoded_wr_data[14:14] & decoded_wr_biten[14:14]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_ERR_FORCE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_ERR_FORCE.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_ERR_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_ERR_FORCE.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_ERR_FORCE.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_ERR_FORCE.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_ERR_FORCE.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_ERR_FORCE.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_OP_RSTACT_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_OP_RSTACT_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_OP_RSTACT_FORCE.value & ~decoded_wr_biten[16:16]) | (decoded_wr_data[16:16] & decoded_wr_biten[16:16]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_OP_RSTACT_FORCE.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_OP_RSTACT_FORCE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_OP_RSTACT_FORCE.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_OP_RSTACT_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_OP_RSTACT_FORCE.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_OP_RSTACT_FORCE.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_OP_RSTACT_FORCE.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_OP_RSTACT_FORCE.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_OP_RSTACT_FORCE.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_PARAM_MODIFIED_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_PARAM_MODIFIED_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_PARAM_MODIFIED_FORCE.value & ~decoded_wr_biten[17:17]) | (decoded_wr_data[17:17] & decoded_wr_biten[17:17]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_PARAM_MODIFIED_FORCE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_PARAM_MODIFIED_FORCE.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_PARAM_MODIFIED_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_PARAM_MODIFIED_FORCE.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_PARAM_MODIFIED_FORCE.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_PARAM_MODIFIED_FORCE.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_PARAM_MODIFIED_FORCE.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_PARAM_MODIFIED_FORCE.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_UNHANDLED_NACK_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_UNHANDLED_NACK_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_UNHANDLED_NACK_FORCE.value & ~decoded_wr_biten[18:18]) | (decoded_wr_data[18:18] & decoded_wr_biten[18:18]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_UNHANDLED_NACK_FORCE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_UNHANDLED_NACK_FORCE.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_UNHANDLED_NACK_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_UNHANDLED_NACK_FORCE.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_UNHANDLED_NACK_FORCE.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_UNHANDLED_NACK_FORCE.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_UNHANDLED_NACK_FORCE.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_UNHANDLED_NACK_FORCE.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_FATAL_RSTDAA_ERR_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_FATAL_RSTDAA_ERR_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_FATAL_RSTDAA_ERR_FORCE.value & ~decoded_wr_biten[19:19]) | (decoded_wr_data[19:19] & decoded_wr_biten[19:19]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_FATAL_RSTDAA_ERR_FORCE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_FATAL_RSTDAA_ERR_FORCE.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_FATAL_RSTDAA_ERR_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_FATAL_RSTDAA_ERR_FORCE.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_FATAL_RSTDAA_ERR_FORCE.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_FATAL_RSTDAA_ERR_FORCE.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_FATAL_RSTDAA_ERR_FORCE.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_FATAL_RSTDAA_ERR_FORCE.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP1_BUS_CONFIG
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP1_BUS_CONFIG.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP1_BUS_CONFIG.value & ~decoded_wr_biten[2:0]) | (decoded_wr_data[2:0] & decoded_wr_biten[2:0]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP1_BUS_CONFIG.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP1_BUS_CONFIG.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP1_BUS_CONFIG.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP1_BUS_CONFIG.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP1_BUS_CONFIG.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP1_BUS_CONFIG.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP1_BUS_CONFIG.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP1_BUS_CONFIG.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP2_DEV_INTERACT
    always_comb begin
        automatic logic [3:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP2_DEV_INTERACT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP2_DEV_INTERACT.value & ~decoded_wr_biten[11:8]) | (decoded_wr_data[11:8] & decoded_wr_biten[11:8]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP2_DEV_INTERACT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP2_DEV_INTERACT.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP2_DEV_INTERACT.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP2_DEV_INTERACT.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP2_DEV_INTERACT.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP2_DEV_INTERACT.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP2_DEV_INTERACT.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP2_DEV_INTERACT.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RST_ACTION
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RST_ACTION.value;
        load_next_c = '0;
        if(hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RST_ACTION.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RST_ACTION.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RST_ACTION.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RST_ACTION.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RST_ACTION.value <= 8'h0;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RST_ACTION.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RST_ACTION.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RST_ACTION.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RST_ACTION.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RST_ACTION.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_PERIPHERAL
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_PERIPHERAL.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_PERIPHERAL.value & ~decoded_wr_biten[15:8]) | (decoded_wr_data[15:8] & decoded_wr_biten[15:8]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_PERIPHERAL.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_PERIPHERAL.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_PERIPHERAL.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_PERIPHERAL.value <= 8'h0;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_PERIPHERAL.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_PERIPHERAL.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_PERIPHERAL.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_PERIPHERAL.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_PERIPHERAL.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_TARGET
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_TARGET.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_TARGET.value & ~decoded_wr_biten[23:16]) | (decoded_wr_data[23:16] & decoded_wr_biten[23:16]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_TARGET.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_TARGET.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_TARGET.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_TARGET.value <= 8'h0;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_TARGET.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_TARGET.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_TARGET.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_TARGET.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_TARGET.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_DYNAMIC_ADDR
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_DYNAMIC_ADDR.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_DYNAMIC_ADDR.value & ~decoded_wr_biten[31:31]) | (decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_DYNAMIC_ADDR.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_DYNAMIC_ADDR.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_DYNAMIC_ADDR.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_DYNAMIC_ADDR.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_DYNAMIC_ADDR.value <= 1'h1;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_DYNAMIC_ADDR.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_DYNAMIC_ADDR.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_DYNAMIC_ADDR.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_DYNAMIC_ADDR.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_DYNAMIC_ADDR.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR
    always_comb begin
        automatic logic [6:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR.value & ~decoded_wr_biten[6:0]) | (decoded_wr_data[6:0] & decoded_wr_biten[6:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR.value <= 7'h0;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR_VALID
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR_VALID.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR_VALID.value & ~decoded_wr_biten[15:15]) | (decoded_wr_data[15:15] & decoded_wr_biten[15:15]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR_VALID.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR_VALID.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR_VALID.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR_VALID.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR_VALID.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR_VALID.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR_VALID.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR_VALID.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR_VALID.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR_VALID.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR
    always_comb begin
        automatic logic [6:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR.value & ~decoded_wr_biten[22:16]) | (decoded_wr_data[22:16] & decoded_wr_biten[22:16]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR.value <= 7'h0;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR_VALID
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR_VALID.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR_VALID.value & ~decoded_wr_biten[31:31]) | (decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR_VALID.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR_VALID.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR_VALID.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR_VALID.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR_VALID.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR_VALID.load_next) begin
                field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR_VALID.value <= field_combo.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR_VALID.next;
            end
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR_VALID.value = field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR_VALID.value;
    // Field: I3CCSR.I3C_EC.StdbyCtrlMode.__rsvd_3.__rsvd
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.StdbyCtrlMode.__rsvd_3.__rsvd.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.StdbyCtrlMode.__rsvd_3 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.StdbyCtrlMode.__rsvd_3.__rsvd.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.I3C_EC.StdbyCtrlMode.__rsvd_3.__rsvd.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.StdbyCtrlMode.__rsvd_3.__rsvd.next = next_c;
        field_combo.I3C_EC.StdbyCtrlMode.__rsvd_3.__rsvd.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.I3C_EC.StdbyCtrlMode.__rsvd_3.__rsvd.load_next) begin
            field_storage.I3C_EC.StdbyCtrlMode.__rsvd_3.__rsvd.value <= field_combo.I3C_EC.StdbyCtrlMode.__rsvd_3.__rsvd.next;
        end
    end
    assign hwif_out.I3C_EC.StdbyCtrlMode.__rsvd_3.__rsvd.value = field_storage.I3C_EC.StdbyCtrlMode.__rsvd_3.__rsvd.value;
    assign hwif_out.I3C_EC.TTI.EXTCAP_HEADER.CAP_ID.value = 8'hc4;
    assign hwif_out.I3C_EC.TTI.EXTCAP_HEADER.CAP_LENGTH.value = 16'h10;
    // Field: I3CCSR.I3C_EC.TTI.CONTROL.HJ_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.CONTROL.HJ_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.CONTROL.HJ_EN.value & ~decoded_wr_biten[10:10]) | (decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.CONTROL.HJ_EN.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.CONTROL.HJ_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.CONTROL.HJ_EN.next = next_c;
        field_combo.I3C_EC.TTI.CONTROL.HJ_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.CONTROL.HJ_EN.value <= 1'h1;
        end else begin
            if(field_combo.I3C_EC.TTI.CONTROL.HJ_EN.load_next) begin
                field_storage.I3C_EC.TTI.CONTROL.HJ_EN.value <= field_combo.I3C_EC.TTI.CONTROL.HJ_EN.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.CONTROL.HJ_EN.value = field_storage.I3C_EC.TTI.CONTROL.HJ_EN.value;
    // Field: I3CCSR.I3C_EC.TTI.CONTROL.CRR_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.CONTROL.CRR_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.CONTROL.CRR_EN.value & ~decoded_wr_biten[11:11]) | (decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.CONTROL.CRR_EN.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.CONTROL.CRR_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.CONTROL.CRR_EN.next = next_c;
        field_combo.I3C_EC.TTI.CONTROL.CRR_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.CONTROL.CRR_EN.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.CONTROL.CRR_EN.load_next) begin
                field_storage.I3C_EC.TTI.CONTROL.CRR_EN.value <= field_combo.I3C_EC.TTI.CONTROL.CRR_EN.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.CONTROL.CRR_EN.value = field_storage.I3C_EC.TTI.CONTROL.CRR_EN.value;
    // Field: I3CCSR.I3C_EC.TTI.CONTROL.IBI_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.CONTROL.IBI_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.CONTROL.IBI_EN.value & ~decoded_wr_biten[12:12]) | (decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.CONTROL.IBI_EN.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.CONTROL.IBI_EN.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.CONTROL.IBI_EN.next = next_c;
        field_combo.I3C_EC.TTI.CONTROL.IBI_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.CONTROL.IBI_EN.value <= 1'h1;
        end else begin
            if(field_combo.I3C_EC.TTI.CONTROL.IBI_EN.load_next) begin
                field_storage.I3C_EC.TTI.CONTROL.IBI_EN.value <= field_combo.I3C_EC.TTI.CONTROL.IBI_EN.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.CONTROL.IBI_EN.value = field_storage.I3C_EC.TTI.CONTROL.IBI_EN.value;
    // Field: I3CCSR.I3C_EC.TTI.CONTROL.IBI_RETRY_NUM
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.CONTROL.IBI_RETRY_NUM.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.CONTROL.IBI_RETRY_NUM.value & ~decoded_wr_biten[15:13]) | (decoded_wr_data[15:13] & decoded_wr_biten[15:13]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.CONTROL.IBI_RETRY_NUM.next = next_c;
        field_combo.I3C_EC.TTI.CONTROL.IBI_RETRY_NUM.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.CONTROL.IBI_RETRY_NUM.value <= 3'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.CONTROL.IBI_RETRY_NUM.load_next) begin
                field_storage.I3C_EC.TTI.CONTROL.IBI_RETRY_NUM.value <= field_combo.I3C_EC.TTI.CONTROL.IBI_RETRY_NUM.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.CONTROL.IBI_RETRY_NUM.value = field_storage.I3C_EC.TTI.CONTROL.IBI_RETRY_NUM.value;
    // Field: I3CCSR.I3C_EC.TTI.STATUS.PROTOCOL_ERROR
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.STATUS.PROTOCOL_ERROR.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.I3C_EC.TTI.STATUS.PROTOCOL_ERROR.next;
        load_next_c = '1;
        field_combo.I3C_EC.TTI.STATUS.PROTOCOL_ERROR.next = next_c;
        field_combo.I3C_EC.TTI.STATUS.PROTOCOL_ERROR.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.STATUS.PROTOCOL_ERROR.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.STATUS.PROTOCOL_ERROR.load_next) begin
                field_storage.I3C_EC.TTI.STATUS.PROTOCOL_ERROR.value <= field_combo.I3C_EC.TTI.STATUS.PROTOCOL_ERROR.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.STATUS.PROTOCOL_ERROR.value = field_storage.I3C_EC.TTI.STATUS.PROTOCOL_ERROR.value;
    // Field: I3CCSR.I3C_EC.TTI.STATUS.LAST_IBI_STATUS
    always_comb begin
        automatic logic [1:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.STATUS.LAST_IBI_STATUS.value;
        load_next_c = '0;
        if(hwif_in.I3C_EC.TTI.STATUS.LAST_IBI_STATUS.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.STATUS.LAST_IBI_STATUS.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.STATUS.LAST_IBI_STATUS.next = next_c;
        field_combo.I3C_EC.TTI.STATUS.LAST_IBI_STATUS.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.STATUS.LAST_IBI_STATUS.value <= 2'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.STATUS.LAST_IBI_STATUS.load_next) begin
                field_storage.I3C_EC.TTI.STATUS.LAST_IBI_STATUS.value <= field_combo.I3C_EC.TTI.STATUS.LAST_IBI_STATUS.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.STATUS.LAST_IBI_STATUS.value = field_storage.I3C_EC.TTI.STATUS.LAST_IBI_STATUS.value;
    assign hwif_out.I3C_EC.TTI.STATUS.LAST_IBI_STATUS.swacc = decoded_reg_strb.I3C_EC.TTI.STATUS;
    // Field: I3CCSR.I3C_EC.TTI.RESET_CONTROL.SOFT_RST
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.RESET_CONTROL.SOFT_RST.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.RESET_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.RESET_CONTROL.SOFT_RST.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.RESET_CONTROL.SOFT_RST.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.RESET_CONTROL.SOFT_RST.next = next_c;
        field_combo.I3C_EC.TTI.RESET_CONTROL.SOFT_RST.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.RESET_CONTROL.SOFT_RST.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.RESET_CONTROL.SOFT_RST.load_next) begin
                field_storage.I3C_EC.TTI.RESET_CONTROL.SOFT_RST.value <= field_combo.I3C_EC.TTI.RESET_CONTROL.SOFT_RST.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.RESET_CONTROL.SOFT_RST.value = field_storage.I3C_EC.TTI.RESET_CONTROL.SOFT_RST.value;
    // Field: I3CCSR.I3C_EC.TTI.RESET_CONTROL.TX_DESC_RST
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.RESET_CONTROL.TX_DESC_RST.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.RESET_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.RESET_CONTROL.TX_DESC_RST.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.RESET_CONTROL.TX_DESC_RST.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.RESET_CONTROL.TX_DESC_RST.next = next_c;
        field_combo.I3C_EC.TTI.RESET_CONTROL.TX_DESC_RST.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.RESET_CONTROL.TX_DESC_RST.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.RESET_CONTROL.TX_DESC_RST.load_next) begin
                field_storage.I3C_EC.TTI.RESET_CONTROL.TX_DESC_RST.value <= field_combo.I3C_EC.TTI.RESET_CONTROL.TX_DESC_RST.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.RESET_CONTROL.TX_DESC_RST.value = field_storage.I3C_EC.TTI.RESET_CONTROL.TX_DESC_RST.value;
    // Field: I3CCSR.I3C_EC.TTI.RESET_CONTROL.RX_DESC_RST
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.RESET_CONTROL.RX_DESC_RST.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.RESET_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.RESET_CONTROL.RX_DESC_RST.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.RESET_CONTROL.RX_DESC_RST.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.RESET_CONTROL.RX_DESC_RST.next = next_c;
        field_combo.I3C_EC.TTI.RESET_CONTROL.RX_DESC_RST.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.RESET_CONTROL.RX_DESC_RST.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.RESET_CONTROL.RX_DESC_RST.load_next) begin
                field_storage.I3C_EC.TTI.RESET_CONTROL.RX_DESC_RST.value <= field_combo.I3C_EC.TTI.RESET_CONTROL.RX_DESC_RST.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.RESET_CONTROL.RX_DESC_RST.value = field_storage.I3C_EC.TTI.RESET_CONTROL.RX_DESC_RST.value;
    // Field: I3CCSR.I3C_EC.TTI.RESET_CONTROL.TX_DATA_RST
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.RESET_CONTROL.TX_DATA_RST.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.RESET_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.RESET_CONTROL.TX_DATA_RST.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.RESET_CONTROL.TX_DATA_RST.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.RESET_CONTROL.TX_DATA_RST.next = next_c;
        field_combo.I3C_EC.TTI.RESET_CONTROL.TX_DATA_RST.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.RESET_CONTROL.TX_DATA_RST.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.RESET_CONTROL.TX_DATA_RST.load_next) begin
                field_storage.I3C_EC.TTI.RESET_CONTROL.TX_DATA_RST.value <= field_combo.I3C_EC.TTI.RESET_CONTROL.TX_DATA_RST.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.RESET_CONTROL.TX_DATA_RST.value = field_storage.I3C_EC.TTI.RESET_CONTROL.TX_DATA_RST.value;
    // Field: I3CCSR.I3C_EC.TTI.RESET_CONTROL.RX_DATA_RST
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.RESET_CONTROL.RX_DATA_RST.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.RESET_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.RESET_CONTROL.RX_DATA_RST.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.RESET_CONTROL.RX_DATA_RST.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.RESET_CONTROL.RX_DATA_RST.next = next_c;
        field_combo.I3C_EC.TTI.RESET_CONTROL.RX_DATA_RST.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.RESET_CONTROL.RX_DATA_RST.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.RESET_CONTROL.RX_DATA_RST.load_next) begin
                field_storage.I3C_EC.TTI.RESET_CONTROL.RX_DATA_RST.value <= field_combo.I3C_EC.TTI.RESET_CONTROL.RX_DATA_RST.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.RESET_CONTROL.RX_DATA_RST.value = field_storage.I3C_EC.TTI.RESET_CONTROL.RX_DATA_RST.value;
    // Field: I3CCSR.I3C_EC.TTI.RESET_CONTROL.IBI_QUEUE_RST
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.RESET_CONTROL.IBI_QUEUE_RST.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.RESET_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.RESET_CONTROL.IBI_QUEUE_RST.value & ~decoded_wr_biten[5:5]) | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.RESET_CONTROL.IBI_QUEUE_RST.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.RESET_CONTROL.IBI_QUEUE_RST.next = next_c;
        field_combo.I3C_EC.TTI.RESET_CONTROL.IBI_QUEUE_RST.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.RESET_CONTROL.IBI_QUEUE_RST.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.RESET_CONTROL.IBI_QUEUE_RST.load_next) begin
                field_storage.I3C_EC.TTI.RESET_CONTROL.IBI_QUEUE_RST.value <= field_combo.I3C_EC.TTI.RESET_CONTROL.IBI_QUEUE_RST.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.RESET_CONTROL.IBI_QUEUE_RST.value = field_storage.I3C_EC.TTI.RESET_CONTROL.IBI_QUEUE_RST.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT.value & ~(decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT.value <= field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT.value = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT.value & ~(decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT.value <= field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT.value = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT.value & ~(decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT.value <= field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT.value = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT.value & ~(decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT.value <= field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT.value = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_STATUS.TX_DATA_THLD_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DATA_THLD_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DATA_THLD_STAT.value & ~(decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TX_DATA_THLD_STAT.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TX_DATA_THLD_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DATA_THLD_STAT.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DATA_THLD_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DATA_THLD_STAT.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DATA_THLD_STAT.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DATA_THLD_STAT.value <= field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DATA_THLD_STAT.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_STATUS.TX_DATA_THLD_STAT.value = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DATA_THLD_STAT.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_STATUS.RX_DATA_THLD_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DATA_THLD_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DATA_THLD_STAT.value & ~(decoded_wr_data[9:9] & decoded_wr_biten[9:9]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.RX_DATA_THLD_STAT.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.RX_DATA_THLD_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DATA_THLD_STAT.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DATA_THLD_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DATA_THLD_STAT.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DATA_THLD_STAT.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DATA_THLD_STAT.value <= field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DATA_THLD_STAT.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_STATUS.RX_DATA_THLD_STAT.value = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DATA_THLD_STAT.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_THLD_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_THLD_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_THLD_STAT.value & ~(decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_THLD_STAT.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_THLD_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_THLD_STAT.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_THLD_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_THLD_STAT.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_THLD_STAT.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_THLD_STAT.value <= field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_THLD_STAT.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_THLD_STAT.value = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_THLD_STAT.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_THLD_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_THLD_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_THLD_STAT.value & ~(decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_THLD_STAT.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_THLD_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_THLD_STAT.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_THLD_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_THLD_STAT.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_THLD_STAT.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_THLD_STAT.value <= field_combo.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_THLD_STAT.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_THLD_STAT.value = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_THLD_STAT.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_STATUS.IBI_THLD_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.IBI_THLD_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.IBI_THLD_STAT.value & ~(decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.IBI_THLD_STAT.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.IBI_THLD_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.IBI_THLD_STAT.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.IBI_THLD_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.IBI_THLD_STAT.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_STATUS.IBI_THLD_STAT.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_STATUS.IBI_THLD_STAT.value <= field_combo.I3C_EC.TTI.INTERRUPT_STATUS.IBI_THLD_STAT.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_STATUS.IBI_THLD_STAT.value = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.IBI_THLD_STAT.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_STATUS.IBI_DONE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.IBI_DONE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.IBI_DONE.value & ~(decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.IBI_DONE.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.IBI_DONE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.IBI_DONE.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.IBI_DONE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.IBI_DONE.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_STATUS.IBI_DONE.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_STATUS.IBI_DONE.value <= field_combo.I3C_EC.TTI.INTERRUPT_STATUS.IBI_DONE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_STATUS.IBI_DONE.value = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.IBI_DONE.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_STATUS.PENDING_INTERRUPT
    always_comb begin
        automatic logic [3:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.PENDING_INTERRUPT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.PENDING_INTERRUPT.value & ~(decoded_wr_data[18:15] & decoded_wr_biten[18:15]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.PENDING_INTERRUPT.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.PENDING_INTERRUPT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.PENDING_INTERRUPT.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.PENDING_INTERRUPT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.PENDING_INTERRUPT.value <= 4'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_STATUS.PENDING_INTERRUPT.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_STATUS.PENDING_INTERRUPT.value <= field_combo.I3C_EC.TTI.INTERRUPT_STATUS.PENDING_INTERRUPT.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_STATUS.PENDING_INTERRUPT.value = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.PENDING_INTERRUPT.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT.value & ~(decoded_wr_data[25:25] & decoded_wr_biten[25:25]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT.value <= field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT.value = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_COMPLETE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_COMPLETE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_COMPLETE.value & ~(decoded_wr_data[26:26] & decoded_wr_biten[26:26]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_COMPLETE.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_COMPLETE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_COMPLETE.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_COMPLETE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_COMPLETE.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_COMPLETE.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_COMPLETE.value <= field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_COMPLETE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_COMPLETE.value = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_COMPLETE.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT.value & ~(decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT.value <= field_combo.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT.value = field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_STAT_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_STAT_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_STAT_EN.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_STAT_EN.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_STAT_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_STAT_EN.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_STAT_EN.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_STAT_EN.value <= field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_STAT_EN.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_STAT_EN.value = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_STAT_EN.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_STAT_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_STAT_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_STAT_EN.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_STAT_EN.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_STAT_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_STAT_EN.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_STAT_EN.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_STAT_EN.value <= field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_STAT_EN.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_STAT_EN.value = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_STAT_EN.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_TIMEOUT_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_TIMEOUT_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_TIMEOUT_EN.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_TIMEOUT_EN.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_TIMEOUT_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_TIMEOUT_EN.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_TIMEOUT_EN.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_TIMEOUT_EN.value <= field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_TIMEOUT_EN.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_TIMEOUT_EN.value = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_TIMEOUT_EN.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_TIMEOUT_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_TIMEOUT_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_TIMEOUT_EN.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_TIMEOUT_EN.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_TIMEOUT_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_TIMEOUT_EN.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_TIMEOUT_EN.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_TIMEOUT_EN.value <= field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_TIMEOUT_EN.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_TIMEOUT_EN.value = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_TIMEOUT_EN.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DATA_THLD_STAT_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DATA_THLD_STAT_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DATA_THLD_STAT_EN.value & ~decoded_wr_biten[8:8]) | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DATA_THLD_STAT_EN.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DATA_THLD_STAT_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DATA_THLD_STAT_EN.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DATA_THLD_STAT_EN.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DATA_THLD_STAT_EN.value <= field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DATA_THLD_STAT_EN.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DATA_THLD_STAT_EN.value = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DATA_THLD_STAT_EN.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DATA_THLD_STAT_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DATA_THLD_STAT_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DATA_THLD_STAT_EN.value & ~decoded_wr_biten[9:9]) | (decoded_wr_data[9:9] & decoded_wr_biten[9:9]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DATA_THLD_STAT_EN.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DATA_THLD_STAT_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DATA_THLD_STAT_EN.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DATA_THLD_STAT_EN.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DATA_THLD_STAT_EN.value <= field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DATA_THLD_STAT_EN.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DATA_THLD_STAT_EN.value = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DATA_THLD_STAT_EN.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_THLD_STAT_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_THLD_STAT_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_THLD_STAT_EN.value & ~decoded_wr_biten[10:10]) | (decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_THLD_STAT_EN.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_THLD_STAT_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_THLD_STAT_EN.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_THLD_STAT_EN.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_THLD_STAT_EN.value <= field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_THLD_STAT_EN.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_THLD_STAT_EN.value = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_THLD_STAT_EN.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_THLD_STAT_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_THLD_STAT_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_THLD_STAT_EN.value & ~decoded_wr_biten[11:11]) | (decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_THLD_STAT_EN.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_THLD_STAT_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_THLD_STAT_EN.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_THLD_STAT_EN.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_THLD_STAT_EN.value <= field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_THLD_STAT_EN.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_THLD_STAT_EN.value = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_THLD_STAT_EN.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_THLD_STAT_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_THLD_STAT_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_THLD_STAT_EN.value & ~decoded_wr_biten[12:12]) | (decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_THLD_STAT_EN.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_THLD_STAT_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_THLD_STAT_EN.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_THLD_STAT_EN.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_THLD_STAT_EN.value <= field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_THLD_STAT_EN.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_THLD_STAT_EN.value = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_THLD_STAT_EN.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_DONE_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_DONE_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_DONE_EN.value & ~decoded_wr_biten[13:13]) | (decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_DONE_EN.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_DONE_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_DONE_EN.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_DONE_EN.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_DONE_EN.value <= field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_DONE_EN.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_DONE_EN.value = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_DONE_EN.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_ENABLE.TRANSFER_ABORT_STAT_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TRANSFER_ABORT_STAT_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TRANSFER_ABORT_STAT_EN.value & ~decoded_wr_biten[25:25]) | (decoded_wr_data[25:25] & decoded_wr_biten[25:25]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TRANSFER_ABORT_STAT_EN.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TRANSFER_ABORT_STAT_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TRANSFER_ABORT_STAT_EN.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TRANSFER_ABORT_STAT_EN.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TRANSFER_ABORT_STAT_EN.value <= field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TRANSFER_ABORT_STAT_EN.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_ENABLE.TRANSFER_ABORT_STAT_EN.value = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TRANSFER_ABORT_STAT_EN.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_COMPLETE_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_COMPLETE_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_COMPLETE_EN.value & ~decoded_wr_biten[26:26]) | (decoded_wr_data[26:26] & decoded_wr_biten[26:26]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_COMPLETE_EN.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_COMPLETE_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_COMPLETE_EN.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_COMPLETE_EN.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_COMPLETE_EN.value <= field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_COMPLETE_EN.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_COMPLETE_EN.value = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_COMPLETE_EN.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_ENABLE.TRANSFER_ERR_STAT_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TRANSFER_ERR_STAT_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TRANSFER_ERR_STAT_EN.value & ~decoded_wr_biten[31:31]) | (decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TRANSFER_ERR_STAT_EN.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TRANSFER_ERR_STAT_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TRANSFER_ERR_STAT_EN.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TRANSFER_ERR_STAT_EN.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TRANSFER_ERR_STAT_EN.value <= field_combo.I3C_EC.TTI.INTERRUPT_ENABLE.TRANSFER_ERR_STAT_EN.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_ENABLE.TRANSFER_ERR_STAT_EN.value = field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TRANSFER_ERR_STAT_EN.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_STAT_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_STAT_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_STAT_FORCE.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_STAT_FORCE.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_STAT_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_STAT_FORCE.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_STAT_FORCE.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_STAT_FORCE.value <= field_combo.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_STAT_FORCE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_STAT_FORCE.value = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_STAT_FORCE.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_STAT_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_STAT_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_STAT_FORCE.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_STAT_FORCE.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_STAT_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_STAT_FORCE.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_STAT_FORCE.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_STAT_FORCE.value <= field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_STAT_FORCE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_STAT_FORCE.value = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_STAT_FORCE.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_TIMEOUT_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_TIMEOUT_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_TIMEOUT_FORCE.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_TIMEOUT_FORCE.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_TIMEOUT_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_TIMEOUT_FORCE.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_TIMEOUT_FORCE.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_TIMEOUT_FORCE.value <= field_combo.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_TIMEOUT_FORCE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_TIMEOUT_FORCE.value = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_TIMEOUT_FORCE.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_TIMEOUT_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_TIMEOUT_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_TIMEOUT_FORCE.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_TIMEOUT_FORCE.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_TIMEOUT_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_TIMEOUT_FORCE.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_TIMEOUT_FORCE.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_TIMEOUT_FORCE.value <= field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_TIMEOUT_FORCE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_TIMEOUT_FORCE.value = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_TIMEOUT_FORCE.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_FORCE.TX_DATA_THLD_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DATA_THLD_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DATA_THLD_FORCE.value & ~decoded_wr_biten[8:8]) | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DATA_THLD_FORCE.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DATA_THLD_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DATA_THLD_FORCE.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DATA_THLD_FORCE.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DATA_THLD_FORCE.value <= field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DATA_THLD_FORCE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_FORCE.TX_DATA_THLD_FORCE.value = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DATA_THLD_FORCE.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_FORCE.RX_DATA_THLD_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DATA_THLD_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DATA_THLD_FORCE.value & ~decoded_wr_biten[9:9]) | (decoded_wr_data[9:9] & decoded_wr_biten[9:9]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.RX_DATA_THLD_FORCE.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.RX_DATA_THLD_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DATA_THLD_FORCE.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_FORCE.RX_DATA_THLD_FORCE.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DATA_THLD_FORCE.value <= field_combo.I3C_EC.TTI.INTERRUPT_FORCE.RX_DATA_THLD_FORCE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_FORCE.RX_DATA_THLD_FORCE.value = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DATA_THLD_FORCE.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_THLD_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_THLD_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_THLD_FORCE.value & ~decoded_wr_biten[10:10]) | (decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_THLD_FORCE.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_THLD_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_THLD_FORCE.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_THLD_FORCE.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_THLD_FORCE.value <= field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_THLD_FORCE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_THLD_FORCE.value = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_THLD_FORCE.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_THLD_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_THLD_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_THLD_FORCE.value & ~decoded_wr_biten[11:11]) | (decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_THLD_FORCE.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_THLD_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_THLD_FORCE.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_THLD_FORCE.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_THLD_FORCE.value <= field_combo.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_THLD_FORCE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_THLD_FORCE.value = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_THLD_FORCE.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_FORCE.IBI_THLD_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.IBI_THLD_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_FORCE.IBI_THLD_FORCE.value & ~decoded_wr_biten[12:12]) | (decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.IBI_THLD_FORCE.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.IBI_THLD_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_FORCE.IBI_THLD_FORCE.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_FORCE.IBI_THLD_FORCE.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_FORCE.IBI_THLD_FORCE.value <= field_combo.I3C_EC.TTI.INTERRUPT_FORCE.IBI_THLD_FORCE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_FORCE.IBI_THLD_FORCE.value = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.IBI_THLD_FORCE.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_FORCE.IBI_DONE_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.IBI_DONE_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_FORCE.IBI_DONE_FORCE.value & ~decoded_wr_biten[13:13]) | (decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.IBI_DONE_FORCE.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.IBI_DONE_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_FORCE.IBI_DONE_FORCE.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_FORCE.IBI_DONE_FORCE.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_FORCE.IBI_DONE_FORCE.value <= field_combo.I3C_EC.TTI.INTERRUPT_FORCE.IBI_DONE_FORCE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_FORCE.IBI_DONE_FORCE.value = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.IBI_DONE_FORCE.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_FORCE.TRANSFER_ABORT_STAT_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TRANSFER_ABORT_STAT_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TRANSFER_ABORT_STAT_FORCE.value & ~decoded_wr_biten[25:25]) | (decoded_wr_data[25:25] & decoded_wr_biten[25:25]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TRANSFER_ABORT_STAT_FORCE.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TRANSFER_ABORT_STAT_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TRANSFER_ABORT_STAT_FORCE.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TRANSFER_ABORT_STAT_FORCE.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TRANSFER_ABORT_STAT_FORCE.value <= field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TRANSFER_ABORT_STAT_FORCE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_FORCE.TRANSFER_ABORT_STAT_FORCE.value = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TRANSFER_ABORT_STAT_FORCE.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_COMPLETE_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_COMPLETE_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_COMPLETE_FORCE.value & ~decoded_wr_biten[26:26]) | (decoded_wr_data[26:26] & decoded_wr_biten[26:26]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_COMPLETE_FORCE.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_COMPLETE_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_COMPLETE_FORCE.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_COMPLETE_FORCE.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_COMPLETE_FORCE.value <= field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_COMPLETE_FORCE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_COMPLETE_FORCE.value = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_COMPLETE_FORCE.value;
    // Field: I3CCSR.I3C_EC.TTI.INTERRUPT_FORCE.TRANSFER_ERR_STAT_FORCE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TRANSFER_ERR_STAT_FORCE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TRANSFER_ERR_STAT_FORCE.value & ~decoded_wr_biten[31:31]) | (decoded_wr_data[31:31] & decoded_wr_biten[31:31]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TRANSFER_ERR_STAT_FORCE.next = next_c;
        field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TRANSFER_ERR_STAT_FORCE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TRANSFER_ERR_STAT_FORCE.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TRANSFER_ERR_STAT_FORCE.load_next) begin
                field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TRANSFER_ERR_STAT_FORCE.value <= field_combo.I3C_EC.TTI.INTERRUPT_FORCE.TRANSFER_ERR_STAT_FORCE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.INTERRUPT_FORCE.TRANSFER_ERR_STAT_FORCE.value = field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TRANSFER_ERR_STAT_FORCE.value;

    assign hwif_out.I3C_EC.TTI.RX_DESC_QUEUE_PORT.req = !decoded_req_is_wr ? decoded_reg_strb.I3C_EC.TTI.RX_DESC_QUEUE_PORT : '0;
    assign hwif_out.I3C_EC.TTI.RX_DESC_QUEUE_PORT.req_is_wr = decoded_req_is_wr;

    assign hwif_out.I3C_EC.TTI.RX_DATA_PORT.req = !decoded_req_is_wr ? decoded_reg_strb.I3C_EC.TTI.RX_DATA_PORT : '0;
    assign hwif_out.I3C_EC.TTI.RX_DATA_PORT.req_is_wr = decoded_req_is_wr;

    assign hwif_out.I3C_EC.TTI.TX_DESC_QUEUE_PORT.req = decoded_req_is_wr ? decoded_reg_strb.I3C_EC.TTI.TX_DESC_QUEUE_PORT : '0;
    assign hwif_out.I3C_EC.TTI.TX_DESC_QUEUE_PORT.req_is_wr = decoded_req_is_wr;
    assign hwif_out.I3C_EC.TTI.TX_DESC_QUEUE_PORT.wr_data = decoded_wr_data;
    assign hwif_out.I3C_EC.TTI.TX_DESC_QUEUE_PORT.wr_biten = decoded_wr_biten;

    assign hwif_out.I3C_EC.TTI.TX_DATA_PORT.req = decoded_req_is_wr ? decoded_reg_strb.I3C_EC.TTI.TX_DATA_PORT : '0;
    assign hwif_out.I3C_EC.TTI.TX_DATA_PORT.req_is_wr = decoded_req_is_wr;
    assign hwif_out.I3C_EC.TTI.TX_DATA_PORT.wr_data = decoded_wr_data;
    assign hwif_out.I3C_EC.TTI.TX_DATA_PORT.wr_biten = decoded_wr_biten;

    assign hwif_out.I3C_EC.TTI.IBI_PORT.req = decoded_req_is_wr ? decoded_reg_strb.I3C_EC.TTI.IBI_PORT : '0;
    assign hwif_out.I3C_EC.TTI.IBI_PORT.req_is_wr = decoded_req_is_wr;
    assign hwif_out.I3C_EC.TTI.IBI_PORT.wr_data = decoded_wr_data;
    assign hwif_out.I3C_EC.TTI.IBI_PORT.wr_biten = decoded_wr_biten;
    assign hwif_out.I3C_EC.TTI.QUEUE_SIZE.RX_DESC_BUFFER_SIZE.value = 8'h5;
    assign hwif_out.I3C_EC.TTI.QUEUE_SIZE.TX_DESC_BUFFER_SIZE.value = 8'h5;
    assign hwif_out.I3C_EC.TTI.QUEUE_SIZE.RX_DATA_BUFFER_SIZE.value = 8'h5;
    assign hwif_out.I3C_EC.TTI.QUEUE_SIZE.TX_DATA_BUFFER_SIZE.value = 8'h5;
    assign hwif_out.I3C_EC.TTI.IBI_QUEUE_SIZE.IBI_QUEUE_SIZE.value = 8'h5;
    // Field: I3CCSR.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.QUEUE_THLD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.next = next_c;
        field_combo.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.value <= 8'h1;
        end else begin
            if(field_combo.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.load_next) begin
                field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.value <= field_combo.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.value = field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.value;
    assign hwif_out.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.swmod = decoded_reg_strb.I3C_EC.TTI.QUEUE_THLD_CTRL && decoded_req_is_wr;
    // Field: I3CCSR.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.QUEUE_THLD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.value & ~decoded_wr_biten[15:8]) | (decoded_wr_data[15:8] & decoded_wr_biten[15:8]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.next = next_c;
        field_combo.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.value <= 8'h1;
        end else begin
            if(field_combo.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.load_next) begin
                field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.value <= field_combo.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.value = field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.value;
    assign hwif_out.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.swmod = decoded_reg_strb.I3C_EC.TTI.QUEUE_THLD_CTRL && decoded_req_is_wr;
    // Field: I3CCSR.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.QUEUE_THLD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.value & ~decoded_wr_biten[31:24]) | (decoded_wr_data[31:24] & decoded_wr_biten[31:24]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.next = next_c;
        field_combo.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.value <= 8'h1;
        end else begin
            if(field_combo.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.load_next) begin
                field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.value <= field_combo.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.value = field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.value;
    assign hwif_out.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.swmod = decoded_reg_strb.I3C_EC.TTI.QUEUE_THLD_CTRL && decoded_req_is_wr;
    // Field: I3CCSR.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_DATA_THLD
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_DATA_THLD.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_DATA_THLD.value & ~decoded_wr_biten[2:0]) | (decoded_wr_data[2:0] & decoded_wr_biten[2:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_DATA_THLD.next = next_c;
        field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_DATA_THLD.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_DATA_THLD.value <= 3'h1;
        end else begin
            if(field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_DATA_THLD.load_next) begin
                field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_DATA_THLD.value <= field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_DATA_THLD.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_DATA_THLD.value = field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_DATA_THLD.value;
    // Field: I3CCSR.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_DATA_THLD
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_DATA_THLD.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_DATA_THLD.value & ~decoded_wr_biten[10:8]) | (decoded_wr_data[10:8] & decoded_wr_biten[10:8]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_DATA_THLD.next = next_c;
        field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_DATA_THLD.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_DATA_THLD.value <= 3'h1;
        end else begin
            if(field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_DATA_THLD.load_next) begin
                field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_DATA_THLD.value <= field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_DATA_THLD.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_DATA_THLD.value = field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_DATA_THLD.value;
    // Field: I3CCSR.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_START_THLD
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_START_THLD.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_START_THLD.value & ~decoded_wr_biten[18:16]) | (decoded_wr_data[18:16] & decoded_wr_biten[18:16]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_START_THLD.next = next_c;
        field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_START_THLD.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_START_THLD.value <= 3'h1;
        end else begin
            if(field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_START_THLD.load_next) begin
                field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_START_THLD.value <= field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_START_THLD.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_START_THLD.value = field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_START_THLD.value;
    // Field: I3CCSR.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_START_THLD
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_START_THLD.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_START_THLD.value & ~decoded_wr_biten[26:24]) | (decoded_wr_data[26:24] & decoded_wr_biten[26:24]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_START_THLD.next = next_c;
        field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_START_THLD.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_START_THLD.value <= 3'h1;
        end else begin
            if(field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_START_THLD.load_next) begin
                field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_START_THLD.value <= field_combo.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_START_THLD.next;
            end
        end
    end
    assign hwif_out.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_START_THLD.value = field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_START_THLD.value;
    assign hwif_out.I3C_EC.SoCMgmtIf.EXTCAP_HEADER.CAP_ID.value = 8'hc1;
    assign hwif_out.I3C_EC.SoCMgmtIf.EXTCAP_HEADER.CAP_LENGTH.value = 16'h18;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL.PLACEHOLDER.value <= 32'h0;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL.PLACEHOLDER.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL.PLACEHOLDER.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL.PLACEHOLDER.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL.PLACEHOLDER.value = field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS.PLACEHOLDER.value <= 32'h0;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS.PLACEHOLDER.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS.PLACEHOLDER.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS.PLACEHOLDER.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS.PLACEHOLDER.value = field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_INTF_BYPASS
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_INTF_BYPASS.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.REC_INTF_CFG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_INTF_BYPASS.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_INTF_BYPASS.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_INTF_BYPASS.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_INTF_BYPASS.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_INTF_BYPASS.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_INTF_BYPASS.value <= field_combo.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_INTF_BYPASS.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_INTF_BYPASS.value = field_storage.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_INTF_BYPASS.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_PAYLOAD_DONE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_PAYLOAD_DONE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.REC_INTF_CFG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_PAYLOAD_DONE.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_PAYLOAD_DONE.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_PAYLOAD_DONE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_PAYLOAD_DONE.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_PAYLOAD_DONE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_PAYLOAD_DONE.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_PAYLOAD_DONE.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_PAYLOAD_DONE.value <= field_combo.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_PAYLOAD_DONE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_PAYLOAD_DONE.value = field_storage.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_PAYLOAD_DONE.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.DEVICE_RESET_CTRL
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.DEVICE_RESET_CTRL.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.DEVICE_RESET_CTRL.value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.DEVICE_RESET_CTRL.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.DEVICE_RESET_CTRL.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.DEVICE_RESET_CTRL.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.DEVICE_RESET_CTRL.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.DEVICE_RESET_CTRL.value <= 8'h0;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.DEVICE_RESET_CTRL.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.DEVICE_RESET_CTRL.value <= field_combo.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.DEVICE_RESET_CTRL.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.DEVICE_RESET_CTRL.value = field_storage.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.DEVICE_RESET_CTRL.value;
    assign hwif_out.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.DEVICE_RESET_CTRL.swmod = decoded_reg_strb.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS && decoded_req_is_wr;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.RECOVERY_CTRL_ACTIVATE_REC_IMG
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.RECOVERY_CTRL_ACTIVATE_REC_IMG.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.RECOVERY_CTRL_ACTIVATE_REC_IMG.value & ~decoded_wr_biten[15:8]) | (decoded_wr_data[15:8] & decoded_wr_biten[15:8]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.RECOVERY_CTRL_ACTIVATE_REC_IMG.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.RECOVERY_CTRL_ACTIVATE_REC_IMG.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.RECOVERY_CTRL_ACTIVATE_REC_IMG.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.RECOVERY_CTRL_ACTIVATE_REC_IMG.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.RECOVERY_CTRL_ACTIVATE_REC_IMG.value <= 8'h0;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.RECOVERY_CTRL_ACTIVATE_REC_IMG.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.RECOVERY_CTRL_ACTIVATE_REC_IMG.value <= field_combo.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.RECOVERY_CTRL_ACTIVATE_REC_IMG.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.RECOVERY_CTRL_ACTIVATE_REC_IMG.value = field_storage.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.RECOVERY_CTRL_ACTIVATE_REC_IMG.value;
    assign hwif_out.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.RECOVERY_CTRL_ACTIVATE_REC_IMG.swmod = decoded_reg_strb.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS && decoded_req_is_wr;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.INDIRECT_FIFO_CTRL_RESET
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.INDIRECT_FIFO_CTRL_RESET.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.INDIRECT_FIFO_CTRL_RESET.value & ~decoded_wr_biten[23:16]) | (decoded_wr_data[23:16] & decoded_wr_biten[23:16]);
            load_next_c = '1;
        end else if(hwif_in.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.INDIRECT_FIFO_CTRL_RESET.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.INDIRECT_FIFO_CTRL_RESET.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.INDIRECT_FIFO_CTRL_RESET.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.INDIRECT_FIFO_CTRL_RESET.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.INDIRECT_FIFO_CTRL_RESET.value <= 8'h0;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.INDIRECT_FIFO_CTRL_RESET.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.INDIRECT_FIFO_CTRL_RESET.value <= field_combo.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.INDIRECT_FIFO_CTRL_RESET.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.INDIRECT_FIFO_CTRL_RESET.value = field_storage.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.INDIRECT_FIFO_CTRL_RESET.value;
    assign hwif_out.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.INDIRECT_FIFO_CTRL_RESET.swmod = decoded_reg_strb.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS && decoded_req_is_wr;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2.PLACEHOLDER.value <= 32'h0;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2.PLACEHOLDER.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2.PLACEHOLDER.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2.PLACEHOLDER.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2.PLACEHOLDER.value = field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3.PLACEHOLDER.value <= 32'h0;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3.PLACEHOLDER.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3.PLACEHOLDER.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3.PLACEHOLDER.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3.PLACEHOLDER.value = field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.INPUT_ENABLE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.INPUT_ENABLE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.INPUT_ENABLE.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.INPUT_ENABLE.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.INPUT_ENABLE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.INPUT_ENABLE.value <= 1'h1;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.INPUT_ENABLE.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.INPUT_ENABLE.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.INPUT_ENABLE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.INPUT_ENABLE.value = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.INPUT_ENABLE.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.SCHMITT_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.SCHMITT_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.SCHMITT_EN.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.SCHMITT_EN.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.SCHMITT_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.SCHMITT_EN.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.SCHMITT_EN.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.SCHMITT_EN.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.SCHMITT_EN.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.SCHMITT_EN.value = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.SCHMITT_EN.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.KEEPER_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.KEEPER_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.KEEPER_EN.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.KEEPER_EN.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.KEEPER_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.KEEPER_EN.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.KEEPER_EN.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.KEEPER_EN.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.KEEPER_EN.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.KEEPER_EN.value = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.KEEPER_EN.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_DIR
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_DIR.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_DIR.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_DIR.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_DIR.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_DIR.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_DIR.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_DIR.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_DIR.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_DIR.value = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_DIR.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_EN.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_EN.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_EN.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_EN.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_EN.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_EN.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_EN.value = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_EN.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.IO_INVERSION
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.IO_INVERSION.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.IO_INVERSION.value & ~decoded_wr_biten[5:5]) | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.IO_INVERSION.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.IO_INVERSION.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.IO_INVERSION.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.IO_INVERSION.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.IO_INVERSION.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.IO_INVERSION.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.IO_INVERSION.value = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.IO_INVERSION.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.OD_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.OD_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.OD_EN.value & ~decoded_wr_biten[6:6]) | (decoded_wr_data[6:6] & decoded_wr_biten[6:6]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.OD_EN.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.OD_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.OD_EN.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.OD_EN.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.OD_EN.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.OD_EN.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.OD_EN.value = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.OD_EN.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.VIRTUAL_OD_EN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.VIRTUAL_OD_EN.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.VIRTUAL_OD_EN.value & ~decoded_wr_biten[7:7]) | (decoded_wr_data[7:7] & decoded_wr_biten[7:7]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.VIRTUAL_OD_EN.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.VIRTUAL_OD_EN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.VIRTUAL_OD_EN.value <= 1'h0;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.VIRTUAL_OD_EN.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.VIRTUAL_OD_EN.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.VIRTUAL_OD_EN.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.VIRTUAL_OD_EN.value = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.VIRTUAL_OD_EN.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PAD_TYPE
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PAD_TYPE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PAD_TYPE.value & ~decoded_wr_biten[31:24]) | (decoded_wr_data[31:24] & decoded_wr_biten[31:24]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PAD_TYPE.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PAD_TYPE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PAD_TYPE.value <= 8'h1;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PAD_TYPE.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PAD_TYPE.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PAD_TYPE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PAD_TYPE.value = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PAD_TYPE.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_SLEW_RATE
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_SLEW_RATE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_SLEW_RATE.value & ~decoded_wr_biten[15:8]) | (decoded_wr_data[15:8] & decoded_wr_biten[15:8]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_SLEW_RATE.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_SLEW_RATE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_SLEW_RATE.value <= 8'hf;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_SLEW_RATE.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_SLEW_RATE.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_SLEW_RATE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_SLEW_RATE.value = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_SLEW_RATE.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_STRENGTH
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_STRENGTH.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_STRENGTH.value & ~decoded_wr_biten[31:24]) | (decoded_wr_data[31:24] & decoded_wr_biten[31:24]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_STRENGTH.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_STRENGTH.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_STRENGTH.value <= 8'hf;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_STRENGTH.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_STRENGTH.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_STRENGTH.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_STRENGTH.value = field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_STRENGTH.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2.PLACEHOLDER.value <= 32'h0;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2.PLACEHOLDER.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2.PLACEHOLDER.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2.PLACEHOLDER.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2.PLACEHOLDER.value = field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3.PLACEHOLDER
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3.PLACEHOLDER.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3.PLACEHOLDER.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3.PLACEHOLDER.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3.PLACEHOLDER.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3.PLACEHOLDER.value <= 32'h0;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3.PLACEHOLDER.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3.PLACEHOLDER.value <= field_combo.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3.PLACEHOLDER.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3.PLACEHOLDER.value = field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3.PLACEHOLDER.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.T_R_REG.T_R
    always_comb begin
        automatic logic [19:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.T_R_REG.T_R.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.T_R_REG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.T_R_REG.T_R.value & ~decoded_wr_biten[19:0]) | (decoded_wr_data[19:0] & decoded_wr_biten[19:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.T_R_REG.T_R.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.T_R_REG.T_R.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.T_R_REG.T_R.value <= 20'h0;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.T_R_REG.T_R.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.T_R_REG.T_R.value <= field_combo.I3C_EC.SoCMgmtIf.T_R_REG.T_R.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.T_R_REG.T_R.value = field_storage.I3C_EC.SoCMgmtIf.T_R_REG.T_R.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.T_F_REG.T_F
    always_comb begin
        automatic logic [19:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.T_F_REG.T_F.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.T_F_REG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.T_F_REG.T_F.value & ~decoded_wr_biten[19:0]) | (decoded_wr_data[19:0] & decoded_wr_biten[19:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.T_F_REG.T_F.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.T_F_REG.T_F.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.T_F_REG.T_F.value <= 20'h0;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.T_F_REG.T_F.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.T_F_REG.T_F.value <= field_combo.I3C_EC.SoCMgmtIf.T_F_REG.T_F.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.T_F_REG.T_F.value = field_storage.I3C_EC.SoCMgmtIf.T_F_REG.T_F.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.T_SU_DAT_REG.T_SU_DAT
    always_comb begin
        automatic logic [19:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.T_SU_DAT_REG.T_SU_DAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.T_SU_DAT_REG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.T_SU_DAT_REG.T_SU_DAT.value & ~decoded_wr_biten[19:0]) | (decoded_wr_data[19:0] & decoded_wr_biten[19:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.T_SU_DAT_REG.T_SU_DAT.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.T_SU_DAT_REG.T_SU_DAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.T_SU_DAT_REG.T_SU_DAT.value <= 20'h0;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.T_SU_DAT_REG.T_SU_DAT.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.T_SU_DAT_REG.T_SU_DAT.value <= field_combo.I3C_EC.SoCMgmtIf.T_SU_DAT_REG.T_SU_DAT.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.T_SU_DAT_REG.T_SU_DAT.value = field_storage.I3C_EC.SoCMgmtIf.T_SU_DAT_REG.T_SU_DAT.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.T_HD_DAT_REG.T_HD_DAT
    always_comb begin
        automatic logic [19:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.T_HD_DAT_REG.T_HD_DAT.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.T_HD_DAT_REG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.T_HD_DAT_REG.T_HD_DAT.value & ~decoded_wr_biten[19:0]) | (decoded_wr_data[19:0] & decoded_wr_biten[19:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.T_HD_DAT_REG.T_HD_DAT.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.T_HD_DAT_REG.T_HD_DAT.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.T_HD_DAT_REG.T_HD_DAT.value <= 20'h0;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.T_HD_DAT_REG.T_HD_DAT.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.T_HD_DAT_REG.T_HD_DAT.value <= field_combo.I3C_EC.SoCMgmtIf.T_HD_DAT_REG.T_HD_DAT.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.T_HD_DAT_REG.T_HD_DAT.value = field_storage.I3C_EC.SoCMgmtIf.T_HD_DAT_REG.T_HD_DAT.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.T_HIGH_REG.T_HIGH
    always_comb begin
        automatic logic [19:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.T_HIGH_REG.T_HIGH.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.T_HIGH_REG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.T_HIGH_REG.T_HIGH.value & ~decoded_wr_biten[19:0]) | (decoded_wr_data[19:0] & decoded_wr_biten[19:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.T_HIGH_REG.T_HIGH.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.T_HIGH_REG.T_HIGH.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.T_HIGH_REG.T_HIGH.value <= 20'h0;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.T_HIGH_REG.T_HIGH.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.T_HIGH_REG.T_HIGH.value <= field_combo.I3C_EC.SoCMgmtIf.T_HIGH_REG.T_HIGH.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.T_HIGH_REG.T_HIGH.value = field_storage.I3C_EC.SoCMgmtIf.T_HIGH_REG.T_HIGH.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.T_LOW_REG.T_LOW
    always_comb begin
        automatic logic [19:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.T_LOW_REG.T_LOW.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.T_LOW_REG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.T_LOW_REG.T_LOW.value & ~decoded_wr_biten[19:0]) | (decoded_wr_data[19:0] & decoded_wr_biten[19:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.T_LOW_REG.T_LOW.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.T_LOW_REG.T_LOW.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.T_LOW_REG.T_LOW.value <= 20'h0;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.T_LOW_REG.T_LOW.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.T_LOW_REG.T_LOW.value <= field_combo.I3C_EC.SoCMgmtIf.T_LOW_REG.T_LOW.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.T_LOW_REG.T_LOW.value = field_storage.I3C_EC.SoCMgmtIf.T_LOW_REG.T_LOW.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.T_HD_STA_REG.T_HD_STA
    always_comb begin
        automatic logic [19:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.T_HD_STA_REG.T_HD_STA.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.T_HD_STA_REG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.T_HD_STA_REG.T_HD_STA.value & ~decoded_wr_biten[19:0]) | (decoded_wr_data[19:0] & decoded_wr_biten[19:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.T_HD_STA_REG.T_HD_STA.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.T_HD_STA_REG.T_HD_STA.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.T_HD_STA_REG.T_HD_STA.value <= 20'h0;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.T_HD_STA_REG.T_HD_STA.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.T_HD_STA_REG.T_HD_STA.value <= field_combo.I3C_EC.SoCMgmtIf.T_HD_STA_REG.T_HD_STA.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.T_HD_STA_REG.T_HD_STA.value = field_storage.I3C_EC.SoCMgmtIf.T_HD_STA_REG.T_HD_STA.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.T_SU_STA_REG.T_SU_STA
    always_comb begin
        automatic logic [19:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.T_SU_STA_REG.T_SU_STA.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.T_SU_STA_REG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.T_SU_STA_REG.T_SU_STA.value & ~decoded_wr_biten[19:0]) | (decoded_wr_data[19:0] & decoded_wr_biten[19:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.T_SU_STA_REG.T_SU_STA.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.T_SU_STA_REG.T_SU_STA.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.T_SU_STA_REG.T_SU_STA.value <= 20'h0;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.T_SU_STA_REG.T_SU_STA.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.T_SU_STA_REG.T_SU_STA.value <= field_combo.I3C_EC.SoCMgmtIf.T_SU_STA_REG.T_SU_STA.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.T_SU_STA_REG.T_SU_STA.value = field_storage.I3C_EC.SoCMgmtIf.T_SU_STA_REG.T_SU_STA.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.T_SU_STO_REG.T_SU_STO
    always_comb begin
        automatic logic [19:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.T_SU_STO_REG.T_SU_STO.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.T_SU_STO_REG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.T_SU_STO_REG.T_SU_STO.value & ~decoded_wr_biten[19:0]) | (decoded_wr_data[19:0] & decoded_wr_biten[19:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.T_SU_STO_REG.T_SU_STO.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.T_SU_STO_REG.T_SU_STO.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.T_SU_STO_REG.T_SU_STO.value <= 20'h0;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.T_SU_STO_REG.T_SU_STO.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.T_SU_STO_REG.T_SU_STO.value <= field_combo.I3C_EC.SoCMgmtIf.T_SU_STO_REG.T_SU_STO.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.T_SU_STO_REG.T_SU_STO.value = field_storage.I3C_EC.SoCMgmtIf.T_SU_STO_REG.T_SU_STO.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.T_FREE_REG.T_FREE
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.T_FREE_REG.T_FREE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.T_FREE_REG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.T_FREE_REG.T_FREE.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.T_FREE_REG.T_FREE.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.T_FREE_REG.T_FREE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.T_FREE_REG.T_FREE.value <= 32'hc;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.T_FREE_REG.T_FREE.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.T_FREE_REG.T_FREE.value <= field_combo.I3C_EC.SoCMgmtIf.T_FREE_REG.T_FREE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.T_FREE_REG.T_FREE.value = field_storage.I3C_EC.SoCMgmtIf.T_FREE_REG.T_FREE.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.T_AVAL_REG.T_AVAL
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.T_AVAL_REG.T_AVAL.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.T_AVAL_REG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.T_AVAL_REG.T_AVAL.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.T_AVAL_REG.T_AVAL.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.T_AVAL_REG.T_AVAL.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.T_AVAL_REG.T_AVAL.value <= 32'h12c;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.T_AVAL_REG.T_AVAL.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.T_AVAL_REG.T_AVAL.value <= field_combo.I3C_EC.SoCMgmtIf.T_AVAL_REG.T_AVAL.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.T_AVAL_REG.T_AVAL.value = field_storage.I3C_EC.SoCMgmtIf.T_AVAL_REG.T_AVAL.value;
    // Field: I3CCSR.I3C_EC.SoCMgmtIf.T_IDLE_REG.T_IDLE
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.SoCMgmtIf.T_IDLE_REG.T_IDLE.value;
        load_next_c = '0;
        if(decoded_reg_strb.I3C_EC.SoCMgmtIf.T_IDLE_REG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.I3C_EC.SoCMgmtIf.T_IDLE_REG.T_IDLE.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.I3C_EC.SoCMgmtIf.T_IDLE_REG.T_IDLE.next = next_c;
        field_combo.I3C_EC.SoCMgmtIf.T_IDLE_REG.T_IDLE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.SoCMgmtIf.T_IDLE_REG.T_IDLE.value <= 32'hea60;
        end else begin
            if(field_combo.I3C_EC.SoCMgmtIf.T_IDLE_REG.T_IDLE.load_next) begin
                field_storage.I3C_EC.SoCMgmtIf.T_IDLE_REG.T_IDLE.value <= field_combo.I3C_EC.SoCMgmtIf.T_IDLE_REG.T_IDLE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.SoCMgmtIf.T_IDLE_REG.T_IDLE.value = field_storage.I3C_EC.SoCMgmtIf.T_IDLE_REG.T_IDLE.value;
    assign hwif_out.I3C_EC.CtrlCfg.EXTCAP_HEADER.CAP_ID.value = 8'h2;
    assign hwif_out.I3C_EC.CtrlCfg.EXTCAP_HEADER.CAP_LENGTH.value = 16'h2;
    // Field: I3CCSR.I3C_EC.CtrlCfg.CONTROLLER_CONFIG.OPERATION_MODE
    always_comb begin
        automatic logic [1:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.I3C_EC.CtrlCfg.CONTROLLER_CONFIG.OPERATION_MODE.value;
        load_next_c = '0;
        if(hwif_in.I3C_EC.CtrlCfg.CONTROLLER_CONFIG.OPERATION_MODE.we) begin // HW Write - we
            next_c = hwif_in.I3C_EC.CtrlCfg.CONTROLLER_CONFIG.OPERATION_MODE.next;
            load_next_c = '1;
        end
        field_combo.I3C_EC.CtrlCfg.CONTROLLER_CONFIG.OPERATION_MODE.next = next_c;
        field_combo.I3C_EC.CtrlCfg.CONTROLLER_CONFIG.OPERATION_MODE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.rst_ni) begin
        if(~hwif_in.rst_ni) begin
            field_storage.I3C_EC.CtrlCfg.CONTROLLER_CONFIG.OPERATION_MODE.value <= 2'h1;
        end else begin
            if(field_combo.I3C_EC.CtrlCfg.CONTROLLER_CONFIG.OPERATION_MODE.load_next) begin
                field_storage.I3C_EC.CtrlCfg.CONTROLLER_CONFIG.OPERATION_MODE.value <= field_combo.I3C_EC.CtrlCfg.CONTROLLER_CONFIG.OPERATION_MODE.next;
            end
        end
    end
    assign hwif_out.I3C_EC.CtrlCfg.CONTROLLER_CONFIG.OPERATION_MODE.value = field_storage.I3C_EC.CtrlCfg.CONTROLLER_CONFIG.OPERATION_MODE.value;
    assign hwif_out.I3C_EC.TERMINATION_EXTCAP_HEADER.CAP_ID.value = 8'h0;
    assign hwif_out.I3C_EC.TERMINATION_EXTCAP_HEADER.CAP_LENGTH.value = 16'h1;

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    always_comb begin
        automatic logic wr_ack;
        wr_ack = '0;
        wr_ack |= hwif_in.I3C_EC.TTI.TX_DESC_QUEUE_PORT.wr_ack;
        wr_ack |= hwif_in.I3C_EC.TTI.TX_DATA_PORT.wr_ack;
        wr_ack |= hwif_in.I3C_EC.TTI.IBI_PORT.wr_ack;
        external_wr_ack = wr_ack;
    end
    assign cpuif_wr_ack = external_wr_ack | (decoded_req & decoded_req_is_wr & ~decoded_strb_is_external);
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------
    logic readback_external_rd_ack_c;
    always_comb begin
        automatic logic rd_ack;
        rd_ack = '0;
        rd_ack |= hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_DATA.rd_ack;
        rd_ack |= hwif_in.I3C_EC.TTI.RX_DESC_QUEUE_PORT.rd_ack;
        rd_ack |= hwif_in.I3C_EC.TTI.RX_DATA_PORT.rd_ack;
        readback_external_rd_ack_c = rd_ack;
    end

    logic readback_external_rd_ack;

    assign readback_external_rd_ack = readback_external_rd_ack_c;

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [31:0] readback_array[82];
    assign readback_array[0][7:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.EXTCAP_HEADER && !decoded_req_is_wr) ? 8'hc0 : '0;
    assign readback_array[0][23:8] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.EXTCAP_HEADER && !decoded_req_is_wr) ? 16'h20 : '0;
    assign readback_array[0][31:24] = '0;
    assign readback_array[1][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.PROT_CAP_0 && !decoded_req_is_wr) ? 32'h2050434f : '0;
    assign readback_array[2][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.PROT_CAP_1 && !decoded_req_is_wr) ? 32'h56434552 : '0;
    assign readback_array[3][15:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.PROT_CAP_2 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.REC_PROT_VERSION.value : '0;
    assign readback_array[3][31:16] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.PROT_CAP_2 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_2.AGENT_CAPS.value : '0;
    assign readback_array[4][7:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.PROT_CAP_3 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.NUM_OF_CMS_REGIONS.value : '0;
    assign readback_array[4][15:8] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.PROT_CAP_3 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.MAX_RESP_TIME.value : '0;
    assign readback_array[4][23:16] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.PROT_CAP_3 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.PROT_CAP_3.HEARTBEAT_PERIOD.value : '0;
    assign readback_array[4][31:24] = '0;
    assign readback_array[5][7:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DESC_TYPE.value : '0;
    assign readback_array[5][15:8] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.VENDOR_SPECIFIC_STR_LENGTH.value : '0;
    assign readback_array[5][31:16] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_0.DATA.value : '0;
    assign readback_array[6][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_1.DATA.value : '0;
    assign readback_array[7][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_2.DATA.value : '0;
    assign readback_array[8][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_3.DATA.value : '0;
    assign readback_array[9][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_4.DATA.value : '0;
    assign readback_array[10][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_ID_5.DATA.value : '0;
    assign readback_array[11][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_ID_RESERVED && !decoded_req_is_wr) ? 32'h0 : '0;
    assign readback_array[12][7:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.DEV_STATUS.value : '0;
    assign readback_array[12][15:8] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.PROT_ERROR.value : '0;
    assign readback_array[12][31:16] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_0.REC_REASON_CODE.value : '0;
    assign readback_array[13][15:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.HEARTBEAT.value : '0;
    assign readback_array[13][24:16] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS_LENGTH.value : '0;
    assign readback_array[13][31:25] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_STATUS_1.VENDOR_STATUS.value : '0;
    assign readback_array[14][7:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_RESET && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.RESET_CTRL.value : '0;
    assign readback_array[14][15:8] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_RESET && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.FORCED_RECOVERY.value : '0;
    assign readback_array[14][23:16] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.DEVICE_RESET && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.DEVICE_RESET.IF_CTRL.value : '0;
    assign readback_array[14][31:24] = '0;
    assign readback_array[15][7:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.CMS.value : '0;
    assign readback_array[15][15:8] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.REC_IMG_SEL.value : '0;
    assign readback_array[15][23:16] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_CTRL.ACTIVATE_REC_IMG.value : '0;
    assign readback_array[15][31:24] = '0;
    assign readback_array[16][3:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.DEV_REC_STATUS.value : '0;
    assign readback_array[16][7:4] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.REC_IMG_INDEX.value : '0;
    assign readback_array[16][15:8] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.RECOVERY_STATUS.VENDOR_SPECIFIC_STATUS.value : '0;
    assign readback_array[16][31:16] = '0;
    assign readback_array[17][0:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.HW_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.TEMP_CRITICAL.value : '0;
    assign readback_array[17][1:1] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.HW_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.SOFT_ERR.value : '0;
    assign readback_array[17][2:2] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.HW_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.FATAL_ERR.value : '0;
    assign readback_array[17][7:3] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.HW_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.RESERVED_7_3.value : '0;
    assign readback_array[17][15:8] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.HW_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS.value : '0;
    assign readback_array[17][23:16] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.HW_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.CTEMP.value : '0;
    assign readback_array[17][31:24] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.HW_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.HW_STATUS.VENDOR_HW_STATUS_LEN.value : '0;
    assign readback_array[18][7:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.CMS.value : '0;
    assign readback_array[18][15:8] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_0.RESET.value : '0;
    assign readback_array[18][31:16] = '0;
    assign readback_array[19][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_CTRL_1.IMAGE_SIZE.value : '0;
    assign readback_array[20][0:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.EMPTY.value : '0;
    assign readback_array[20][1:1] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.FULL.value : '0;
    assign readback_array[20][7:2] = '0;
    assign readback_array[20][10:8] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_0.REGION_TYPE.value : '0;
    assign readback_array[20][31:11] = '0;
    assign readback_array[21][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_1.WRITE_INDEX.value : '0;
    assign readback_array[22][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_2.READ_INDEX.value : '0;
    assign readback_array[23][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3 && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_3.FIFO_SIZE.value : '0;
    assign readback_array[24][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_STATUS_4 && !decoded_req_is_wr) ? 32'h40 : '0;
    assign readback_array[25][31:0] = (decoded_reg_strb.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_RESERVED && !decoded_req_is_wr) ? field_storage.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_RESERVED.DATA.value : '0;
    assign readback_array[26] = hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_DATA.rd_ack ? hwif_in.I3C_EC.SecFwRecoveryIf.INDIRECT_FIFO_DATA.rd_data : '0;
    assign readback_array[27][7:0] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.EXTCAP_HEADER && !decoded_req_is_wr) ? 8'h12 : '0;
    assign readback_array[27][23:8] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.EXTCAP_HEADER && !decoded_req_is_wr) ? 16'h10 : '0;
    assign readback_array[27][31:24] = '0;
    assign readback_array[28][0:0] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PENDING_RX_NACK.value : '0;
    assign readback_array[28][1:1] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DELAY_NACK.value : '0;
    assign readback_array[28][2:2] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.ACR_FSM_OP_SELECT.value : '0;
    assign readback_array[28][3:3] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.PRIME_ACCEPT_GETACCCR.value : '0;
    assign readback_array[28][4:4] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.HANDOFF_DEEP_SLEEP.value : '0;
    assign readback_array[28][7:5] = '0;
    assign readback_array[28][10:8] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.BAST_CCC_IBI_RING.value : '0;
    assign readback_array[28][11:11] = '0;
    assign readback_array[28][12:12] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.TARGET_XACT_ENABLE.value : '0;
    assign readback_array[28][13:13] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETAASA_ENABLE.value : '0;
    assign readback_array[28][14:14] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_SETDASA_ENABLE.value : '0;
    assign readback_array[28][15:15] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.DAA_ENTDAA_ENABLE.value : '0;
    assign readback_array[28][19:16] = '0;
    assign readback_array[28][20:20] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.RSTACT_DEFBYTE_02.value : '0;
    assign readback_array[28][29:21] = '0;
    assign readback_array[28][31:30] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CONTROL.STBY_CR_ENABLE_INIT.value : '0;
    assign readback_array[29][6:0] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR.value : '0;
    assign readback_array[29][14:7] = '0;
    assign readback_array[29][15:15] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.STATIC_ADDR_VALID.value : '0;
    assign readback_array[29][22:16] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR.value : '0;
    assign readback_array[29][30:23] = '0;
    assign readback_array[29][31:31] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_ADDR.DYNAMIC_ADDR_VALID.value : '0;
    assign readback_array[30][4:0] = '0;
    assign readback_array[30][5:5] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[30][11:6] = '0;
    assign readback_array[30][12:12] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES && !decoded_req_is_wr) ? 1'h1 : '0;
    assign readback_array[30][13:13] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES && !decoded_req_is_wr) ? 1'h1 : '0;
    assign readback_array[30][14:14] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES && !decoded_req_is_wr) ? 1'h1 : '0;
    assign readback_array[30][15:15] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CAPABILITIES && !decoded_req_is_wr) ? 1'h0 : '0;
    assign readback_array[30][31:16] = '0;
    assign readback_array[31][0:0] = '0;
    assign readback_array[31][15:1] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.PID_HI.value : '0;
    assign readback_array[31][23:16] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.DCR.value : '0;
    assign readback_array[31][28:24] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.BCR_VAR.value : '0;
    assign readback_array[31][31:29] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_CHAR.BCR_FIXED.value : '0;
    assign readback_array[32][1:0] = '0;
    assign readback_array[32][2:2] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.AC_CURRENT_OWN.value : '0;
    assign readback_array[32][4:3] = '0;
    assign readback_array[32][7:5] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.SIMPLE_CRR_STATUS.value : '0;
    assign readback_array[32][8:8] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_STATUS.HJ_REQ_STATUS.value : '0;
    assign readback_array[32][31:9] = '0;
    assign readback_array[33][0:0] = '0;
    assign readback_array[33][15:1] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.PID_HI.value : '0;
    assign readback_array[33][23:16] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.DCR.value : '0;
    assign readback_array[33][28:24] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_VAR.value : '0;
    assign readback_array[33][31:29] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_CHAR.BCR_FIXED.value : '0;
    assign readback_array[34][31:0] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_DEVICE_PID_LO.PID_LO.value : '0;
    assign readback_array[35][0:0] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_REMAIN_STAT.value : '0;
    assign readback_array[35][1:1] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_OK_PRIMED_STAT.value : '0;
    assign readback_array[35][2:2] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_FAIL_STAT.value : '0;
    assign readback_array[35][3:3] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.ACR_HANDOFF_ERR_M3_STAT.value : '0;
    assign readback_array[35][9:4] = '0;
    assign readback_array[35][10:10] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CRR_RESPONSE_STAT.value : '0;
    assign readback_array[35][11:11] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_DYN_ADDR_STAT.value : '0;
    assign readback_array[35][12:12] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_NACKED_STAT.value : '0;
    assign readback_array[35][13:13] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_OK_STAT.value : '0;
    assign readback_array[35][14:14] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_ACCEPT_ERR_STAT.value : '0;
    assign readback_array[35][15:15] = '0;
    assign readback_array[35][16:16] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.STBY_CR_OP_RSTACT_STAT.value : '0;
    assign readback_array[35][17:17] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_PARAM_MODIFIED_STAT.value : '0;
    assign readback_array[35][18:18] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_UNHANDLED_NACK_STAT.value : '0;
    assign readback_array[35][19:19] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_STATUS.CCC_FATAL_RSTDAA_ERR_STAT.value : '0;
    assign readback_array[35][31:20] = '0;
    assign readback_array[36][31:0] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_PID_LO && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRTUAL_DEVICE_PID_LO.PID_LO.value : '0;
    assign readback_array[37][0:0] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_REMAIN_SIGNAL_EN.value : '0;
    assign readback_array[37][1:1] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_OK_PRIMED_SIGNAL_EN.value : '0;
    assign readback_array[37][2:2] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_FAIL_SIGNAL_EN.value : '0;
    assign readback_array[37][3:3] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.ACR_HANDOFF_ERR_M3_SIGNAL_EN.value : '0;
    assign readback_array[37][9:4] = '0;
    assign readback_array[37][10:10] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CRR_RESPONSE_SIGNAL_EN.value : '0;
    assign readback_array[37][11:11] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_DYN_ADDR_SIGNAL_EN.value : '0;
    assign readback_array[37][12:12] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_NACKED_SIGNAL_EN.value : '0;
    assign readback_array[37][13:13] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_OK_SIGNAL_EN.value : '0;
    assign readback_array[37][14:14] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_ACCEPT_ERR_SIGNAL_EN.value : '0;
    assign readback_array[37][15:15] = '0;
    assign readback_array[37][16:16] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.STBY_CR_OP_RSTACT_SIGNAL_EN.value : '0;
    assign readback_array[37][17:17] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_PARAM_MODIFIED_SIGNAL_EN.value : '0;
    assign readback_array[37][18:18] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_UNHANDLED_NACK_SIGNAL_EN.value : '0;
    assign readback_array[37][19:19] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_SIGNAL_ENABLE.CCC_FATAL_RSTDAA_ERR_SIGNAL_EN.value : '0;
    assign readback_array[37][31:20] = '0;
    assign readback_array[38][9:0] = '0;
    assign readback_array[38][10:10] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CRR_RESPONSE_FORCE.value : '0;
    assign readback_array[38][11:11] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_DYN_ADDR_FORCE.value : '0;
    assign readback_array[38][12:12] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_NACKED_FORCE.value : '0;
    assign readback_array[38][13:13] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_OK_FORCE.value : '0;
    assign readback_array[38][14:14] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.STBY_CR_ACCEPT_ERR_FORCE.value : '0;
    assign readback_array[38][16:15] = '0;
    assign readback_array[38][17:17] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_PARAM_MODIFIED_FORCE.value : '0;
    assign readback_array[38][18:18] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_UNHANDLED_NACK_FORCE.value : '0;
    assign readback_array[38][19:19] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_INTR_FORCE.CCC_FATAL_RSTDAA_ERR_FORCE.value : '0;
    assign readback_array[38][31:20] = '0;
    assign readback_array[39][2:0] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP1_BUS_CONFIG.value : '0;
    assign readback_array[39][7:3] = '0;
    assign readback_array[39][11:8] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_GETCAPS.F2_CRCAP2_DEV_INTERACT.value : '0;
    assign readback_array[39][31:12] = '0;
    assign readback_array[40][7:0] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RST_ACTION.value : '0;
    assign readback_array[40][15:8] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_PERIPHERAL.value : '0;
    assign readback_array[40][23:16] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_TIME_TARGET.value : '0;
    assign readback_array[40][30:24] = '0;
    assign readback_array[40][31:31] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_CCC_CONFIG_RSTACT_PARAMS.RESET_DYNAMIC_ADDR.value : '0;
    assign readback_array[41][6:0] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR.value : '0;
    assign readback_array[41][14:7] = '0;
    assign readback_array[41][15:15] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_STATIC_ADDR_VALID.value : '0;
    assign readback_array[41][22:16] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR.value : '0;
    assign readback_array[41][30:23] = '0;
    assign readback_array[41][31:31] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.STBY_CR_VIRT_DEVICE_ADDR.VIRT_DYNAMIC_ADDR_VALID.value : '0;
    assign readback_array[42][31:0] = (decoded_reg_strb.I3C_EC.StdbyCtrlMode.__rsvd_3 && !decoded_req_is_wr) ? field_storage.I3C_EC.StdbyCtrlMode.__rsvd_3.__rsvd.value : '0;
    assign readback_array[43][7:0] = (decoded_reg_strb.I3C_EC.TTI.EXTCAP_HEADER && !decoded_req_is_wr) ? 8'hc4 : '0;
    assign readback_array[43][23:8] = (decoded_reg_strb.I3C_EC.TTI.EXTCAP_HEADER && !decoded_req_is_wr) ? 16'h10 : '0;
    assign readback_array[43][31:24] = '0;
    assign readback_array[44][9:0] = '0;
    assign readback_array[44][10:10] = (decoded_reg_strb.I3C_EC.TTI.CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.CONTROL.HJ_EN.value : '0;
    assign readback_array[44][11:11] = (decoded_reg_strb.I3C_EC.TTI.CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.CONTROL.CRR_EN.value : '0;
    assign readback_array[44][12:12] = (decoded_reg_strb.I3C_EC.TTI.CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.CONTROL.IBI_EN.value : '0;
    assign readback_array[44][15:13] = (decoded_reg_strb.I3C_EC.TTI.CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.CONTROL.IBI_RETRY_NUM.value : '0;
    assign readback_array[44][31:16] = '0;
    assign readback_array[45][12:0] = '0;
    assign readback_array[45][13:13] = (decoded_reg_strb.I3C_EC.TTI.STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.STATUS.PROTOCOL_ERROR.value : '0;
    assign readback_array[45][15:14] = (decoded_reg_strb.I3C_EC.TTI.STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.STATUS.LAST_IBI_STATUS.value : '0;
    assign readback_array[45][31:16] = '0;
    assign readback_array[46][0:0] = (decoded_reg_strb.I3C_EC.TTI.RESET_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.RESET_CONTROL.SOFT_RST.value : '0;
    assign readback_array[46][1:1] = (decoded_reg_strb.I3C_EC.TTI.RESET_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.RESET_CONTROL.TX_DESC_RST.value : '0;
    assign readback_array[46][2:2] = (decoded_reg_strb.I3C_EC.TTI.RESET_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.RESET_CONTROL.RX_DESC_RST.value : '0;
    assign readback_array[46][3:3] = (decoded_reg_strb.I3C_EC.TTI.RESET_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.RESET_CONTROL.TX_DATA_RST.value : '0;
    assign readback_array[46][4:4] = (decoded_reg_strb.I3C_EC.TTI.RESET_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.RESET_CONTROL.RX_DATA_RST.value : '0;
    assign readback_array[46][5:5] = (decoded_reg_strb.I3C_EC.TTI.RESET_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.RESET_CONTROL.IBI_QUEUE_RST.value : '0;
    assign readback_array[46][31:6] = '0;
    assign readback_array[47][0:0] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_STAT.value : '0;
    assign readback_array[47][1:1] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_STAT.value : '0;
    assign readback_array[47][2:2] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_TIMEOUT.value : '0;
    assign readback_array[47][3:3] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_TIMEOUT.value : '0;
    assign readback_array[47][7:4] = '0;
    assign readback_array[47][8:8] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DATA_THLD_STAT.value : '0;
    assign readback_array[47][9:9] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DATA_THLD_STAT.value : '0;
    assign readback_array[47][10:10] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_THLD_STAT.value : '0;
    assign readback_array[47][11:11] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_STATUS.RX_DESC_THLD_STAT.value : '0;
    assign readback_array[47][12:12] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_STATUS.IBI_THLD_STAT.value : '0;
    assign readback_array[47][13:13] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_STATUS.IBI_DONE.value : '0;
    assign readback_array[47][14:14] = '0;
    assign readback_array[47][18:15] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_STATUS.PENDING_INTERRUPT.value : '0;
    assign readback_array[47][24:19] = '0;
    assign readback_array[47][25:25] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ABORT_STAT.value : '0;
    assign readback_array[47][26:26] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TX_DESC_COMPLETE.value : '0;
    assign readback_array[47][30:27] = '0;
    assign readback_array[47][31:31] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_STATUS.TRANSFER_ERR_STAT.value : '0;
    assign readback_array[48][0:0] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_STAT_EN.value : '0;
    assign readback_array[48][1:1] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_STAT_EN.value : '0;
    assign readback_array[48][2:2] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_TIMEOUT_EN.value : '0;
    assign readback_array[48][3:3] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_TIMEOUT_EN.value : '0;
    assign readback_array[48][7:4] = '0;
    assign readback_array[48][8:8] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DATA_THLD_STAT_EN.value : '0;
    assign readback_array[48][9:9] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DATA_THLD_STAT_EN.value : '0;
    assign readback_array[48][10:10] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_THLD_STAT_EN.value : '0;
    assign readback_array[48][11:11] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.RX_DESC_THLD_STAT_EN.value : '0;
    assign readback_array[48][12:12] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_THLD_STAT_EN.value : '0;
    assign readback_array[48][13:13] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.IBI_DONE_EN.value : '0;
    assign readback_array[48][24:14] = '0;
    assign readback_array[48][25:25] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TRANSFER_ABORT_STAT_EN.value : '0;
    assign readback_array[48][26:26] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TX_DESC_COMPLETE_EN.value : '0;
    assign readback_array[48][30:27] = '0;
    assign readback_array[48][31:31] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_ENABLE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_ENABLE.TRANSFER_ERR_STAT_EN.value : '0;
    assign readback_array[49][0:0] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_STAT_FORCE.value : '0;
    assign readback_array[49][1:1] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_STAT_FORCE.value : '0;
    assign readback_array[49][2:2] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_TIMEOUT_FORCE.value : '0;
    assign readback_array[49][3:3] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_TIMEOUT_FORCE.value : '0;
    assign readback_array[49][7:4] = '0;
    assign readback_array[49][8:8] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DATA_THLD_FORCE.value : '0;
    assign readback_array[49][9:9] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DATA_THLD_FORCE.value : '0;
    assign readback_array[49][10:10] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_THLD_FORCE.value : '0;
    assign readback_array[49][11:11] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_FORCE.RX_DESC_THLD_FORCE.value : '0;
    assign readback_array[49][12:12] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_FORCE.IBI_THLD_FORCE.value : '0;
    assign readback_array[49][13:13] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_FORCE.IBI_DONE_FORCE.value : '0;
    assign readback_array[49][24:14] = '0;
    assign readback_array[49][25:25] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TRANSFER_ABORT_STAT_FORCE.value : '0;
    assign readback_array[49][26:26] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TX_DESC_COMPLETE_FORCE.value : '0;
    assign readback_array[49][30:27] = '0;
    assign readback_array[49][31:31] = (decoded_reg_strb.I3C_EC.TTI.INTERRUPT_FORCE && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.INTERRUPT_FORCE.TRANSFER_ERR_STAT_FORCE.value : '0;
    assign readback_array[50] = hwif_in.I3C_EC.TTI.RX_DESC_QUEUE_PORT.rd_ack ? hwif_in.I3C_EC.TTI.RX_DESC_QUEUE_PORT.rd_data : '0;
    assign readback_array[51] = hwif_in.I3C_EC.TTI.RX_DATA_PORT.rd_ack ? hwif_in.I3C_EC.TTI.RX_DATA_PORT.rd_data : '0;
    assign readback_array[52][7:0] = (decoded_reg_strb.I3C_EC.TTI.QUEUE_SIZE && !decoded_req_is_wr) ? 8'h5 : '0;
    assign readback_array[52][15:8] = (decoded_reg_strb.I3C_EC.TTI.QUEUE_SIZE && !decoded_req_is_wr) ? 8'h5 : '0;
    assign readback_array[52][23:16] = (decoded_reg_strb.I3C_EC.TTI.QUEUE_SIZE && !decoded_req_is_wr) ? 8'h5 : '0;
    assign readback_array[52][31:24] = (decoded_reg_strb.I3C_EC.TTI.QUEUE_SIZE && !decoded_req_is_wr) ? 8'h5 : '0;
    assign readback_array[53][7:0] = (decoded_reg_strb.I3C_EC.TTI.IBI_QUEUE_SIZE && !decoded_req_is_wr) ? 8'h5 : '0;
    assign readback_array[53][31:8] = '0;
    assign readback_array[54][7:0] = (decoded_reg_strb.I3C_EC.TTI.QUEUE_THLD_CTRL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.TX_DESC_THLD.value : '0;
    assign readback_array[54][15:8] = (decoded_reg_strb.I3C_EC.TTI.QUEUE_THLD_CTRL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.RX_DESC_THLD.value : '0;
    assign readback_array[54][23:16] = '0;
    assign readback_array[54][31:24] = (decoded_reg_strb.I3C_EC.TTI.QUEUE_THLD_CTRL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.QUEUE_THLD_CTRL.IBI_THLD.value : '0;
    assign readback_array[55][2:0] = (decoded_reg_strb.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_DATA_THLD.value : '0;
    assign readback_array[55][7:3] = '0;
    assign readback_array[55][10:8] = (decoded_reg_strb.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_DATA_THLD.value : '0;
    assign readback_array[55][15:11] = '0;
    assign readback_array[55][18:16] = (decoded_reg_strb.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.TX_START_THLD.value : '0;
    assign readback_array[55][23:19] = '0;
    assign readback_array[55][26:24] = (decoded_reg_strb.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL && !decoded_req_is_wr) ? field_storage.I3C_EC.TTI.DATA_BUFFER_THLD_CTRL.RX_START_THLD.value : '0;
    assign readback_array[55][31:27] = '0;
    assign readback_array[56][7:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.EXTCAP_HEADER && !decoded_req_is_wr) ? 8'hc1 : '0;
    assign readback_array[56][23:8] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.EXTCAP_HEADER && !decoded_req_is_wr) ? 16'h18 : '0;
    assign readback_array[56][31:24] = '0;
    assign readback_array[57][31:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_CONTROL.PLACEHOLDER.value : '0;
    assign readback_array[58][31:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_STATUS.PLACEHOLDER.value : '0;
    assign readback_array[59][0:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.REC_INTF_CFG && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_INTF_BYPASS.value : '0;
    assign readback_array[59][1:1] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.REC_INTF_CFG && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.REC_INTF_CFG.REC_PAYLOAD_DONE.value : '0;
    assign readback_array[59][31:2] = '0;
    assign readback_array[60][7:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.DEVICE_RESET_CTRL.value : '0;
    assign readback_array[60][15:8] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.RECOVERY_CTRL_ACTIVATE_REC_IMG.value : '0;
    assign readback_array[60][23:16] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.REC_INTF_REG_W1C_ACCESS.INDIRECT_FIFO_CTRL_RESET.value : '0;
    assign readback_array[60][31:24] = '0;
    assign readback_array[61][31:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2 && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_2.PLACEHOLDER.value : '0;
    assign readback_array[62][31:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3 && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_RSVD_3.PLACEHOLDER.value : '0;
    assign readback_array[63][0:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.INPUT_ENABLE.value : '0;
    assign readback_array[63][1:1] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.SCHMITT_EN.value : '0;
    assign readback_array[63][2:2] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.KEEPER_EN.value : '0;
    assign readback_array[63][3:3] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_DIR.value : '0;
    assign readback_array[63][4:4] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PULL_EN.value : '0;
    assign readback_array[63][5:5] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.IO_INVERSION.value : '0;
    assign readback_array[63][6:6] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.OD_EN.value : '0;
    assign readback_array[63][7:7] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.VIRTUAL_OD_EN.value : '0;
    assign readback_array[63][23:8] = '0;
    assign readback_array[63][31:24] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_CONF && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_CONF.PAD_TYPE.value : '0;
    assign readback_array[64][7:0] = '0;
    assign readback_array[64][15:8] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_SLEW_RATE.value : '0;
    assign readback_array[64][23:16] = '0;
    assign readback_array[64][31:24] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_PAD_ATTR.DRIVE_STRENGTH.value : '0;
    assign readback_array[65][31:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2 && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_2.PLACEHOLDER.value : '0;
    assign readback_array[66][31:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3 && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.SOC_MGMT_FEATURE_3.PLACEHOLDER.value : '0;
    assign readback_array[67][19:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.T_R_REG && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.T_R_REG.T_R.value : '0;
    assign readback_array[67][31:20] = '0;
    assign readback_array[68][19:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.T_F_REG && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.T_F_REG.T_F.value : '0;
    assign readback_array[68][31:20] = '0;
    assign readback_array[69][19:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.T_SU_DAT_REG && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.T_SU_DAT_REG.T_SU_DAT.value : '0;
    assign readback_array[69][31:20] = '0;
    assign readback_array[70][19:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.T_HD_DAT_REG && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.T_HD_DAT_REG.T_HD_DAT.value : '0;
    assign readback_array[70][31:20] = '0;
    assign readback_array[71][19:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.T_HIGH_REG && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.T_HIGH_REG.T_HIGH.value : '0;
    assign readback_array[71][31:20] = '0;
    assign readback_array[72][19:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.T_LOW_REG && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.T_LOW_REG.T_LOW.value : '0;
    assign readback_array[72][31:20] = '0;
    assign readback_array[73][19:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.T_HD_STA_REG && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.T_HD_STA_REG.T_HD_STA.value : '0;
    assign readback_array[73][31:20] = '0;
    assign readback_array[74][19:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.T_SU_STA_REG && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.T_SU_STA_REG.T_SU_STA.value : '0;
    assign readback_array[74][31:20] = '0;
    assign readback_array[75][19:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.T_SU_STO_REG && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.T_SU_STO_REG.T_SU_STO.value : '0;
    assign readback_array[75][31:20] = '0;
    assign readback_array[76][31:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.T_FREE_REG && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.T_FREE_REG.T_FREE.value : '0;
    assign readback_array[77][31:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.T_AVAL_REG && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.T_AVAL_REG.T_AVAL.value : '0;
    assign readback_array[78][31:0] = (decoded_reg_strb.I3C_EC.SoCMgmtIf.T_IDLE_REG && !decoded_req_is_wr) ? field_storage.I3C_EC.SoCMgmtIf.T_IDLE_REG.T_IDLE.value : '0;
    assign readback_array[79][7:0] = (decoded_reg_strb.I3C_EC.CtrlCfg.EXTCAP_HEADER && !decoded_req_is_wr) ? 8'h2 : '0;
    assign readback_array[79][23:8] = (decoded_reg_strb.I3C_EC.CtrlCfg.EXTCAP_HEADER && !decoded_req_is_wr) ? 16'h2 : '0;
    assign readback_array[79][31:24] = '0;
    assign readback_array[80][3:0] = '0;
    assign readback_array[80][5:4] = (decoded_reg_strb.I3C_EC.CtrlCfg.CONTROLLER_CONFIG && !decoded_req_is_wr) ? field_storage.I3C_EC.CtrlCfg.CONTROLLER_CONFIG.OPERATION_MODE.value : '0;
    assign readback_array[80][31:6] = '0;
    assign readback_array[81][7:0] = (decoded_reg_strb.I3C_EC.TERMINATION_EXTCAP_HEADER && !decoded_req_is_wr) ? 8'h0 : '0;
    assign readback_array[81][23:8] = (decoded_reg_strb.I3C_EC.TERMINATION_EXTCAP_HEADER && !decoded_req_is_wr) ? 16'h1 : '0;
    assign readback_array[81][31:24] = '0;

    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr & ~decoded_strb_is_external;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<82; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign external_rd_ack = readback_external_rd_ack;
    assign cpuif_rd_ack = readback_done | readback_external_rd_ack;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
